diff -Naur linux-4.10.1-orig/arch/tile/gxio/gpio.c linux-4.10.1/arch/tile/gxio/gpio.c
--- linux-4.10.1-orig/arch/tile/gxio/gpio.c	1969-12-31 19:00:00.000000000 -0500
+++ linux-4.10.1/arch/tile/gxio/gpio.c	2017-09-22 10:31:25.000000000 -0400
@@ -0,0 +1,263 @@
+/*
+ * Copyright 2013 Tilera Corporation. All Rights Reserved.
+ *
+ *   This program is free software; you can redistribute it and/or
+ *   modify it under the terms of the GNU General Public License
+ *   as published by the Free Software Foundation, version 2.
+ *
+ *   This program is distributed in the hope that it will be useful, but
+ *   WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, GOOD TITLE or
+ *   NON INFRINGEMENT.  See the GNU General Public License for
+ *   more details.
+ */
+
+/*
+ *
+ * Implementation of GPIO gxio calls.
+ */
+
+#include <linux/io.h>
+#include <linux/errno.h>
+#include <linux/module.h>
+
+#include <gxio/gpio.h>
+#include <gxio/iorpc_globals.h>
+#include <gxio/iorpc_gpio.h>
+#include <gxio/kiorpc.h>
+
+int gxio_gpio_init(gxio_gpio_context_t * context, int gpio_index)
+{
+	char file[32];
+	int fd;
+
+	snprintf(file, sizeof(file), "gpio/%d/iorpc", gpio_index);
+	fd = hv_dev_open((HV_VirtAddr) file, 0);
+	if (fd < 0) {
+		if (fd >= GXIO_ERR_MIN && fd <= GXIO_ERR_MAX)
+			return fd;
+		else
+			return -ENODEV;
+	}
+
+	context->fd = fd;
+
+	// Map in the MMIO space.
+	context->mmio_base = (void __force *)
+		iorpc_ioremap(fd, 0, HV_GPIO_MMIO_SIZE);
+
+	if (context->mmio_base == NULL) {
+		hv_dev_close(context->fd);
+		return -ENODEV;
+	}
+
+	return 0;
+}
+
+EXPORT_SYMBOL_GPL(gxio_gpio_init);
+
+int gxio_gpio_destroy(gxio_gpio_context_t * context)
+{
+
+	iounmap((void __force __iomem *)(context->mmio_base));
+	hv_dev_close(context->fd);
+
+	context->mmio_base = NULL;
+	context->fd = -1;
+
+	return 0;
+}
+
+EXPORT_SYMBOL_GPL(gxio_gpio_destroy);
+
+uint64_t gxio_gpio_get(gxio_gpio_context_t * context)
+{
+	return __gxio_mmio_read(context->mmio_base + GPIO_PIN_STATE);
+}
+
+EXPORT_SYMBOL_GPL(gxio_gpio_get);
+
+void gxio_gpio_set(gxio_gpio_context_t * context, uint64_t pins, uint64_t mask)
+{
+	if (pins & mask)
+		__gxio_mmio_write(context->mmio_base + GPIO_PIN_SET,
+				  pins & mask);
+	if (~pins & mask)
+		__gxio_mmio_write(context->mmio_base + GPIO_PIN_CLR,
+				  ~pins & mask);
+}
+
+EXPORT_SYMBOL_GPL(gxio_gpio_set);
+
+void gxio_gpio_toggle(gxio_gpio_context_t * context, uint64_t pins)
+{
+	__gxio_mmio_write(context->mmio_base + GPIO_PIN_OUTPUT_TGL, pins);
+}
+
+EXPORT_SYMBOL_GPL(gxio_gpio_toggle);
+
+void gxio_gpio_pulse_assert(gxio_gpio_context_t * context, uint64_t pins)
+{
+	__gxio_mmio_write(context->mmio_base + GPIO_PIN_PULSE_SET, pins);
+}
+
+EXPORT_SYMBOL_GPL(gxio_gpio_pulse_assert);
+
+void gxio_gpio_pulse_deassert(gxio_gpio_context_t * context, uint64_t pins)
+{
+	__gxio_mmio_write(context->mmio_base + GPIO_PIN_PULSE_CLR, pins);
+}
+
+EXPORT_SYMBOL_GPL(gxio_gpio_pulse_deassert);
+
+void gxio_gpio_release(gxio_gpio_context_t * context, uint64_t pins)
+{
+	__gxio_mmio_write(context->mmio_base + GPIO_PIN_RELEASE, pins);
+}
+
+EXPORT_SYMBOL_GPL(gxio_gpio_release);
+
+uint64_t gxio_gpio_get_out_inv(gxio_gpio_context_t * context)
+{
+	return __gxio_mmio_read(context->mmio_base + GPIO_PIN_OUTPUT_INV);
+}
+
+EXPORT_SYMBOL_GPL(gxio_gpio_get_out_inv);
+
+void gxio_gpio_set_out_inv(gxio_gpio_context_t * context, uint64_t pins)
+{
+	__gxio_mmio_write(context->mmio_base + GPIO_PIN_OUTPUT_INV, pins);
+}
+
+EXPORT_SYMBOL_GPL(gxio_gpio_set_out_inv);
+
+uint64_t gxio_gpio_get_in_inv(gxio_gpio_context_t * context)
+{
+	return __gxio_mmio_read(context->mmio_base + GPIO_PIN_INPUT_INV);
+}
+
+EXPORT_SYMBOL_GPL(gxio_gpio_get_in_inv);
+
+void gxio_gpio_set_in_inv(gxio_gpio_context_t * context, uint64_t pins)
+{
+	__gxio_mmio_write(context->mmio_base + GPIO_PIN_INPUT_INV, pins);
+}
+
+EXPORT_SYMBOL_GPL(gxio_gpio_set_in_inv);
+
+uint64_t gxio_gpio_get_out_mask(gxio_gpio_context_t * context)
+{
+	return __gxio_mmio_read(context->mmio_base + GPIO_PIN_OUTPUT_MSK);
+}
+
+EXPORT_SYMBOL_GPL(gxio_gpio_get_out_mask);
+
+void gxio_gpio_set_out_mask(gxio_gpio_context_t * context, uint64_t pins)
+{
+	__gxio_mmio_write(context->mmio_base + GPIO_PIN_OUTPUT_MSK, pins);
+}
+
+EXPORT_SYMBOL_GPL(gxio_gpio_set_out_mask);
+
+uint64_t gxio_gpio_get_in_mask(gxio_gpio_context_t * context)
+{
+	return __gxio_mmio_read(context->mmio_base + GPIO_PIN_INPUT_MSK);
+}
+
+EXPORT_SYMBOL_GPL(gxio_gpio_get_in_mask);
+
+void gxio_gpio_set_in_mask(gxio_gpio_context_t * context, uint64_t pins)
+{
+	__gxio_mmio_write(context->mmio_base + GPIO_PIN_INPUT_MSK, pins);
+}
+
+EXPORT_SYMBOL_GPL(gxio_gpio_set_in_mask);
+
+uint64_t gxio_gpio_get_in_sync(gxio_gpio_context_t * context)
+{
+	return __gxio_mmio_read(context->mmio_base + GPIO_PIN_INPUT_SYNC);
+}
+
+EXPORT_SYMBOL_GPL(gxio_gpio_get_in_sync);
+
+void gxio_gpio_set_in_sync(gxio_gpio_context_t * context, uint64_t pins)
+{
+	__gxio_mmio_write(context->mmio_base + GPIO_PIN_INPUT_SYNC, pins);
+}
+
+EXPORT_SYMBOL_GPL(gxio_gpio_set_in_sync);
+
+uint64_t gxio_gpio_get_in_cnd(gxio_gpio_context_t * context)
+{
+	return __gxio_mmio_read(context->mmio_base + GPIO_PIN_INPUT_CND);
+}
+
+EXPORT_SYMBOL_GPL(gxio_gpio_get_in_cnd);
+
+void gxio_gpio_set_in_cnd(gxio_gpio_context_t * context, uint64_t pins)
+{
+	__gxio_mmio_write(context->mmio_base + GPIO_PIN_INPUT_CND, pins);
+}
+
+EXPORT_SYMBOL_GPL(gxio_gpio_set_in_cnd);
+
+void gxio_gpio_report_interrupt(gxio_gpio_context_t * context,
+				uint64_t *asserted, uint64_t *deasserted)
+{
+	if (asserted)
+		*asserted =
+			__gxio_mmio_read(context->mmio_base +
+					 GPIO_INT_VEC0_W1TC);
+	if (deasserted)
+		*deasserted =
+			__gxio_mmio_read(context->mmio_base +
+					 GPIO_INT_VEC1_W1TC);
+}
+
+EXPORT_SYMBOL_GPL(gxio_gpio_report_interrupt);
+
+void gxio_gpio_report_reset_interrupt(gxio_gpio_context_t * context,
+				      uint64_t *asserted, uint64_t *deasserted)
+{
+	if (asserted)
+		*asserted =
+			__gxio_mmio_read(context->mmio_base +
+					 GPIO_INT_VEC0_RTC);
+	if (deasserted)
+		*deasserted =
+			__gxio_mmio_read(context->mmio_base +
+					 GPIO_INT_VEC1_RTC);
+}
+
+EXPORT_SYMBOL_GPL(gxio_gpio_report_reset_interrupt);
+
+void gxio_gpio_reset_interrupt(gxio_gpio_context_t * context,
+			       uint64_t en_assert, uint64_t en_deassert)
+{
+	if (en_assert)
+		__gxio_mmio_write(context->mmio_base + GPIO_INT_VEC0_W1TC,
+				  en_assert);
+	if (en_deassert)
+		__gxio_mmio_write(context->mmio_base + GPIO_INT_VEC1_W1TC,
+				  en_deassert);
+}
+
+EXPORT_SYMBOL_GPL(gxio_gpio_reset_interrupt);
+
+uint64_t gxio_gpio_pins_get_mask(gxio_gpio_context_t * context, char *name)
+{
+	//
+	// The theory is that these definitions come from the firmware, so that
+	// an application or a Linux driver could be written to use some
+	// particular set of named signals, and be able to function on many
+	// different boards.  We might want to make this more elaborate, and
+	// return suggested settings to be used with the pins; for instance,
+	// whether the input or output state should be inverted.
+	//
+	// FIXME: not yet implemented.
+	//
+	return 0;
+}
+
+EXPORT_SYMBOL_GPL(gxio_gpio_pins_get_mask);
+
diff -Naur linux-4.10.1-orig/arch/tile/gxio/iorpc_gpio.c linux-4.10.1/arch/tile/gxio/iorpc_gpio.c
--- linux-4.10.1-orig/arch/tile/gxio/iorpc_gpio.c	1969-12-31 19:00:00.000000000 -0500
+++ linux-4.10.1/arch/tile/gxio/iorpc_gpio.c	2017-09-22 10:31:25.000000000 -0400
@@ -0,0 +1,295 @@
+/*
+ * Copyright 2013 Tilera Corporation. All Rights Reserved.
+ *
+ *   This program is free software; you can redistribute it and/or
+ *   modify it under the terms of the GNU General Public License
+ *   as published by the Free Software Foundation, version 2.
+ *
+ *   This program is distributed in the hope that it will be useful, but
+ *   WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, GOOD TITLE or
+ *   NON INFRINGEMENT.  See the GNU General Public License for
+ *   more details.
+ */
+
+/* This file is machine-generated; DO NOT EDIT! */
+#include "gxio/iorpc_gpio.h"
+
+struct attach_param {
+	uint64_t pin_mask;
+};
+
+int gxio_gpio_attach(gxio_gpio_context_t * context, uint64_t pin_mask)
+{
+	struct attach_param temp;
+	struct attach_param *params = &temp;
+
+	params->pin_mask = pin_mask;
+
+	return hv_dev_pwrite(context->fd, 0, (HV_VirtAddr) params,
+			     sizeof(*params), GXIO_GPIO_OP_ATTACH);
+}
+
+EXPORT_SYMBOL(gxio_gpio_attach);
+
+struct get_dir_param {
+	uint64_t disabled_pins;
+	uint64_t input_pins;
+	uint64_t output_pins;
+	uint64_t output_od_pins;
+};
+
+int gxio_gpio_get_dir(gxio_gpio_context_t * context, uint64_t *disabled_pins,
+		      uint64_t *input_pins, uint64_t *output_pins,
+		      uint64_t *output_od_pins)
+{
+	int __result;
+	struct get_dir_param temp;
+	struct get_dir_param *params = &temp;
+
+	__result =
+	    hv_dev_pread(context->fd, 0, (HV_VirtAddr) params, sizeof(*params),
+			 GXIO_GPIO_OP_GET_DIR);
+	*disabled_pins = params->disabled_pins;
+	*input_pins = params->input_pins;
+	*output_pins = params->output_pins;
+	*output_od_pins = params->output_od_pins;
+
+	return __result;
+}
+
+EXPORT_SYMBOL(gxio_gpio_get_dir);
+
+struct set_dir_param {
+	uint64_t disabled_pins;
+	uint64_t input_pins;
+	uint64_t output_pins;
+	uint64_t output_od_pins;
+};
+
+int gxio_gpio_set_dir(gxio_gpio_context_t * context, uint64_t disabled_pins,
+		      uint64_t input_pins, uint64_t output_pins,
+		      uint64_t output_od_pins)
+{
+	uint64_t i_reg = __gxio_mmio_read(context->mmio_base + GPIO_PIN_DIR_I);
+	uint64_t o_reg = __gxio_mmio_read(context->mmio_base + GPIO_PIN_DIR_O);
+
+	i_reg = (i_reg | input_pins | output_od_pins) &
+		~(disabled_pins | output_pins);
+	o_reg = (o_reg | output_pins | output_od_pins) &
+		~(disabled_pins | input_pins);
+
+	__gxio_mmio_write(context->mmio_base + GPIO_PIN_DIR_I, i_reg);
+	__gxio_mmio_write(context->mmio_base + GPIO_PIN_DIR_O, o_reg);
+	__insn_mf();
+
+	return 0;
+}
+
+EXPORT_SYMBOL(gxio_gpio_set_dir);
+
+struct get_elec_param {
+	GPIO_PAD_CONTROL_t pad_ctl;
+};
+
+int gxio_gpio_get_elec(gxio_gpio_context_t * context, unsigned int pin,
+		       GPIO_PAD_CONTROL_t * pad_ctl)
+{
+	int __result;
+	struct get_elec_param temp;
+	struct get_elec_param *params = &temp;
+
+	__result =
+	    hv_dev_pread(context->fd, 0, (HV_VirtAddr) params, sizeof(*params),
+			 (((uint64_t)pin << 32) | GXIO_GPIO_OP_GET_ELEC));
+	*pad_ctl = params->pad_ctl;
+
+	return __result;
+}
+
+EXPORT_SYMBOL(gxio_gpio_get_elec);
+
+struct set_elec_param {
+	GPIO_PAD_CONTROL_t pad_ctl;
+};
+
+int gxio_gpio_set_elec(gxio_gpio_context_t * context, unsigned int pin,
+		       GPIO_PAD_CONTROL_t pad_ctl)
+{
+	struct set_elec_param temp;
+	struct set_elec_param *params = &temp;
+
+	params->pad_ctl = pad_ctl;
+
+	return hv_dev_pwrite(context->fd, 0, (HV_VirtAddr) params,
+			     sizeof(*params),
+			     (((uint64_t)pin << 32) | GXIO_GPIO_OP_SET_ELEC));
+}
+
+EXPORT_SYMBOL(gxio_gpio_set_elec);
+
+struct get_gclk_mode_param {
+	GPIO_GCLK_MODE_t gclk_mode;
+};
+
+int gxio_gpio_get_gclk_mode(gxio_gpio_context_t * context,
+			    GPIO_GCLK_MODE_t * gclk_mode)
+{
+	int __result;
+	struct get_gclk_mode_param temp;
+	struct get_gclk_mode_param *params = &temp;
+
+	__result =
+	    hv_dev_pread(context->fd, 0, (HV_VirtAddr) params, sizeof(*params),
+			 GXIO_GPIO_OP_GET_GCLK_MODE);
+	*gclk_mode = params->gclk_mode;
+
+	return __result;
+}
+
+EXPORT_SYMBOL(gxio_gpio_get_gclk_mode);
+
+struct set_gclk_mode_param {
+	GPIO_GCLK_MODE_t gclk_mode;
+};
+
+int gxio_gpio_set_gclk_mode(gxio_gpio_context_t * context,
+			    GPIO_GCLK_MODE_t gclk_mode)
+{
+	struct set_gclk_mode_param temp;
+	struct set_gclk_mode_param *params = &temp;
+
+	params->gclk_mode = gclk_mode;
+
+	return hv_dev_pwrite(context->fd, 0, (HV_VirtAddr) params,
+			     sizeof(*params), GXIO_GPIO_OP_SET_GCLK_MODE);
+}
+
+EXPORT_SYMBOL(gxio_gpio_set_gclk_mode);
+
+struct cfg_interrupt_param {
+	union iorpc_interrupt interrupt;
+	uint64_t on_assert;
+	uint64_t on_deassert;
+};
+
+int gxio_gpio_cfg_interrupt(gxio_gpio_context_t * context, int inter_x,
+			    int inter_y, int inter_ipi, int inter_event,
+			    uint64_t on_assert, uint64_t on_deassert)
+{
+	struct cfg_interrupt_param temp;
+	struct cfg_interrupt_param *params = &temp;
+
+	params->interrupt.kernel.x = inter_x;
+	params->interrupt.kernel.y = inter_y;
+	params->interrupt.kernel.ipi = inter_ipi;
+	params->interrupt.kernel.event = inter_event;
+	params->on_assert = on_assert;
+	params->on_deassert = on_deassert;
+
+	return hv_dev_pwrite(context->fd, 0, (HV_VirtAddr) params,
+			     sizeof(*params), GXIO_GPIO_OP_CFG_INTERRUPT);
+}
+
+EXPORT_SYMBOL(gxio_gpio_cfg_interrupt);
+
+struct cfg_pollfd_param {
+	union iorpc_pollfd_setup pollfd_setup;
+	uint64_t on_assert;
+	uint64_t on_deassert;
+};
+
+int gxio_gpio_cfg_pollfd(gxio_gpio_context_t * context, int inter_x,
+			 int inter_y, int inter_ipi, int inter_event,
+			 uint64_t on_assert, uint64_t on_deassert)
+{
+	struct cfg_pollfd_param temp;
+	struct cfg_pollfd_param *params = &temp;
+
+	params->pollfd_setup.kernel.x = inter_x;
+	params->pollfd_setup.kernel.y = inter_y;
+	params->pollfd_setup.kernel.ipi = inter_ipi;
+	params->pollfd_setup.kernel.event = inter_event;
+	params->on_assert = on_assert;
+	params->on_deassert = on_deassert;
+
+	return hv_dev_pwrite(context->fd, 0, (HV_VirtAddr) params,
+			     sizeof(*params), GXIO_GPIO_OP_CFG_POLLFD);
+}
+
+EXPORT_SYMBOL(gxio_gpio_cfg_pollfd);
+
+struct arm_pollfd_param {
+	union iorpc_pollfd pollfd;
+};
+
+int gxio_gpio_arm_pollfd(gxio_gpio_context_t * context, int pollfd_cookie)
+{
+	struct arm_pollfd_param temp;
+	struct arm_pollfd_param *params = &temp;
+
+	params->pollfd.kernel.cookie = pollfd_cookie;
+
+	return hv_dev_pwrite(context->fd, 0, (HV_VirtAddr) params,
+			     sizeof(*params), GXIO_GPIO_OP_ARM_POLLFD);
+}
+
+EXPORT_SYMBOL(gxio_gpio_arm_pollfd);
+
+struct close_pollfd_param {
+	union iorpc_pollfd pollfd;
+};
+
+int gxio_gpio_close_pollfd(gxio_gpio_context_t * context, int pollfd_cookie)
+{
+	struct close_pollfd_param temp;
+	struct close_pollfd_param *params = &temp;
+
+	params->pollfd.kernel.cookie = pollfd_cookie;
+
+	return hv_dev_pwrite(context->fd, 0, (HV_VirtAddr) params,
+			     sizeof(*params), GXIO_GPIO_OP_CLOSE_POLLFD);
+}
+
+EXPORT_SYMBOL(gxio_gpio_close_pollfd);
+
+struct get_mmio_base_param {
+	HV_PTE base;
+};
+
+int gxio_gpio_get_mmio_base(gxio_gpio_context_t * context, HV_PTE *base)
+{
+	int __result;
+	struct get_mmio_base_param temp;
+	struct get_mmio_base_param *params = &temp;
+
+	__result =
+	    hv_dev_pread(context->fd, 0, (HV_VirtAddr) params, sizeof(*params),
+			 GXIO_GPIO_OP_GET_MMIO_BASE);
+	*base = params->base;
+
+	return __result;
+}
+
+EXPORT_SYMBOL(gxio_gpio_get_mmio_base);
+
+struct check_mmio_offset_param {
+	unsigned long offset;
+	unsigned long size;
+};
+
+int gxio_gpio_check_mmio_offset(gxio_gpio_context_t * context,
+				unsigned long offset, unsigned long size)
+{
+	struct check_mmio_offset_param temp;
+	struct check_mmio_offset_param *params = &temp;
+
+	params->offset = offset;
+	params->size = size;
+
+	return hv_dev_pwrite(context->fd, 0, (HV_VirtAddr) params,
+			     sizeof(*params), GXIO_GPIO_OP_CHECK_MMIO_OFFSET);
+}
+
+EXPORT_SYMBOL(gxio_gpio_check_mmio_offset);
+
diff -Naur linux-4.10.1-orig/arch/tile/gxio/iorpc_mpipe.c linux-4.10.1/arch/tile/gxio/iorpc_mpipe.c
--- linux-4.10.1-orig/arch/tile/gxio/iorpc_mpipe.c	2017-02-26 05:09:33.000000000 -0500
+++ linux-4.10.1/arch/tile/gxio/iorpc_mpipe.c	2017-09-22 10:31:25.000000000 -0400
@@ -409,6 +409,122 @@
 
 EXPORT_SYMBOL(gxio_mpipe_link_set_attr_aux);
 
+struct link_get_attr_aux_param {
+        int64_t data;
+};
+
+int gxio_mpipe_link_get_attr_aux(gxio_mpipe_context_t *context,
+                                 unsigned int off, int64_t *data)
+{
+        int __result;
+        struct link_get_attr_aux_param temp;
+        struct link_get_attr_aux_param *params = &temp;
+
+        __result =
+            hv_dev_pread(context->fd, 0, (HV_VirtAddr) params, sizeof(*params),
+                         (((uint64_t)off << 32) |
+                          GXIO_MPIPE_OP_LINK_GET_ATTR_AUX));
+        *data = params->data;
+
+        return __result;
+}
+
+EXPORT_SYMBOL(gxio_mpipe_link_get_attr_aux);
+
+struct link_mdio_rd_aux_param {
+        int mac;
+        int phy;
+        int dev;
+        int addr;
+};
+
+int gxio_mpipe_link_mdio_rd_aux(gxio_mpipe_context_t *context, int mac, int phy,
+                                int dev, int addr)
+{
+        struct link_mdio_rd_aux_param temp;
+        struct link_mdio_rd_aux_param *params = &temp;
+
+        params->mac = mac;
+        params->phy = phy;
+        params->dev = dev;
+        params->addr = addr;
+
+        return hv_dev_pwrite(context->fd, 0, (HV_VirtAddr) params,
+                             sizeof(*params), GXIO_MPIPE_OP_LINK_MDIO_RD_AUX);
+}
+
+EXPORT_SYMBOL(gxio_mpipe_link_mdio_rd_aux);
+
+struct link_mdio_wr_aux_param {
+        int mac;
+        int phy;
+        int dev;
+        int addr;
+        uint16_t val;
+};
+
+int gxio_mpipe_link_mdio_wr_aux(gxio_mpipe_context_t *context, int mac, int phy,
+                                int dev, int addr, uint16_t val)
+{
+        struct link_mdio_wr_aux_param temp;
+        struct link_mdio_wr_aux_param *params = &temp;
+
+        params->mac = mac;
+        params->phy = phy;
+        params->dev = dev;
+        params->addr = addr;
+        params->val = val;
+
+        return hv_dev_pwrite(context->fd, 0, (HV_VirtAddr) params,
+                             sizeof(*params), GXIO_MPIPE_OP_LINK_MDIO_WR_AUX);
+}
+
+EXPORT_SYMBOL(gxio_mpipe_link_mdio_wr_aux);
+
+struct link_mac_rd_aux_param {
+        int64_t data;
+};
+
+int gxio_mpipe_link_mac_rd_aux(gxio_mpipe_context_t *context, unsigned int off,
+                               int64_t *data)
+{
+        int __result;
+        struct link_mac_rd_aux_param temp;
+        struct link_mac_rd_aux_param *params = &temp;
+
+        __result =
+            hv_dev_pread(context->fd, 0, (HV_VirtAddr) params, sizeof(*params),
+                         (((uint64_t)off << 32) |
+                          GXIO_MPIPE_OP_LINK_MAC_RD_AUX));
+        *data = params->data;
+
+        return __result;
+}
+
+EXPORT_SYMBOL(gxio_mpipe_link_mac_rd_aux);
+
+struct link_mac_wr_aux_param {
+        int mac;
+        int addr;
+        uint32_t val;
+};
+
+int gxio_mpipe_link_mac_wr_aux(gxio_mpipe_context_t *context, int mac, int addr,
+                               uint32_t val)
+{
+        struct link_mac_wr_aux_param temp;
+        struct link_mac_wr_aux_param *params = &temp;
+
+        params->mac = mac;
+        params->addr = addr;
+        params->val = val;
+
+        return hv_dev_pwrite(context->fd, 0, (HV_VirtAddr) params,
+                             sizeof(*params), GXIO_MPIPE_OP_LINK_MAC_WR_AUX);
+}
+
+EXPORT_SYMBOL(gxio_mpipe_link_mac_wr_aux);
+
 struct get_timestamp_aux_param {
 	uint64_t sec;
 	uint64_t nsec;
@@ -591,3 +707,5 @@
 }
 
 EXPORT_SYMBOL(gxio_mpipe_check_mmio_offset);
+
+
diff -Naur linux-4.10.1-orig/arch/tile/gxio/Kconfig linux-4.10.1/arch/tile/gxio/Kconfig
--- linux-4.10.1-orig/arch/tile/gxio/Kconfig	2017-02-26 05:09:33.000000000 -0500
+++ linux-4.10.1/arch/tile/gxio/Kconfig	2017-09-22 10:31:25.000000000 -0400
@@ -16,6 +16,15 @@
 	select TILE_GXIO
 	select TILE_GXIO_DMA
 
+config TILE_GXIO_GPIO
+        bool "Tilera Gx GPIO I/O support"
+        default y
+        depends on TILE_GXIO
+        ---help---
+          This option supports direct access to the TILE-Gx GPIO hardware
+          from kernel space.  It is not required in order to use the gxio
+          library to access GPIO pins from user space.
+
 # Support direct access to the TILE-Gx TRIO hardware from kernel space.
 config TILE_GXIO_TRIO
 	bool
diff -Naur linux-4.10.1-orig/arch/tile/gxio/Makefile linux-4.10.1/arch/tile/gxio/Makefile
--- linux-4.10.1-orig/arch/tile/gxio/Makefile	2017-02-26 05:09:33.000000000 -0500
+++ linux-4.10.1/arch/tile/gxio/Makefile	2017-09-22 10:31:25.000000000 -0400
@@ -5,6 +5,7 @@
 obj-$(CONFIG_TILE_GXIO) += iorpc_globals.o kiorpc.o
 obj-$(CONFIG_TILE_GXIO_DMA) += dma_queue.o
 obj-$(CONFIG_TILE_GXIO_MPIPE) += mpipe.o iorpc_mpipe.o iorpc_mpipe_info.o
+obj-$(CONFIG_TILE_GXIO_GPIO) += gpio.o iorpc_gpio.o
 obj-$(CONFIG_TILE_GXIO_TRIO) += trio.o iorpc_trio.o
-obj-$(CONFIG_TILE_GXIO_UART) += uart.o iorpc_uart.o
 obj-$(CONFIG_TILE_GXIO_USB_HOST) += usb_host.o iorpc_usb_host.o
+obj-$(CONFIG_TILE_GXIO_UART) += uart.o iorpc_uart.o
diff -Naur linux-4.10.1-orig/arch/tile/gxio/mpipe.c linux-4.10.1/arch/tile/gxio/mpipe.c
--- linux-4.10.1-orig/arch/tile/gxio/mpipe.c	2017-02-26 05:09:33.000000000 -0500
+++ linux-4.10.1/arch/tile/gxio/mpipe.c	2017-09-22 10:31:25.000000000 -0400
@@ -580,5 +580,29 @@
 	return gxio_mpipe_link_set_attr_aux(link->context, link->mac, attr,
 					    val);
 }
-
 EXPORT_SYMBOL_GPL(gxio_mpipe_link_set_attr);
+
+int gxio_mpipe_link_mdio_rd(gxio_mpipe_link_t *link, int phy, int dev, int addr)
+{
+	return gxio_mpipe_link_mdio_rd_aux(link->context, link->mac, phy, dev, addr);
+}
+EXPORT_SYMBOL_GPL(gxio_mpipe_link_mdio_rd);
+
+int gxio_mpipe_link_mdio_wr(gxio_mpipe_link_t *link, int phy, int dev, int addr, uint16_t val)
+{
+	return gxio_mpipe_link_mdio_wr_aux(link->context, link->mac, phy, dev, addr, val);
+}
+EXPORT_SYMBOL_GPL(gxio_mpipe_link_mdio_wr);
+
+int gxio_mpipe_link_mac_rd(gxio_mpipe_link_t *link, int addr, int64_t *data)
+{
+	uint32_t real_off = link->mac << 24 | (addr & 0xFFFFFF);
+	return gxio_mpipe_link_mac_rd_aux(link->context, real_off, data);
+}
+EXPORT_SYMBOL_GPL(gxio_mpipe_link_mac_rd);
+
+int gxio_mpipe_link_mac_wr(gxio_mpipe_link_t *link, int addr, uint32_t val)
+{
+	return gxio_mpipe_link_mac_wr_aux(link->context, link->mac, addr, val);
+}
+EXPORT_SYMBOL(gxio_mpipe_link_mac_wr);
diff -Naur linux-4.10.1-orig/arch/tile/include/arch/gpio_def.h linux-4.10.1/arch/tile/include/arch/gpio_def.h
--- linux-4.10.1-orig/arch/tile/include/arch/gpio_def.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-4.10.1/arch/tile/include/arch/gpio_def.h	2017-09-22 10:31:26.000000000 -0400
@@ -0,0 +1,3248 @@
+/*
+ * Copyright 2011 Tilera Corporation. All Rights Reserved.
+ *
+ *   This program is free software; you can redistribute it and/or
+ *   modify it under the terms of the GNU General Public License
+ *   as published by the Free Software Foundation, version 2.
+ *
+ *   This program is distributed in the hope that it will be useful, but
+ *   WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, GOOD TITLE or
+ *   NON INFRINGEMENT.  See the GNU General Public License for
+ *   more details.
+ */
+
+#ifndef __DOXYGEN__
+
+#ifndef __ARCH_GPIO_DEF_H__
+#define __ARCH_GPIO_DEF_H__
+
+#ifdef __ASSEMBLER__
+#define _64bit(x) x
+#else /* __ASSEMBLER__ */
+#ifdef __tile__
+#define _64bit(x) x ## UL
+#else /* __tile__ */
+#define _64bit(x) x ## ULL
+#endif /* __tile__ */
+#endif /* __ASSEMBLER */
+
+
+
+// MMIO Address Space.
+// The MMIO physical address space for the USB is described below.  This is a
+// general description of the MMIO space as opposed to a register description
+#define GPIO_MMIO_ADDRESS_SPACE__FIRST_WORD 0x0000
+#define GPIO_MMIO_ADDRESS_SPACE__LAST_WORD 0xfffffffff8
+
+#define GPIO_MMIO_ADDRESS_SPACE__OFFSET_SHIFT 0
+#define GPIO_MMIO_ADDRESS_SPACE__OFFSET_WIDTH 16
+#define GPIO_MMIO_ADDRESS_SPACE__OFFSET_RMASK 0xffff
+#define GPIO_MMIO_ADDRESS_SPACE__OFFSET_MASK  0xffff
+#define GPIO_MMIO_ADDRESS_SPACE__OFFSET_FIELD 0,15
+
+#define GPIO_MMIO_ADDRESS_SPACE__SVC_DOM_SHIFT 37
+#define GPIO_MMIO_ADDRESS_SPACE__SVC_DOM_WIDTH 3
+#define GPIO_MMIO_ADDRESS_SPACE__SVC_DOM_RMASK 0x7
+#define GPIO_MMIO_ADDRESS_SPACE__SVC_DOM_MASK  _64bit(0xe000000000)
+#define GPIO_MMIO_ADDRESS_SPACE__SVC_DOM_FIELD 37,39
+
+
+// Clock Count.
+#define GPIO_CLOCK_COUNT 0x0038
+
+#define GPIO_CLOCK_COUNT__RUN_SHIFT 0
+#define GPIO_CLOCK_COUNT__RUN_WIDTH 1
+#define GPIO_CLOCK_COUNT__RUN_RMASK 0x1
+#define GPIO_CLOCK_COUNT__RUN_MASK  0x1
+#define GPIO_CLOCK_COUNT__RUN_FIELD 0,0
+
+#define GPIO_CLOCK_COUNT__COUNT_SHIFT 1
+#define GPIO_CLOCK_COUNT__COUNT_WIDTH 15
+#define GPIO_CLOCK_COUNT__COUNT_RMASK 0x7fff
+#define GPIO_CLOCK_COUNT__COUNT_MASK  0xfffe
+#define GPIO_CLOCK_COUNT__COUNT_FIELD 1,15
+
+
+// Device Control.
+// This register provides general device control.
+#define GPIO_DEV_CTL 0x0008
+
+#define GPIO_DEV_CTL__RDN_ROUTE_ORDER_SHIFT 2
+#define GPIO_DEV_CTL__RDN_ROUTE_ORDER_WIDTH 1
+#define GPIO_DEV_CTL__RDN_ROUTE_ORDER_RMASK 0x1
+#define GPIO_DEV_CTL__RDN_ROUTE_ORDER_MASK  0x4
+#define GPIO_DEV_CTL__RDN_ROUTE_ORDER_FIELD 2,2
+
+#define GPIO_DEV_CTL__SDN_ROUTE_ORDER_SHIFT 3
+#define GPIO_DEV_CTL__SDN_ROUTE_ORDER_WIDTH 1
+#define GPIO_DEV_CTL__SDN_ROUTE_ORDER_RMASK 0x1
+#define GPIO_DEV_CTL__SDN_ROUTE_ORDER_MASK  0x8
+#define GPIO_DEV_CTL__SDN_ROUTE_ORDER_FIELD 3,3
+
+
+// Device Info.
+// This register provides general information about the device attached to
+// this port and channel.
+#define GPIO_DEV_INFO 0x0000
+
+#define GPIO_DEV_INFO__TYPE_SHIFT 0
+#define GPIO_DEV_INFO__TYPE_WIDTH 12
+#define GPIO_DEV_INFO__TYPE_RMASK 0xfff
+#define GPIO_DEV_INFO__TYPE_MASK  0xfff
+#define GPIO_DEV_INFO__TYPE_FIELD 0,11
+#define GPIO_DEV_INFO__TYPE_VAL_PCIE 0x1
+#define GPIO_DEV_INFO__TYPE_VAL_GBE 0x10
+#define GPIO_DEV_INFO__TYPE_VAL_XGBE 0x11
+#define GPIO_DEV_INFO__TYPE_VAL_MPIPE 0x13
+#define GPIO_DEV_INFO__TYPE_VAL_TRIO 0x14
+#define GPIO_DEV_INFO__TYPE_VAL_CRYPTO 0x16
+#define GPIO_DEV_INFO__TYPE_VAL_COMPRESSION 0x18
+#define GPIO_DEV_INFO__TYPE_VAL_GPIO 0x20
+#define GPIO_DEV_INFO__TYPE_VAL_RSHIM 0x21
+#define GPIO_DEV_INFO__TYPE_VAL_SROM 0x22
+#define GPIO_DEV_INFO__TYPE_VAL_I2CM 0x25
+#define GPIO_DEV_INFO__TYPE_VAL_I2CS 0x26
+#define GPIO_DEV_INFO__TYPE_VAL_UART 0x28
+#define GPIO_DEV_INFO__TYPE_VAL_USBH 0x29
+#define GPIO_DEV_INFO__TYPE_VAL_USBS 0x2a
+#define GPIO_DEV_INFO__TYPE_VAL_USBHS 0x2b
+#define GPIO_DEV_INFO__TYPE_VAL_DDR2 0x40
+#define GPIO_DEV_INFO__TYPE_VAL_DDR3 0x42
+#define GPIO_DEV_INFO__TYPE_VAL_DIAG_SNP 0x80
+#define GPIO_DEV_INFO__TYPE_VAL_IPIC 0x81
+
+#define GPIO_DEV_INFO__DEVICE_REV_SHIFT 16
+#define GPIO_DEV_INFO__DEVICE_REV_WIDTH 8
+#define GPIO_DEV_INFO__DEVICE_REV_RMASK 0xff
+#define GPIO_DEV_INFO__DEVICE_REV_MASK  0xff0000
+#define GPIO_DEV_INFO__DEVICE_REV_FIELD 16,23
+
+#define GPIO_DEV_INFO__REGISTER_REV_SHIFT 24
+#define GPIO_DEV_INFO__REGISTER_REV_WIDTH 4
+#define GPIO_DEV_INFO__REGISTER_REV_RMASK 0xf
+#define GPIO_DEV_INFO__REGISTER_REV_MASK  0xf000000
+#define GPIO_DEV_INFO__REGISTER_REV_FIELD 24,27
+
+#define GPIO_DEV_INFO__INSTANCE_SHIFT 32
+#define GPIO_DEV_INFO__INSTANCE_WIDTH 4
+#define GPIO_DEV_INFO__INSTANCE_RMASK 0xf
+#define GPIO_DEV_INFO__INSTANCE_MASK  _64bit(0xf00000000)
+#define GPIO_DEV_INFO__INSTANCE_FIELD 32,35
+
+
+// GPIO Clock Mode.
+#define GPIO_GCLK_MODE 0x0100
+
+#define GPIO_GCLK_MODE__CMODE_SHIFT 0
+#define GPIO_GCLK_MODE__CMODE_WIDTH 1
+#define GPIO_GCLK_MODE__CMODE_RMASK 0x1
+#define GPIO_GCLK_MODE__CMODE_MASK  0x1
+#define GPIO_GCLK_MODE__CMODE_FIELD 0,0
+#define GPIO_GCLK_MODE__CMODE_VAL_REF_CLOCK 0x0
+#define GPIO_GCLK_MODE__CMODE_VAL_HALF_CORE_CLOCK_FREQ 0x1
+
+#define GPIO_GCLK_MODE__TRANS_PEND_SHIFT 8
+#define GPIO_GCLK_MODE__TRANS_PEND_WIDTH 1
+#define GPIO_GCLK_MODE__TRANS_PEND_RMASK 0x1
+#define GPIO_GCLK_MODE__TRANS_PEND_MASK  0x100
+#define GPIO_GCLK_MODE__TRANS_PEND_FIELD 8,8
+
+#define GPIO_GCLK_MODE__DIVIDE_SHIFT 12
+#define GPIO_GCLK_MODE__DIVIDE_WIDTH 20
+#define GPIO_GCLK_MODE__DIVIDE_RMASK 0xfffff
+#define GPIO_GCLK_MODE__DIVIDE_MASK  0xfffff000
+#define GPIO_GCLK_MODE__DIVIDE_FIELD 12,31
+
+
+// Bindings for interrupt vectors.
+// This register provides read/write access to all of the interrupt bindings
+// for the GPIO controller.  The VEC_SEL field is used to select the vector
+// being configured and the BIND_SEL selects the interrupt within the vector.
+#define GPIO_INT_BIND 0x3100
+
+#define GPIO_INT_BIND__ENABLE_SHIFT 0
+#define GPIO_INT_BIND__ENABLE_WIDTH 1
+#define GPIO_INT_BIND__ENABLE_RMASK 0x1
+#define GPIO_INT_BIND__ENABLE_MASK  0x1
+#define GPIO_INT_BIND__ENABLE_FIELD 0,0
+
+#define GPIO_INT_BIND__MODE_SHIFT 1
+#define GPIO_INT_BIND__MODE_WIDTH 1
+#define GPIO_INT_BIND__MODE_RMASK 0x1
+#define GPIO_INT_BIND__MODE_MASK  0x2
+#define GPIO_INT_BIND__MODE_FIELD 1,1
+
+#define GPIO_INT_BIND__TILEID_SHIFT 2
+#define GPIO_INT_BIND__TILEID_WIDTH 8
+#define GPIO_INT_BIND__TILEID_RMASK 0xff
+#define GPIO_INT_BIND__TILEID_MASK  0x3fc
+#define GPIO_INT_BIND__TILEID_FIELD 2,9
+
+#define GPIO_INT_BIND__INT_NUM_SHIFT 10
+#define GPIO_INT_BIND__INT_NUM_WIDTH 2
+#define GPIO_INT_BIND__INT_NUM_RMASK 0x3
+#define GPIO_INT_BIND__INT_NUM_MASK  0xc00
+#define GPIO_INT_BIND__INT_NUM_FIELD 10,11
+
+#define GPIO_INT_BIND__EVT_NUM_SHIFT 12
+#define GPIO_INT_BIND__EVT_NUM_WIDTH 5
+#define GPIO_INT_BIND__EVT_NUM_RMASK 0x1f
+#define GPIO_INT_BIND__EVT_NUM_MASK  0x1f000
+#define GPIO_INT_BIND__EVT_NUM_FIELD 12,16
+
+#define GPIO_INT_BIND__VEC_SEL_SHIFT 32
+#define GPIO_INT_BIND__VEC_SEL_WIDTH 1
+#define GPIO_INT_BIND__VEC_SEL_RMASK 0x1
+#define GPIO_INT_BIND__VEC_SEL_MASK  _64bit(0x100000000)
+#define GPIO_INT_BIND__VEC_SEL_FIELD 32,32
+#define GPIO_INT_BIND__VEC_SEL_VAL_PIN_ASSERTION_INTS 0x0
+#define GPIO_INT_BIND__VEC_SEL_VAL_PIN_DEASSERTION_INTS 0x1
+
+#define GPIO_INT_BIND__BIND_SEL_SHIFT 40
+#define GPIO_INT_BIND__BIND_SEL_WIDTH 6
+#define GPIO_INT_BIND__BIND_SEL_RMASK 0x3f
+#define GPIO_INT_BIND__BIND_SEL_MASK  _64bit(0x3f0000000000)
+#define GPIO_INT_BIND__BIND_SEL_FIELD 40,45
+
+#define GPIO_INT_BIND__NW_SHIFT 48
+#define GPIO_INT_BIND__NW_WIDTH 1
+#define GPIO_INT_BIND__NW_RMASK 0x1
+#define GPIO_INT_BIND__NW_MASK  _64bit(0x1000000000000)
+#define GPIO_INT_BIND__NW_FIELD 48,48
+
+
+// Interrupt vector-0, read-to-clear.
+// Interrupt status vector with read-to-clear functionality.  Provides access
+// to the same status bits that are visible in INT_VEC0_W1TC.  This vector
+// contains the interrupts associated with the 64 pin assertion interrupts.
+// Reading this register clears all of the associated interrupts. Accesses to
+// this register are masked by the SVC_DOM PIN ENABLE field. If the PIN
+// ENABLE bit is 0, the read bit will be zero and the interrupt status will
+// not be modified.
+#define GPIO_INT_VEC0_RTC 0x3008
+
+#define GPIO_INT_VEC0_RTC__INT_VEC0_RTC_SHIFT 0
+#define GPIO_INT_VEC0_RTC__INT_VEC0_RTC_WIDTH 64
+#define GPIO_INT_VEC0_RTC__INT_VEC0_RTC_RMASK _64bit(0xffffffffffffffff)
+#define GPIO_INT_VEC0_RTC__INT_VEC0_RTC_MASK  _64bit(0xffffffffffffffff)
+#define GPIO_INT_VEC0_RTC__INT_VEC0_RTC_FIELD 0,63
+
+
+// Interrupt vector-0, write-one-to-clear.
+// Interrupt status vector with write-one-to-clear functionality.  Provides
+// access to the same status bits that are visible in INT_VEC0_RTC.  This
+// vector contains the interrupts associated with the 64 pin assertion
+// interrupts.  Writing a 1 clears the status bit. Accesses to this register
+// are masked by the SVC_DOM PIN ENABLE field. If the PIN ENABLE bit is 0,
+// the read bit will be zero and the written bit will be ignored.
+#define GPIO_INT_VEC0_W1TC 0x3000
+
+#define GPIO_INT_VEC0_W1TC__INT_VEC0_W1TC_SHIFT 0
+#define GPIO_INT_VEC0_W1TC__INT_VEC0_W1TC_WIDTH 64
+#define GPIO_INT_VEC0_W1TC__INT_VEC0_W1TC_RMASK _64bit(0xffffffffffffffff)
+#define GPIO_INT_VEC0_W1TC__INT_VEC0_W1TC_MASK  _64bit(0xffffffffffffffff)
+#define GPIO_INT_VEC0_W1TC__INT_VEC0_W1TC_FIELD 0,63
+
+
+// Interrupt vector-1, read-to-clear.
+// Interrupt status vector with read-to-clear functionality.  Provides access
+// to the same status bits that are visible in INT_VEC1_W1TC.  This vector
+// contains the interrupts associated with the 64 pin deassertion interrupts.
+//  Reading this register clears all of the associated interrupts. Accesses
+// to this register are masked by the SVC_DOM PIN ENABLE field. If the PIN
+// ENABLE bit is 0, the read bit will be zero and the interrupt status will
+// not be modified.
+#define GPIO_INT_VEC1_RTC 0x3018
+
+#define GPIO_INT_VEC1_RTC__INT_VEC1_RTC_SHIFT 0
+#define GPIO_INT_VEC1_RTC__INT_VEC1_RTC_WIDTH 64
+#define GPIO_INT_VEC1_RTC__INT_VEC1_RTC_RMASK _64bit(0xffffffffffffffff)
+#define GPIO_INT_VEC1_RTC__INT_VEC1_RTC_MASK  _64bit(0xffffffffffffffff)
+#define GPIO_INT_VEC1_RTC__INT_VEC1_RTC_FIELD 0,63
+
+
+// Interrupt vector-1, write-one-to-clear.
+// Interrupt status vector with write-one-to-clear functionality.  Provides
+// access to the same status bits that are visible in INT_VEC1_RTC.  This
+// vector contains the interrupts associated with the 64 pin deassertion
+// interrupts.  Writing a 1 clears the status bit. Accesses to this register
+// are masked by the SVC_DOM PIN ENABLE field. If the PIN ENABLE bit is 0,
+// the read bit will be zero and the written bit will be ignored.
+#define GPIO_INT_VEC1_W1TC 0x3010
+
+#define GPIO_INT_VEC1_W1TC__INT_VEC1_W1TC_SHIFT 0
+#define GPIO_INT_VEC1_W1TC__INT_VEC1_W1TC_WIDTH 64
+#define GPIO_INT_VEC1_W1TC__INT_VEC1_W1TC_RMASK _64bit(0xffffffffffffffff)
+#define GPIO_INT_VEC1_W1TC__INT_VEC1_W1TC_MASK  _64bit(0xffffffffffffffff)
+#define GPIO_INT_VEC1_W1TC__INT_VEC1_W1TC_FIELD 0,63
+
+
+// Memory Info.
+// This register provides information about memory setup required for this
+// device.
+#define GPIO_MEM_INFO 0x0018
+
+#define GPIO_MEM_INFO__REQ_PORTS_SHIFT 0
+#define GPIO_MEM_INFO__REQ_PORTS_WIDTH 32
+#define GPIO_MEM_INFO__REQ_PORTS_RMASK 0xffffffff
+#define GPIO_MEM_INFO__REQ_PORTS_MASK  0xffffffff
+#define GPIO_MEM_INFO__REQ_PORTS_FIELD 0,31
+
+#define GPIO_MEM_INFO__NUM_HFH_TBL_SHIFT 32
+#define GPIO_MEM_INFO__NUM_HFH_TBL_WIDTH 4
+#define GPIO_MEM_INFO__NUM_HFH_TBL_RMASK 0xf
+#define GPIO_MEM_INFO__NUM_HFH_TBL_MASK  _64bit(0xf00000000)
+#define GPIO_MEM_INFO__NUM_HFH_TBL_FIELD 32,35
+
+#define GPIO_MEM_INFO__NUM_ASIDS_SHIFT 40
+#define GPIO_MEM_INFO__NUM_ASIDS_WIDTH 8
+#define GPIO_MEM_INFO__NUM_ASIDS_RMASK 0xff
+#define GPIO_MEM_INFO__NUM_ASIDS_MASK  _64bit(0xff0000000000)
+#define GPIO_MEM_INFO__NUM_ASIDS_FIELD 40,47
+
+#define GPIO_MEM_INFO__NUM_TLB_ENT_SHIFT 48
+#define GPIO_MEM_INFO__NUM_TLB_ENT_WIDTH 8
+#define GPIO_MEM_INFO__NUM_TLB_ENT_RMASK 0xff
+#define GPIO_MEM_INFO__NUM_TLB_ENT_MASK  _64bit(0xff000000000000)
+#define GPIO_MEM_INFO__NUM_TLB_ENT_FIELD 48,55
+
+
+// MMIO Error Information.
+// Provides diagnostics information when an MMIO error occurs.  Captured
+// whenever the MMIO_ERR interrupt condition occurs
+#define GPIO_MMIO_ERROR_INFO 0x0600
+
+#define GPIO_MMIO_ERROR_INFO__SRC_SHIFT 0
+#define GPIO_MMIO_ERROR_INFO__SRC_WIDTH 8
+#define GPIO_MMIO_ERROR_INFO__SRC_RMASK 0xff
+#define GPIO_MMIO_ERROR_INFO__SRC_MASK  0xff
+#define GPIO_MMIO_ERROR_INFO__SRC_FIELD 0,7
+
+#define GPIO_MMIO_ERROR_INFO__SIZE_SHIFT 8
+#define GPIO_MMIO_ERROR_INFO__SIZE_WIDTH 4
+#define GPIO_MMIO_ERROR_INFO__SIZE_RMASK 0xf
+#define GPIO_MMIO_ERROR_INFO__SIZE_MASK  0xf00
+#define GPIO_MMIO_ERROR_INFO__SIZE_FIELD 8,11
+
+#define GPIO_MMIO_ERROR_INFO__PA_SHIFT 12
+#define GPIO_MMIO_ERROR_INFO__PA_WIDTH 40
+#define GPIO_MMIO_ERROR_INFO__PA_RMASK _64bit(0xffffffffff)
+#define GPIO_MMIO_ERROR_INFO__PA_MASK  _64bit(0xffffffffff000)
+#define GPIO_MMIO_ERROR_INFO__PA_FIELD 12,51
+
+#define GPIO_MMIO_ERROR_INFO__OPC_SHIFT 52
+#define GPIO_MMIO_ERROR_INFO__OPC_WIDTH 5
+#define GPIO_MMIO_ERROR_INFO__OPC_RMASK 0x1f
+#define GPIO_MMIO_ERROR_INFO__OPC_MASK  _64bit(0x1f0000000000000)
+#define GPIO_MMIO_ERROR_INFO__OPC_FIELD 52,56
+
+
+// MMIO Info.
+// This register provides information about how the physical address is
+// interpretted by the IO device.  The PA is divided into
+// {CHANNEL,SVC_DOM,IGNORED,REGION,OFFSET}.  The values in this register
+// define the size of each of these fields.
+#define GPIO_MMIO_INFO 0x0010
+
+#define GPIO_MMIO_INFO__CH_WIDTH_SHIFT 0
+#define GPIO_MMIO_INFO__CH_WIDTH_WIDTH 4
+#define GPIO_MMIO_INFO__CH_WIDTH_RMASK 0xf
+#define GPIO_MMIO_INFO__CH_WIDTH_MASK  0xf
+#define GPIO_MMIO_INFO__CH_WIDTH_FIELD 0,3
+
+#define GPIO_MMIO_INFO__NUM_CH_SHIFT 4
+#define GPIO_MMIO_INFO__NUM_CH_WIDTH 15
+#define GPIO_MMIO_INFO__NUM_CH_RMASK 0x7fff
+#define GPIO_MMIO_INFO__NUM_CH_MASK  0x7fff0
+#define GPIO_MMIO_INFO__NUM_CH_FIELD 4,18
+
+#define GPIO_MMIO_INFO__SVC_DOM_WIDTH_SHIFT 19
+#define GPIO_MMIO_INFO__SVC_DOM_WIDTH_WIDTH 3
+#define GPIO_MMIO_INFO__SVC_DOM_WIDTH_RMASK 0x7
+#define GPIO_MMIO_INFO__SVC_DOM_WIDTH_MASK  0x380000
+#define GPIO_MMIO_INFO__SVC_DOM_WIDTH_FIELD 19,21
+
+#define GPIO_MMIO_INFO__NUM_SVC_DOM_SHIFT 22
+#define GPIO_MMIO_INFO__NUM_SVC_DOM_WIDTH 7
+#define GPIO_MMIO_INFO__NUM_SVC_DOM_RMASK 0x7f
+#define GPIO_MMIO_INFO__NUM_SVC_DOM_MASK  0x1fc00000
+#define GPIO_MMIO_INFO__NUM_SVC_DOM_FIELD 22,28
+
+#define GPIO_MMIO_INFO__OFFSET_WIDTH_SHIFT 29
+#define GPIO_MMIO_INFO__OFFSET_WIDTH_WIDTH 6
+#define GPIO_MMIO_INFO__OFFSET_WIDTH_RMASK 0x3f
+#define GPIO_MMIO_INFO__OFFSET_WIDTH_MASK  _64bit(0x7e0000000)
+#define GPIO_MMIO_INFO__OFFSET_WIDTH_FIELD 29,34
+
+#define GPIO_MMIO_INFO__REGION_WIDTH_SHIFT 35
+#define GPIO_MMIO_INFO__REGION_WIDTH_WIDTH 6
+#define GPIO_MMIO_INFO__REGION_WIDTH_RMASK 0x3f
+#define GPIO_MMIO_INFO__REGION_WIDTH_MASK  _64bit(0x1f800000000)
+#define GPIO_MMIO_INFO__REGION_WIDTH_FIELD 35,40
+
+
+// MMIO Service Domain Configuration.
+// Initialization control for the MMIO service domain table
+#define GPIO_MMIO_INIT_CTL 0x0200
+
+#define GPIO_MMIO_INIT_CTL__IDX_SHIFT 0
+#define GPIO_MMIO_INIT_CTL__IDX_WIDTH 4
+#define GPIO_MMIO_INIT_CTL__IDX_RMASK 0xf
+#define GPIO_MMIO_INIT_CTL__IDX_MASK  0xf
+#define GPIO_MMIO_INIT_CTL__IDX_FIELD 0,3
+
+
+// MMIO service domain table data.
+// Read/Write data for the service domain table.  Each time this register is
+// read or written, MMIO_INIT_CTL.IDX is incremented.
+#define GPIO_MMIO_INIT_DAT 0x0208
+
+#define GPIO_MMIO_INIT_DAT__DAT_SHIFT 0
+#define GPIO_MMIO_INIT_DAT__DAT_WIDTH 64
+#define GPIO_MMIO_INIT_DAT__DAT_RMASK _64bit(0xffffffffffffffff)
+#define GPIO_MMIO_INIT_DAT__DAT_MASK  _64bit(0xffffffffffffffff)
+#define GPIO_MMIO_INIT_DAT__DAT_FIELD 0,63
+
+
+// MMIO service domain table data - low word.
+// Read/Write data for the service domain table.  Each time this register is
+// read or written, MMIO_INIT_CTL.IDX is incremented.  Each entry consists of
+// two words, addressed by MMIO_INIT_CTL.IDX[0].  Each bit in an entry
+// corresponds to a service or set of services.  A set bit allows access to
+// that service for MMIO accesses that address this service domain table
+// entry.
+#define GPIO_MMIO_INIT_DAT_0 0x0208
+
+#define GPIO_MMIO_INIT_DAT_0__PIN_ENABLE_SHIFT 0
+#define GPIO_MMIO_INIT_DAT_0__PIN_ENABLE_WIDTH 64
+#define GPIO_MMIO_INIT_DAT_0__PIN_ENABLE_RMASK _64bit(0xffffffffffffffff)
+#define GPIO_MMIO_INIT_DAT_0__PIN_ENABLE_MASK  _64bit(0xffffffffffffffff)
+#define GPIO_MMIO_INIT_DAT_0__PIN_ENABLE_FIELD 0,63
+
+
+// MMIO service domain table data - high word.
+// Read/Write data for the service domain table.  Each time this register is
+// read or written, MMIO_INIT_CTL.IDX is incremented.  Each entry consists of
+// two words, addressed by MMIO_INIT_CTL.IDX[0].  Each bit in an entry
+// corresponds to a service or set of services.  A set bit allows access to
+// that service for MMIO accesses that address this service domain table
+// entry.
+#define GPIO_MMIO_INIT_DAT_1 0x0208
+
+#define GPIO_MMIO_INIT_DAT_1__CFG_PROT_LEVEL_SHIFT 0
+#define GPIO_MMIO_INIT_DAT_1__CFG_PROT_LEVEL_WIDTH 3
+#define GPIO_MMIO_INIT_DAT_1__CFG_PROT_LEVEL_RMASK 0x7
+#define GPIO_MMIO_INIT_DAT_1__CFG_PROT_LEVEL_MASK  0x7
+#define GPIO_MMIO_INIT_DAT_1__CFG_PROT_LEVEL_FIELD 0,2
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL__FIRST_WORD 0x0700
+#define GPIO_PAD_CONTROL__LAST_WORD 0x08f8
+
+#define GPIO_PAD_CONTROL__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL__SL_SHIFT 4
+#define GPIO_PAD_CONTROL__SL_WIDTH 2
+#define GPIO_PAD_CONTROL__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL__SL_MASK  0x30
+#define GPIO_PAD_CONTROL__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL__PU_SHIFT 6
+#define GPIO_PAD_CONTROL__PU_WIDTH 1
+#define GPIO_PAD_CONTROL__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL__PU_MASK  0x40
+#define GPIO_PAD_CONTROL__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL__PD_SHIFT 7
+#define GPIO_PAD_CONTROL__PD_WIDTH 1
+#define GPIO_PAD_CONTROL__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL__PD_MASK  0x80
+#define GPIO_PAD_CONTROL__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_1__FIRST_WORD 0x0708
+#define GPIO_PAD_CONTROL_1__LAST_WORD 0x0900
+
+#define GPIO_PAD_CONTROL_1__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_1__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_1__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_1__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_1__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_1__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_1__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_1__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_1__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_1__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_1__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_1__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_1__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_1__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_1__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_1__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_1__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_1__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_1__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_1__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_1__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_1__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_1__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_1__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_1__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_1__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_1__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_1__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_1__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_1__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_10__FIRST_WORD 0x0750
+#define GPIO_PAD_CONTROL_10__LAST_WORD 0x0948
+
+#define GPIO_PAD_CONTROL_10__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_10__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_10__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_10__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_10__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_10__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_10__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_10__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_10__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_10__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_10__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_10__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_10__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_10__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_10__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_10__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_10__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_10__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_10__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_10__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_10__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_10__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_10__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_10__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_10__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_10__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_10__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_10__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_10__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_10__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_11__FIRST_WORD 0x0758
+#define GPIO_PAD_CONTROL_11__LAST_WORD 0x0950
+
+#define GPIO_PAD_CONTROL_11__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_11__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_11__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_11__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_11__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_11__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_11__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_11__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_11__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_11__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_11__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_11__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_11__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_11__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_11__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_11__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_11__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_11__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_11__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_11__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_11__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_11__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_11__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_11__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_11__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_11__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_11__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_11__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_11__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_11__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_12__FIRST_WORD 0x0760
+#define GPIO_PAD_CONTROL_12__LAST_WORD 0x0958
+
+#define GPIO_PAD_CONTROL_12__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_12__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_12__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_12__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_12__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_12__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_12__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_12__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_12__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_12__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_12__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_12__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_12__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_12__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_12__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_12__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_12__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_12__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_12__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_12__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_12__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_12__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_12__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_12__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_12__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_12__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_12__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_12__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_12__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_12__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_13__FIRST_WORD 0x0768
+#define GPIO_PAD_CONTROL_13__LAST_WORD 0x0960
+
+#define GPIO_PAD_CONTROL_13__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_13__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_13__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_13__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_13__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_13__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_13__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_13__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_13__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_13__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_13__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_13__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_13__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_13__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_13__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_13__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_13__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_13__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_13__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_13__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_13__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_13__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_13__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_13__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_13__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_13__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_13__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_13__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_13__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_13__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_14__FIRST_WORD 0x0770
+#define GPIO_PAD_CONTROL_14__LAST_WORD 0x0968
+
+#define GPIO_PAD_CONTROL_14__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_14__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_14__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_14__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_14__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_14__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_14__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_14__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_14__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_14__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_14__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_14__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_14__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_14__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_14__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_14__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_14__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_14__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_14__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_14__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_14__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_14__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_14__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_14__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_14__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_14__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_14__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_14__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_14__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_14__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_15__FIRST_WORD 0x0778
+#define GPIO_PAD_CONTROL_15__LAST_WORD 0x0970
+
+#define GPIO_PAD_CONTROL_15__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_15__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_15__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_15__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_15__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_15__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_15__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_15__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_15__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_15__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_15__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_15__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_15__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_15__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_15__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_15__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_15__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_15__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_15__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_15__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_15__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_15__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_15__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_15__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_15__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_15__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_15__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_15__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_15__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_15__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_16__FIRST_WORD 0x0780
+#define GPIO_PAD_CONTROL_16__LAST_WORD 0x0978
+
+#define GPIO_PAD_CONTROL_16__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_16__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_16__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_16__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_16__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_16__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_16__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_16__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_16__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_16__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_16__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_16__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_16__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_16__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_16__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_16__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_16__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_16__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_16__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_16__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_16__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_16__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_16__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_16__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_16__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_16__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_16__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_16__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_16__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_16__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_17__FIRST_WORD 0x0788
+#define GPIO_PAD_CONTROL_17__LAST_WORD 0x0980
+
+#define GPIO_PAD_CONTROL_17__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_17__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_17__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_17__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_17__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_17__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_17__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_17__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_17__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_17__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_17__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_17__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_17__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_17__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_17__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_17__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_17__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_17__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_17__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_17__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_17__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_17__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_17__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_17__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_17__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_17__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_17__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_17__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_17__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_17__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_18__FIRST_WORD 0x0790
+#define GPIO_PAD_CONTROL_18__LAST_WORD 0x0988
+
+#define GPIO_PAD_CONTROL_18__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_18__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_18__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_18__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_18__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_18__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_18__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_18__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_18__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_18__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_18__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_18__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_18__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_18__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_18__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_18__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_18__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_18__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_18__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_18__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_18__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_18__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_18__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_18__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_18__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_18__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_18__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_18__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_18__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_18__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_19__FIRST_WORD 0x0798
+#define GPIO_PAD_CONTROL_19__LAST_WORD 0x0990
+
+#define GPIO_PAD_CONTROL_19__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_19__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_19__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_19__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_19__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_19__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_19__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_19__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_19__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_19__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_19__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_19__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_19__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_19__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_19__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_19__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_19__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_19__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_19__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_19__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_19__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_19__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_19__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_19__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_19__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_19__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_19__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_19__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_19__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_19__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_2__FIRST_WORD 0x0710
+#define GPIO_PAD_CONTROL_2__LAST_WORD 0x0908
+
+#define GPIO_PAD_CONTROL_2__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_2__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_2__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_2__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_2__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_2__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_2__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_2__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_2__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_2__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_2__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_2__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_2__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_2__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_2__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_2__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_2__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_2__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_2__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_2__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_2__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_2__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_2__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_2__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_2__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_2__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_2__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_2__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_2__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_2__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_20__FIRST_WORD 0x07a0
+#define GPIO_PAD_CONTROL_20__LAST_WORD 0x0998
+
+#define GPIO_PAD_CONTROL_20__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_20__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_20__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_20__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_20__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_20__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_20__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_20__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_20__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_20__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_20__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_20__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_20__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_20__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_20__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_20__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_20__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_20__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_20__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_20__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_20__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_20__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_20__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_20__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_20__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_20__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_20__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_20__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_20__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_20__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_21__FIRST_WORD 0x07a8
+#define GPIO_PAD_CONTROL_21__LAST_WORD 0x09a0
+
+#define GPIO_PAD_CONTROL_21__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_21__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_21__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_21__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_21__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_21__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_21__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_21__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_21__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_21__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_21__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_21__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_21__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_21__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_21__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_21__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_21__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_21__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_21__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_21__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_21__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_21__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_21__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_21__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_21__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_21__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_21__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_21__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_21__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_21__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_22__FIRST_WORD 0x07b0
+#define GPIO_PAD_CONTROL_22__LAST_WORD 0x09a8
+
+#define GPIO_PAD_CONTROL_22__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_22__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_22__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_22__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_22__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_22__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_22__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_22__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_22__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_22__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_22__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_22__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_22__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_22__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_22__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_22__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_22__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_22__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_22__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_22__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_22__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_22__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_22__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_22__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_22__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_22__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_22__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_22__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_22__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_22__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_23__FIRST_WORD 0x07b8
+#define GPIO_PAD_CONTROL_23__LAST_WORD 0x09b0
+
+#define GPIO_PAD_CONTROL_23__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_23__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_23__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_23__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_23__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_23__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_23__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_23__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_23__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_23__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_23__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_23__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_23__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_23__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_23__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_23__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_23__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_23__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_23__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_23__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_23__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_23__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_23__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_23__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_23__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_23__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_23__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_23__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_23__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_23__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_24__FIRST_WORD 0x07c0
+#define GPIO_PAD_CONTROL_24__LAST_WORD 0x09b8
+
+#define GPIO_PAD_CONTROL_24__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_24__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_24__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_24__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_24__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_24__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_24__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_24__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_24__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_24__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_24__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_24__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_24__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_24__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_24__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_24__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_24__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_24__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_24__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_24__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_24__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_24__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_24__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_24__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_24__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_24__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_24__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_24__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_24__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_24__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_25__FIRST_WORD 0x07c8
+#define GPIO_PAD_CONTROL_25__LAST_WORD 0x09c0
+
+#define GPIO_PAD_CONTROL_25__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_25__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_25__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_25__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_25__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_25__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_25__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_25__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_25__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_25__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_25__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_25__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_25__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_25__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_25__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_25__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_25__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_25__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_25__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_25__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_25__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_25__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_25__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_25__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_25__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_25__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_25__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_25__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_25__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_25__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_26__FIRST_WORD 0x07d0
+#define GPIO_PAD_CONTROL_26__LAST_WORD 0x09c8
+
+#define GPIO_PAD_CONTROL_26__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_26__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_26__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_26__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_26__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_26__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_26__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_26__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_26__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_26__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_26__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_26__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_26__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_26__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_26__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_26__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_26__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_26__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_26__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_26__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_26__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_26__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_26__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_26__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_26__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_26__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_26__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_26__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_26__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_26__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_27__FIRST_WORD 0x07d8
+#define GPIO_PAD_CONTROL_27__LAST_WORD 0x09d0
+
+#define GPIO_PAD_CONTROL_27__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_27__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_27__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_27__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_27__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_27__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_27__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_27__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_27__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_27__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_27__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_27__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_27__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_27__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_27__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_27__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_27__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_27__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_27__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_27__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_27__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_27__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_27__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_27__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_27__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_27__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_27__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_27__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_27__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_27__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_28__FIRST_WORD 0x07e0
+#define GPIO_PAD_CONTROL_28__LAST_WORD 0x09d8
+
+#define GPIO_PAD_CONTROL_28__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_28__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_28__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_28__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_28__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_28__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_28__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_28__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_28__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_28__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_28__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_28__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_28__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_28__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_28__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_28__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_28__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_28__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_28__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_28__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_28__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_28__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_28__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_28__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_28__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_28__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_28__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_28__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_28__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_28__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_29__FIRST_WORD 0x07e8
+#define GPIO_PAD_CONTROL_29__LAST_WORD 0x09e0
+
+#define GPIO_PAD_CONTROL_29__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_29__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_29__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_29__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_29__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_29__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_29__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_29__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_29__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_29__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_29__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_29__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_29__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_29__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_29__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_29__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_29__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_29__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_29__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_29__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_29__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_29__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_29__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_29__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_29__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_29__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_29__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_29__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_29__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_29__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_3__FIRST_WORD 0x0718
+#define GPIO_PAD_CONTROL_3__LAST_WORD 0x0910
+
+#define GPIO_PAD_CONTROL_3__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_3__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_3__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_3__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_3__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_3__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_3__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_3__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_3__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_3__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_3__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_3__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_3__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_3__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_3__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_3__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_3__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_3__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_3__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_3__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_3__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_3__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_3__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_3__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_3__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_3__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_3__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_3__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_3__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_3__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_30__FIRST_WORD 0x07f0
+#define GPIO_PAD_CONTROL_30__LAST_WORD 0x09e8
+
+#define GPIO_PAD_CONTROL_30__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_30__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_30__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_30__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_30__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_30__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_30__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_30__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_30__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_30__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_30__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_30__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_30__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_30__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_30__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_30__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_30__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_30__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_30__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_30__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_30__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_30__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_30__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_30__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_30__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_30__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_30__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_30__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_30__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_30__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_31__FIRST_WORD 0x07f8
+#define GPIO_PAD_CONTROL_31__LAST_WORD 0x09f0
+
+#define GPIO_PAD_CONTROL_31__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_31__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_31__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_31__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_31__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_31__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_31__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_31__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_31__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_31__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_31__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_31__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_31__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_31__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_31__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_31__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_31__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_31__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_31__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_31__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_31__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_31__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_31__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_31__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_31__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_31__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_31__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_31__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_31__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_31__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_32__FIRST_WORD 0x0800
+#define GPIO_PAD_CONTROL_32__LAST_WORD 0x09f8
+
+#define GPIO_PAD_CONTROL_32__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_32__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_32__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_32__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_32__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_32__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_32__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_32__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_32__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_32__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_32__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_32__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_32__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_32__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_32__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_32__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_32__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_32__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_32__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_32__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_32__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_32__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_32__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_32__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_32__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_32__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_32__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_32__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_32__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_32__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_33__FIRST_WORD 0x0808
+#define GPIO_PAD_CONTROL_33__LAST_WORD 0x0a00
+
+#define GPIO_PAD_CONTROL_33__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_33__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_33__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_33__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_33__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_33__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_33__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_33__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_33__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_33__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_33__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_33__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_33__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_33__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_33__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_33__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_33__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_33__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_33__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_33__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_33__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_33__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_33__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_33__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_33__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_33__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_33__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_33__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_33__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_33__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_34__FIRST_WORD 0x0810
+#define GPIO_PAD_CONTROL_34__LAST_WORD 0x0a08
+
+#define GPIO_PAD_CONTROL_34__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_34__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_34__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_34__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_34__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_34__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_34__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_34__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_34__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_34__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_34__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_34__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_34__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_34__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_34__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_34__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_34__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_34__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_34__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_34__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_34__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_34__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_34__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_34__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_34__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_34__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_34__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_34__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_34__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_34__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_35__FIRST_WORD 0x0818
+#define GPIO_PAD_CONTROL_35__LAST_WORD 0x0a10
+
+#define GPIO_PAD_CONTROL_35__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_35__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_35__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_35__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_35__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_35__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_35__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_35__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_35__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_35__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_35__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_35__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_35__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_35__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_35__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_35__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_35__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_35__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_35__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_35__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_35__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_35__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_35__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_35__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_35__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_35__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_35__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_35__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_35__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_35__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_36__FIRST_WORD 0x0820
+#define GPIO_PAD_CONTROL_36__LAST_WORD 0x0a18
+
+#define GPIO_PAD_CONTROL_36__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_36__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_36__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_36__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_36__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_36__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_36__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_36__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_36__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_36__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_36__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_36__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_36__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_36__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_36__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_36__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_36__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_36__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_36__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_36__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_36__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_36__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_36__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_36__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_36__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_36__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_36__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_36__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_36__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_36__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_37__FIRST_WORD 0x0828
+#define GPIO_PAD_CONTROL_37__LAST_WORD 0x0a20
+
+#define GPIO_PAD_CONTROL_37__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_37__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_37__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_37__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_37__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_37__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_37__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_37__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_37__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_37__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_37__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_37__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_37__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_37__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_37__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_37__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_37__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_37__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_37__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_37__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_37__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_37__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_37__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_37__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_37__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_37__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_37__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_37__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_37__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_37__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_38__FIRST_WORD 0x0830
+#define GPIO_PAD_CONTROL_38__LAST_WORD 0x0a28
+
+#define GPIO_PAD_CONTROL_38__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_38__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_38__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_38__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_38__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_38__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_38__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_38__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_38__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_38__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_38__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_38__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_38__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_38__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_38__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_38__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_38__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_38__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_38__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_38__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_38__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_38__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_38__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_38__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_38__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_38__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_38__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_38__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_38__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_38__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_39__FIRST_WORD 0x0838
+#define GPIO_PAD_CONTROL_39__LAST_WORD 0x0a30
+
+#define GPIO_PAD_CONTROL_39__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_39__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_39__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_39__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_39__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_39__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_39__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_39__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_39__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_39__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_39__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_39__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_39__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_39__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_39__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_39__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_39__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_39__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_39__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_39__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_39__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_39__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_39__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_39__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_39__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_39__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_39__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_39__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_39__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_39__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_4__FIRST_WORD 0x0720
+#define GPIO_PAD_CONTROL_4__LAST_WORD 0x0918
+
+#define GPIO_PAD_CONTROL_4__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_4__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_4__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_4__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_4__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_4__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_4__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_4__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_4__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_4__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_4__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_4__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_4__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_4__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_4__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_4__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_4__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_4__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_4__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_4__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_4__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_4__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_4__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_4__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_4__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_4__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_4__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_4__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_4__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_4__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_40__FIRST_WORD 0x0840
+#define GPIO_PAD_CONTROL_40__LAST_WORD 0x0a38
+
+#define GPIO_PAD_CONTROL_40__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_40__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_40__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_40__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_40__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_40__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_40__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_40__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_40__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_40__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_40__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_40__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_40__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_40__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_40__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_40__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_40__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_40__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_40__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_40__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_40__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_40__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_40__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_40__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_40__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_40__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_40__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_40__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_40__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_40__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_41__FIRST_WORD 0x0848
+#define GPIO_PAD_CONTROL_41__LAST_WORD 0x0a40
+
+#define GPIO_PAD_CONTROL_41__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_41__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_41__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_41__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_41__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_41__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_41__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_41__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_41__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_41__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_41__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_41__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_41__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_41__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_41__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_41__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_41__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_41__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_41__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_41__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_41__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_41__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_41__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_41__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_41__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_41__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_41__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_41__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_41__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_41__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_42__FIRST_WORD 0x0850
+#define GPIO_PAD_CONTROL_42__LAST_WORD 0x0a48
+
+#define GPIO_PAD_CONTROL_42__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_42__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_42__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_42__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_42__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_42__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_42__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_42__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_42__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_42__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_42__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_42__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_42__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_42__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_42__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_42__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_42__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_42__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_42__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_42__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_42__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_42__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_42__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_42__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_42__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_42__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_42__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_42__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_42__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_42__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_43__FIRST_WORD 0x0858
+#define GPIO_PAD_CONTROL_43__LAST_WORD 0x0a50
+
+#define GPIO_PAD_CONTROL_43__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_43__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_43__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_43__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_43__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_43__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_43__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_43__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_43__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_43__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_43__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_43__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_43__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_43__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_43__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_43__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_43__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_43__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_43__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_43__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_43__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_43__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_43__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_43__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_43__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_43__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_43__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_43__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_43__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_43__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_44__FIRST_WORD 0x0860
+#define GPIO_PAD_CONTROL_44__LAST_WORD 0x0a58
+
+#define GPIO_PAD_CONTROL_44__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_44__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_44__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_44__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_44__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_44__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_44__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_44__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_44__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_44__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_44__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_44__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_44__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_44__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_44__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_44__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_44__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_44__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_44__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_44__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_44__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_44__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_44__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_44__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_44__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_44__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_44__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_44__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_44__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_44__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_45__FIRST_WORD 0x0868
+#define GPIO_PAD_CONTROL_45__LAST_WORD 0x0a60
+
+#define GPIO_PAD_CONTROL_45__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_45__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_45__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_45__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_45__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_45__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_45__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_45__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_45__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_45__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_45__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_45__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_45__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_45__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_45__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_45__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_45__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_45__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_45__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_45__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_45__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_45__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_45__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_45__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_45__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_45__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_45__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_45__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_45__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_45__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_46__FIRST_WORD 0x0870
+#define GPIO_PAD_CONTROL_46__LAST_WORD 0x0a68
+
+#define GPIO_PAD_CONTROL_46__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_46__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_46__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_46__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_46__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_46__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_46__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_46__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_46__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_46__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_46__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_46__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_46__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_46__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_46__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_46__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_46__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_46__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_46__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_46__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_46__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_46__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_46__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_46__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_46__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_46__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_46__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_46__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_46__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_46__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_47__FIRST_WORD 0x0878
+#define GPIO_PAD_CONTROL_47__LAST_WORD 0x0a70
+
+#define GPIO_PAD_CONTROL_47__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_47__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_47__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_47__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_47__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_47__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_47__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_47__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_47__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_47__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_47__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_47__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_47__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_47__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_47__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_47__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_47__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_47__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_47__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_47__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_47__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_47__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_47__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_47__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_47__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_47__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_47__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_47__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_47__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_47__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_48__FIRST_WORD 0x0880
+#define GPIO_PAD_CONTROL_48__LAST_WORD 0x0a78
+
+#define GPIO_PAD_CONTROL_48__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_48__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_48__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_48__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_48__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_48__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_48__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_48__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_48__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_48__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_48__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_48__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_48__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_48__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_48__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_48__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_48__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_48__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_48__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_48__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_48__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_48__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_48__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_48__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_48__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_48__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_48__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_48__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_48__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_48__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_49__FIRST_WORD 0x0888
+#define GPIO_PAD_CONTROL_49__LAST_WORD 0x0a80
+
+#define GPIO_PAD_CONTROL_49__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_49__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_49__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_49__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_49__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_49__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_49__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_49__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_49__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_49__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_49__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_49__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_49__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_49__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_49__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_49__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_49__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_49__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_49__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_49__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_49__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_49__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_49__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_49__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_49__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_49__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_49__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_49__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_49__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_49__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_5__FIRST_WORD 0x0728
+#define GPIO_PAD_CONTROL_5__LAST_WORD 0x0920
+
+#define GPIO_PAD_CONTROL_5__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_5__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_5__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_5__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_5__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_5__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_5__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_5__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_5__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_5__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_5__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_5__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_5__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_5__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_5__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_5__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_5__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_5__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_5__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_5__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_5__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_5__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_5__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_5__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_5__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_5__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_5__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_5__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_5__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_5__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_50__FIRST_WORD 0x0890
+#define GPIO_PAD_CONTROL_50__LAST_WORD 0x0a88
+
+#define GPIO_PAD_CONTROL_50__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_50__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_50__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_50__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_50__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_50__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_50__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_50__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_50__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_50__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_50__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_50__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_50__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_50__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_50__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_50__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_50__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_50__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_50__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_50__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_50__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_50__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_50__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_50__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_50__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_50__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_50__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_50__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_50__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_50__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_51__FIRST_WORD 0x0898
+#define GPIO_PAD_CONTROL_51__LAST_WORD 0x0a90
+
+#define GPIO_PAD_CONTROL_51__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_51__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_51__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_51__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_51__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_51__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_51__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_51__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_51__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_51__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_51__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_51__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_51__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_51__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_51__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_51__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_51__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_51__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_51__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_51__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_51__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_51__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_51__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_51__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_51__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_51__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_51__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_51__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_51__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_51__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_52__FIRST_WORD 0x08a0
+#define GPIO_PAD_CONTROL_52__LAST_WORD 0x0a98
+
+#define GPIO_PAD_CONTROL_52__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_52__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_52__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_52__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_52__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_52__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_52__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_52__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_52__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_52__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_52__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_52__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_52__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_52__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_52__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_52__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_52__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_52__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_52__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_52__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_52__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_52__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_52__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_52__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_52__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_52__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_52__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_52__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_52__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_52__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_53__FIRST_WORD 0x08a8
+#define GPIO_PAD_CONTROL_53__LAST_WORD 0x0aa0
+
+#define GPIO_PAD_CONTROL_53__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_53__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_53__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_53__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_53__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_53__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_53__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_53__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_53__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_53__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_53__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_53__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_53__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_53__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_53__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_53__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_53__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_53__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_53__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_53__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_53__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_53__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_53__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_53__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_53__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_53__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_53__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_53__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_53__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_53__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_54__FIRST_WORD 0x08b0
+#define GPIO_PAD_CONTROL_54__LAST_WORD 0x0aa8
+
+#define GPIO_PAD_CONTROL_54__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_54__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_54__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_54__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_54__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_54__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_54__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_54__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_54__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_54__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_54__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_54__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_54__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_54__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_54__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_54__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_54__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_54__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_54__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_54__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_54__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_54__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_54__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_54__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_54__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_54__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_54__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_54__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_54__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_54__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_55__FIRST_WORD 0x08b8
+#define GPIO_PAD_CONTROL_55__LAST_WORD 0x0ab0
+
+#define GPIO_PAD_CONTROL_55__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_55__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_55__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_55__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_55__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_55__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_55__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_55__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_55__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_55__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_55__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_55__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_55__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_55__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_55__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_55__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_55__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_55__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_55__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_55__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_55__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_55__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_55__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_55__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_55__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_55__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_55__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_55__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_55__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_55__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_56__FIRST_WORD 0x08c0
+#define GPIO_PAD_CONTROL_56__LAST_WORD 0x0ab8
+
+#define GPIO_PAD_CONTROL_56__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_56__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_56__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_56__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_56__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_56__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_56__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_56__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_56__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_56__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_56__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_56__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_56__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_56__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_56__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_56__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_56__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_56__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_56__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_56__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_56__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_56__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_56__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_56__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_56__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_56__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_56__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_56__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_56__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_56__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_57__FIRST_WORD 0x08c8
+#define GPIO_PAD_CONTROL_57__LAST_WORD 0x0ac0
+
+#define GPIO_PAD_CONTROL_57__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_57__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_57__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_57__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_57__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_57__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_57__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_57__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_57__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_57__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_57__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_57__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_57__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_57__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_57__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_57__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_57__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_57__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_57__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_57__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_57__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_57__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_57__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_57__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_57__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_57__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_57__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_57__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_57__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_57__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_58__FIRST_WORD 0x08d0
+#define GPIO_PAD_CONTROL_58__LAST_WORD 0x0ac8
+
+#define GPIO_PAD_CONTROL_58__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_58__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_58__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_58__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_58__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_58__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_58__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_58__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_58__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_58__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_58__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_58__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_58__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_58__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_58__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_58__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_58__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_58__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_58__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_58__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_58__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_58__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_58__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_58__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_58__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_58__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_58__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_58__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_58__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_58__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_59__FIRST_WORD 0x08d8
+#define GPIO_PAD_CONTROL_59__LAST_WORD 0x0ad0
+
+#define GPIO_PAD_CONTROL_59__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_59__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_59__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_59__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_59__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_59__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_59__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_59__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_59__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_59__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_59__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_59__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_59__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_59__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_59__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_59__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_59__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_59__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_59__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_59__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_59__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_59__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_59__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_59__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_59__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_59__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_59__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_59__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_59__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_59__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_6__FIRST_WORD 0x0730
+#define GPIO_PAD_CONTROL_6__LAST_WORD 0x0928
+
+#define GPIO_PAD_CONTROL_6__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_6__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_6__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_6__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_6__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_6__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_6__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_6__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_6__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_6__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_6__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_6__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_6__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_6__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_6__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_6__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_6__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_6__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_6__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_6__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_6__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_6__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_6__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_6__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_6__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_6__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_6__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_6__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_6__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_6__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_60__FIRST_WORD 0x08e0
+#define GPIO_PAD_CONTROL_60__LAST_WORD 0x0ad8
+
+#define GPIO_PAD_CONTROL_60__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_60__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_60__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_60__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_60__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_60__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_60__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_60__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_60__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_60__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_60__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_60__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_60__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_60__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_60__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_60__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_60__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_60__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_60__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_60__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_60__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_60__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_60__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_60__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_60__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_60__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_60__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_60__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_60__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_60__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_61__FIRST_WORD 0x08e8
+#define GPIO_PAD_CONTROL_61__LAST_WORD 0x0ae0
+
+#define GPIO_PAD_CONTROL_61__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_61__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_61__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_61__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_61__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_61__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_61__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_61__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_61__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_61__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_61__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_61__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_61__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_61__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_61__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_61__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_61__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_61__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_61__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_61__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_61__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_61__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_61__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_61__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_61__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_61__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_61__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_61__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_61__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_61__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_62__FIRST_WORD 0x08f0
+#define GPIO_PAD_CONTROL_62__LAST_WORD 0x0ae8
+
+#define GPIO_PAD_CONTROL_62__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_62__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_62__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_62__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_62__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_62__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_62__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_62__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_62__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_62__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_62__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_62__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_62__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_62__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_62__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_62__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_62__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_62__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_62__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_62__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_62__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_62__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_62__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_62__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_62__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_62__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_62__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_62__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_62__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_62__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_63__FIRST_WORD 0x08f8
+#define GPIO_PAD_CONTROL_63__LAST_WORD 0x0af0
+
+#define GPIO_PAD_CONTROL_63__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_63__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_63__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_63__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_63__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_63__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_63__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_63__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_63__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_63__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_63__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_63__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_63__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_63__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_63__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_63__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_63__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_63__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_63__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_63__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_63__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_63__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_63__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_63__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_63__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_63__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_63__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_63__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_63__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_63__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_7__FIRST_WORD 0x0738
+#define GPIO_PAD_CONTROL_7__LAST_WORD 0x0930
+
+#define GPIO_PAD_CONTROL_7__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_7__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_7__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_7__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_7__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_7__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_7__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_7__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_7__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_7__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_7__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_7__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_7__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_7__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_7__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_7__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_7__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_7__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_7__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_7__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_7__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_7__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_7__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_7__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_7__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_7__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_7__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_7__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_7__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_7__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_8__FIRST_WORD 0x0740
+#define GPIO_PAD_CONTROL_8__LAST_WORD 0x0938
+
+#define GPIO_PAD_CONTROL_8__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_8__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_8__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_8__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_8__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_8__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_8__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_8__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_8__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_8__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_8__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_8__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_8__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_8__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_8__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_8__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_8__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_8__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_8__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_8__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_8__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_8__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_8__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_8__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_8__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_8__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_8__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_8__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_8__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_8__SCHM_FIELD 8,8
+
+
+// Pad Electrical Controls.
+#define GPIO_PAD_CONTROL_9__FIRST_WORD 0x0748
+#define GPIO_PAD_CONTROL_9__LAST_WORD 0x0940
+
+#define GPIO_PAD_CONTROL_9__STRENGTH_SHIFT 0
+#define GPIO_PAD_CONTROL_9__STRENGTH_WIDTH 3
+#define GPIO_PAD_CONTROL_9__STRENGTH_RMASK 0x7
+#define GPIO_PAD_CONTROL_9__STRENGTH_MASK  0x7
+#define GPIO_PAD_CONTROL_9__STRENGTH_FIELD 0,2
+
+#define GPIO_PAD_CONTROL_9__SUS_SHIFT 3
+#define GPIO_PAD_CONTROL_9__SUS_WIDTH 1
+#define GPIO_PAD_CONTROL_9__SUS_RMASK 0x1
+#define GPIO_PAD_CONTROL_9__SUS_MASK  0x8
+#define GPIO_PAD_CONTROL_9__SUS_FIELD 3,3
+
+#define GPIO_PAD_CONTROL_9__SL_SHIFT 4
+#define GPIO_PAD_CONTROL_9__SL_WIDTH 2
+#define GPIO_PAD_CONTROL_9__SL_RMASK 0x3
+#define GPIO_PAD_CONTROL_9__SL_MASK  0x30
+#define GPIO_PAD_CONTROL_9__SL_FIELD 4,5
+
+#define GPIO_PAD_CONTROL_9__PU_SHIFT 6
+#define GPIO_PAD_CONTROL_9__PU_WIDTH 1
+#define GPIO_PAD_CONTROL_9__PU_RMASK 0x1
+#define GPIO_PAD_CONTROL_9__PU_MASK  0x40
+#define GPIO_PAD_CONTROL_9__PU_FIELD 6,6
+
+#define GPIO_PAD_CONTROL_9__PD_SHIFT 7
+#define GPIO_PAD_CONTROL_9__PD_WIDTH 1
+#define GPIO_PAD_CONTROL_9__PD_RMASK 0x1
+#define GPIO_PAD_CONTROL_9__PD_MASK  0x80
+#define GPIO_PAD_CONTROL_9__PD_FIELD 7,7
+
+#define GPIO_PAD_CONTROL_9__SCHM_SHIFT 8
+#define GPIO_PAD_CONTROL_9__SCHM_WIDTH 1
+#define GPIO_PAD_CONTROL_9__SCHM_RMASK 0x1
+#define GPIO_PAD_CONTROL_9__SCHM_MASK  0x100
+#define GPIO_PAD_CONTROL_9__SCHM_FIELD 8,8
+
+
+// Pin Clr.
+#define GPIO_PIN_CLR 0x1028
+
+#define GPIO_PIN_CLR__CLR_SHIFT 0
+#define GPIO_PIN_CLR__CLR_WIDTH 64
+#define GPIO_PIN_CLR__CLR_RMASK _64bit(0xffffffffffffffff)
+#define GPIO_PIN_CLR__CLR_MASK  _64bit(0xffffffffffffffff)
+#define GPIO_PIN_CLR__CLR_FIELD 0,63
+
+
+// Pin Direction Input.
+#define GPIO_PIN_DIR_I 0x1040
+
+#define GPIO_PIN_DIR_I__I_SHIFT 0
+#define GPIO_PIN_DIR_I__I_WIDTH 64
+#define GPIO_PIN_DIR_I__I_RMASK _64bit(0xffffffffffffffff)
+#define GPIO_PIN_DIR_I__I_MASK  _64bit(0xffffffffffffffff)
+#define GPIO_PIN_DIR_I__I_FIELD 0,63
+
+
+// Pin Direction Output.
+#define GPIO_PIN_DIR_O 0x1048
+
+#define GPIO_PIN_DIR_O__O_SHIFT 0
+#define GPIO_PIN_DIR_O__O_WIDTH 64
+#define GPIO_PIN_DIR_O__O_RMASK _64bit(0xffffffffffffffff)
+#define GPIO_PIN_DIR_O__O_MASK  _64bit(0xffffffffffffffff)
+#define GPIO_PIN_DIR_O__O_FIELD 0,63
+
+
+// Input Mask Condition.
+#define GPIO_PIN_INPUT_CND 0x1098
+
+#define GPIO_PIN_INPUT_CND__CND_SHIFT 0
+#define GPIO_PIN_INPUT_CND__CND_WIDTH 64
+#define GPIO_PIN_INPUT_CND__CND_RMASK _64bit(0xffffffffffffffff)
+#define GPIO_PIN_INPUT_CND__CND_MASK  _64bit(0xffffffffffffffff)
+#define GPIO_PIN_INPUT_CND__CND_FIELD 0,63
+
+
+// Input Inversion Mode.
+#define GPIO_PIN_INPUT_INV 0x1088
+
+#define GPIO_PIN_INPUT_INV__INV_SHIFT 0
+#define GPIO_PIN_INPUT_INV__INV_WIDTH 64
+#define GPIO_PIN_INPUT_INV__INV_RMASK _64bit(0xffffffffffffffff)
+#define GPIO_PIN_INPUT_INV__INV_MASK  _64bit(0xffffffffffffffff)
+#define GPIO_PIN_INPUT_INV__INV_FIELD 0,63
+
+
+// Input Mask.
+#define GPIO_PIN_INPUT_MSK 0x1090
+
+#define GPIO_PIN_INPUT_MSK__MSK_SHIFT 0
+#define GPIO_PIN_INPUT_MSK__MSK_WIDTH 64
+#define GPIO_PIN_INPUT_MSK__MSK_RMASK _64bit(0xffffffffffffffff)
+#define GPIO_PIN_INPUT_MSK__MSK_MASK  _64bit(0xffffffffffffffff)
+#define GPIO_PIN_INPUT_MSK__MSK_FIELD 0,63
+
+
+// Input Sync Mode.
+#define GPIO_PIN_INPUT_SYNC 0x1070
+
+#define GPIO_PIN_INPUT_SYNC__SYNC_SHIFT 0
+#define GPIO_PIN_INPUT_SYNC__SYNC_WIDTH 64
+#define GPIO_PIN_INPUT_SYNC__SYNC_RMASK _64bit(0xffffffffffffffff)
+#define GPIO_PIN_INPUT_SYNC__SYNC_MASK  _64bit(0xffffffffffffffff)
+#define GPIO_PIN_INPUT_SYNC__SYNC_FIELD 0,63
+
+
+// Output Inversion Mode.
+#define GPIO_PIN_OUTPUT_INV 0x1058
+
+#define GPIO_PIN_OUTPUT_INV__INV_SHIFT 0
+#define GPIO_PIN_OUTPUT_INV__INV_WIDTH 64
+#define GPIO_PIN_OUTPUT_INV__INV_RMASK _64bit(0xffffffffffffffff)
+#define GPIO_PIN_OUTPUT_INV__INV_MASK  _64bit(0xffffffffffffffff)
+#define GPIO_PIN_OUTPUT_INV__INV_FIELD 0,63
+
+
+// Output Mask.
+#define GPIO_PIN_OUTPUT_MSK 0x1060
+
+#define GPIO_PIN_OUTPUT_MSK__MSK_SHIFT 0
+#define GPIO_PIN_OUTPUT_MSK__MSK_WIDTH 64
+#define GPIO_PIN_OUTPUT_MSK__MSK_RMASK _64bit(0xffffffffffffffff)
+#define GPIO_PIN_OUTPUT_MSK__MSK_MASK  _64bit(0xffffffffffffffff)
+#define GPIO_PIN_OUTPUT_MSK__MSK_FIELD 0,63
+
+
+// Output Toggle.
+#define GPIO_PIN_OUTPUT_TGL 0x1050
+
+#define GPIO_PIN_OUTPUT_TGL__TGL_SHIFT 0
+#define GPIO_PIN_OUTPUT_TGL__TGL_WIDTH 64
+#define GPIO_PIN_OUTPUT_TGL__TGL_RMASK _64bit(0xffffffffffffffff)
+#define GPIO_PIN_OUTPUT_TGL__TGL_MASK  _64bit(0xffffffffffffffff)
+#define GPIO_PIN_OUTPUT_TGL__TGL_FIELD 0,63
+
+
+// Pin Pulse Clear.
+#define GPIO_PIN_PULSE_CLR 0x1018
+
+#define GPIO_PIN_PULSE_CLR__PULSE_CLR_SHIFT 0
+#define GPIO_PIN_PULSE_CLR__PULSE_CLR_WIDTH 64
+#define GPIO_PIN_PULSE_CLR__PULSE_CLR_RMASK _64bit(0xffffffffffffffff)
+#define GPIO_PIN_PULSE_CLR__PULSE_CLR_MASK  _64bit(0xffffffffffffffff)
+#define GPIO_PIN_PULSE_CLR__PULSE_CLR_FIELD 0,63
+
+
+// Pin Pulse Set.
+#define GPIO_PIN_PULSE_SET 0x1010
+
+#define GPIO_PIN_PULSE_SET__PULSE_SET_SHIFT 0
+#define GPIO_PIN_PULSE_SET__PULSE_SET_WIDTH 64
+#define GPIO_PIN_PULSE_SET__PULSE_SET_RMASK _64bit(0xffffffffffffffff)
+#define GPIO_PIN_PULSE_SET__PULSE_SET_MASK  _64bit(0xffffffffffffffff)
+#define GPIO_PIN_PULSE_SET__PULSE_SET_FIELD 0,63
+
+
+// Pin Release.
+#define GPIO_PIN_RELEASE 0x1008
+
+#define GPIO_PIN_RELEASE__REL_SHIFT 0
+#define GPIO_PIN_RELEASE__REL_WIDTH 64
+#define GPIO_PIN_RELEASE__REL_RMASK _64bit(0xffffffffffffffff)
+#define GPIO_PIN_RELEASE__REL_MASK  _64bit(0xffffffffffffffff)
+#define GPIO_PIN_RELEASE__REL_FIELD 0,63
+
+
+// Pin Set.
+#define GPIO_PIN_SET 0x1020
+
+#define GPIO_PIN_SET__SET_SHIFT 0
+#define GPIO_PIN_SET__SET_WIDTH 64
+#define GPIO_PIN_SET__SET_RMASK _64bit(0xffffffffffffffff)
+#define GPIO_PIN_SET__SET_MASK  _64bit(0xffffffffffffffff)
+#define GPIO_PIN_SET__SET_FIELD 0,63
+
+
+// Pin State.
+#define GPIO_PIN_STATE 0x1000
+
+#define GPIO_PIN_STATE__STATE_SHIFT 0
+#define GPIO_PIN_STATE__STATE_WIDTH 64
+#define GPIO_PIN_STATE__STATE_RMASK _64bit(0xffffffffffffffff)
+#define GPIO_PIN_STATE__STATE_MASK  _64bit(0xffffffffffffffff)
+#define GPIO_PIN_STATE__STATE_FIELD 0,63
+
+
+// Scratchpad.
+#define GPIO_SCRATCHPAD 0x0020
+
+#define GPIO_SCRATCHPAD__SCRATCHPAD_SHIFT 0
+#define GPIO_SCRATCHPAD__SCRATCHPAD_WIDTH 64
+#define GPIO_SCRATCHPAD__SCRATCHPAD_RMASK _64bit(0xffffffffffffffff)
+#define GPIO_SCRATCHPAD__SCRATCHPAD_MASK  _64bit(0xffffffffffffffff)
+#define GPIO_SCRATCHPAD__SCRATCHPAD_FIELD 0,63
+
+
+// Semaphore0.
+// Semaphore
+#define GPIO_SEMAPHORE0 0x0028
+
+#define GPIO_SEMAPHORE0__VAL_SHIFT 0
+#define GPIO_SEMAPHORE0__VAL_WIDTH 1
+#define GPIO_SEMAPHORE0__VAL_RMASK 0x1
+#define GPIO_SEMAPHORE0__VAL_MASK  0x1
+#define GPIO_SEMAPHORE0__VAL_FIELD 0,0
+
+
+// Semaphore1.
+// Semaphore
+#define GPIO_SEMAPHORE1 0x0030
+
+#define GPIO_SEMAPHORE1__VAL_SHIFT 0
+#define GPIO_SEMAPHORE1__VAL_WIDTH 1
+#define GPIO_SEMAPHORE1__VAL_RMASK 0x1
+#define GPIO_SEMAPHORE1__VAL_MASK  0x1
+#define GPIO_SEMAPHORE1__VAL_FIELD 0,0
+
+
+#endif /* !defined(__ARCH_GPIO_DEF_H__) */
+
+#endif /* !defined(__DOXYGEN__) */
diff -Naur linux-4.10.1-orig/arch/tile/include/arch/gpio.h linux-4.10.1/arch/tile/include/arch/gpio.h
--- linux-4.10.1-orig/arch/tile/include/arch/gpio.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-4.10.1/arch/tile/include/arch/gpio.h	2017-09-22 10:31:26.000000000 -0400
@@ -0,0 +1,3934 @@
+/*
+ * Copyright 2011 Tilera Corporation. All Rights Reserved.
+ *
+ *   This program is free software; you can redistribute it and/or
+ *   modify it under the terms of the GNU General Public License
+ *   as published by the Free Software Foundation, version 2.
+ *
+ *   This program is distributed in the hope that it will be useful, but
+ *   WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, GOOD TITLE or
+ *   NON INFRINGEMENT.  See the GNU General Public License for
+ *   more details.
+ */
+
+#ifndef __DOXYGEN__
+
+#ifndef __ARCH_GPIO_H__
+#define __ARCH_GPIO_H__
+
+#include <arch/abi.h>
+#include <arch/gpio_def.h>
+
+#ifndef __ASSEMBLER__
+
+
+// MMIO Address Space.
+// The MMIO physical address space for the USB is described below.  This is a
+// general description of the MMIO space as opposed to a register description
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // This field of the address provides an offset into the region being
+    // accessed.
+    uint_reg_t offset       : 16;
+    // Reserved.
+    uint_reg_t __reserved_0 : 21;
+    // This field of the address indexes the 8 entry service domain table.
+    uint_reg_t svc_dom      : 3;
+    // Reserved.
+    uint_reg_t __reserved_1 : 24;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved_1 : 24;
+    uint_reg_t svc_dom      : 3;
+    uint_reg_t __reserved_0 : 21;
+    uint_reg_t offset       : 16;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_MMIO_ADDRESS_SPACE_t;
+
+
+// Clock Count.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // When 1, the counter is running.  Cleared by HW once count is complete.
+    //  When written with a 1, the count sequence is restarted.  Counter runs
+    // automatically after reset.  Software must poll until this bit is zero,
+    // then read the CLOCK_COUNT register again to get the final COUNT value.
+    uint_reg_t run        : 1;
+    // Indicates the number of core clocks that were counted during 1000
+    // device clock periods.  Result is accurate to within +/-1 core clock
+    // periods.
+    uint_reg_t count      : 15;
+    // Reserved.
+    uint_reg_t __reserved : 48;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 48;
+    uint_reg_t count      : 15;
+    uint_reg_t run        : 1;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_CLOCK_COUNT_t;
+
+
+// Device Control.
+// This register provides general device control.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Reserved.
+    uint_reg_t __reserved_0    : 2;
+    // When 1, packets sent on the RDN will be routed x-first.  When 0,
+    // packets will be routed y-first.  This setting must match the setting
+    // in the Tiles.  Devices may have additional interfaces with customized
+    // route-order settings used in addition to or instead of this field.
+    uint_reg_t rdn_route_order : 1;
+    // When 1, packets sent on the SDN will be routed x-first.  When 0,
+    // packets will be routed y-first.  This setting must match the setting
+    // in the Tiles.  Devices may have additional interfaces with customized
+    // route-order settings used in addition to or instead of this field.
+    uint_reg_t sdn_route_order : 1;
+    // Reserved.
+    uint_reg_t __reserved_1    : 60;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved_1    : 60;
+    uint_reg_t sdn_route_order : 1;
+    uint_reg_t rdn_route_order : 1;
+    uint_reg_t __reserved_0    : 2;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_DEV_CTL_t;
+
+
+// Device Info.
+// This register provides general information about the device attached to
+// this port and channel.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Encoded device Type - 32 to indicate GPIO
+    uint_reg_t type         : 12;
+    // Reserved.
+    uint_reg_t __reserved_0 : 4;
+    // Device revision ID.
+    uint_reg_t device_rev   : 8;
+    // Register format architectural revision.
+    uint_reg_t register_rev : 4;
+    // Reserved.
+    uint_reg_t __reserved_1 : 4;
+    // Instance ID for multi-instantiatiated devices.
+    uint_reg_t instance     : 4;
+    // Reserved.
+    uint_reg_t __reserved_2 : 28;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved_2 : 28;
+    uint_reg_t instance     : 4;
+    uint_reg_t __reserved_1 : 4;
+    uint_reg_t register_rev : 4;
+    uint_reg_t device_rev   : 8;
+    uint_reg_t __reserved_0 : 4;
+    uint_reg_t type         : 12;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_DEV_INFO_t;
+
+
+// GPIO Clock Mode.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Clock source for the GPIO interface.
+    uint_reg_t cmode        : 1;
+    // Reserved.
+    uint_reg_t __reserved_0 : 7;
+    // clock mux transition pending
+    uint_reg_t trans_pend   : 1;
+    // Reserved.
+    uint_reg_t __reserved_1 : 3;
+    // Number of extra gclk cycles per IO drive/sample cycle.  0 indicates
+    // drive/sample every cycle.  1 indicates 1 extra cycle so 2 gclks per
+    // drive/sample etc.
+    uint_reg_t divide       : 20;
+    // Reserved.
+    uint_reg_t __reserved_2 : 32;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved_2 : 32;
+    uint_reg_t divide       : 20;
+    uint_reg_t __reserved_1 : 3;
+    uint_reg_t trans_pend   : 1;
+    uint_reg_t __reserved_0 : 7;
+    uint_reg_t cmode        : 1;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_GCLK_MODE_t;
+
+
+// Bindings for interrupt vectors.
+// This register provides read/write access to all of the interrupt bindings
+// for the GPIO controller.  The VEC_SEL field is used to select the vector
+// being configured and the BIND_SEL selects the interrupt within the vector.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Enable the interrupt.  When 0, the interrupt won't be dispatched,
+    // however the STATUS bit will continue to be updated.
+    uint_reg_t enable       : 1;
+    // When 1, interrupt will be dispatched each time it occurs.  When 0, the
+    // interrupt is only sent if the status bit is clear.
+    uint_reg_t mode         : 1;
+    // Tile targetted for this interrupt in {x[3:0],y[3:0]} format.
+    uint_reg_t tileid       : 8;
+    // Interrupt number to be delivered to Tile
+    uint_reg_t int_num      : 2;
+    // Event number to be delivered to Tile
+    uint_reg_t evt_num      : 5;
+    // Reserved.
+    uint_reg_t __reserved_0 : 15;
+    // Selects vector whose bindings are to be accessed.
+    uint_reg_t vec_sel      : 1;
+    // Reserved.
+    uint_reg_t __reserved_1 : 7;
+    // Selects binding within the vector selected by VEC_SEL.
+    uint_reg_t bind_sel     : 6;
+    // Reserved.
+    uint_reg_t __reserved_2 : 2;
+    // When written with a 1, the interrupt binding data will not be
+    // modified.  Set this when writing the VEC_SEL and BIND_SEL fields in
+    // preperation for a read.
+    uint_reg_t nw           : 1;
+    // Reserved.
+    uint_reg_t __reserved_3 : 15;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved_3 : 15;
+    uint_reg_t nw           : 1;
+    uint_reg_t __reserved_2 : 2;
+    uint_reg_t bind_sel     : 6;
+    uint_reg_t __reserved_1 : 7;
+    uint_reg_t vec_sel      : 1;
+    uint_reg_t __reserved_0 : 15;
+    uint_reg_t evt_num      : 5;
+    uint_reg_t int_num      : 2;
+    uint_reg_t tileid       : 8;
+    uint_reg_t mode         : 1;
+    uint_reg_t enable       : 1;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_INT_BIND_t;
+
+
+// Memory Info.
+// This register provides information about memory setup required for this
+// device.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Each bit represents a request (QDN) port on the tile fabric.  Bit[15]
+    // represents the QDN port used for device configuration and is always
+    // set for devices implemented on channel-0.  Bit[14] is the 1st port
+    // clockwise from the port used to access configuration space.  Bit[13]
+    // is the 2nd port in the clockwise direction.  Bit[16] is the 1st port
+    // counter-clockwise from the port used to access configuration space.
+    // When a bit is set, the device has a QDN port at the associated
+    // location.  For devices using a nonzero channel, this register may
+    // return all zeros.
+    uint_reg_t req_ports    : 32;
+    // Number of hash-for-home tables that must be configured for this
+    // channel.
+    uint_reg_t num_hfh_tbl  : 4;
+    // Reserved.
+    uint_reg_t __reserved_0 : 4;
+    // Number of ASIDS supported if this device has an IO TLB (othewise this
+    // field is zero).
+    uint_reg_t num_asids    : 8;
+    // Number of IO TLB entries per ASID.
+    uint_reg_t num_tlb_ent  : 8;
+    // Reserved.
+    uint_reg_t __reserved_1 : 8;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved_1 : 8;
+    uint_reg_t num_tlb_ent  : 8;
+    uint_reg_t num_asids    : 8;
+    uint_reg_t __reserved_0 : 4;
+    uint_reg_t num_hfh_tbl  : 4;
+    uint_reg_t req_ports    : 32;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_MEM_INFO_t;
+
+
+// MMIO Error Information.
+// Provides diagnostics information when an MMIO error occurs.  Captured
+// whenever the MMIO_ERR interrupt condition occurs
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Source Tile in {x[3:0],y[3:0]} format.
+    uint_reg_t src        : 8;
+    // Encoded request size.  0=1B, 1=2B, 2=4B, 3=8B, 4=16B, 5=32B, 6=48B,
+    // 7=64B.  MMIO operations to GPIO must always be 8 bytes.
+    uint_reg_t size       : 4;
+    // Full PA from request.
+    uint_reg_t pa         : 40;
+    // Opcode of request.  MMIO supports only MMIO_READ (0x0e) and MMIO_WRITE
+    // (0x0f).  All others are reserved and will only occur on a
+    // misconfigured TLB.
+    uint_reg_t opc        : 5;
+    // Reserved.
+    uint_reg_t __reserved : 7;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 7;
+    uint_reg_t opc        : 5;
+    uint_reg_t pa         : 40;
+    uint_reg_t size       : 4;
+    uint_reg_t src        : 8;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_MMIO_ERROR_INFO_t;
+
+
+// MMIO Info.
+// This register provides information about how the physical address is
+// interpretted by the IO device.  The PA is divided into
+// {CHANNEL,SVC_DOM,IGNORED,REGION,OFFSET}.  The values in this register
+// define the size of each of these fields.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Number of bits of channel specifier for all channels.   The MSBs of
+    // the physical addrress are interpretted as {channel, service-domain}
+    uint_reg_t ch_width      : 4;
+    // Number of channels associated with this IO port.
+    uint_reg_t num_ch        : 15;
+    // Number of bits of service-domain specifier for this channel.   The
+    // MSBs of the physical addrress are interpretted as {channel,
+    // service-domain}
+    uint_reg_t svc_dom_width : 3;
+    // Number of service domains associated with this channel.
+    uint_reg_t num_svc_dom   : 7;
+    // Size of the OFFSET field for this channel.  The LSBs of the physical
+    // address are interpretted as {REGION,OFFSET}
+    uint_reg_t offset_width  : 6;
+    // Size of the REGION field for this channel.  The LSBs of the physical
+    // address are interpretted as {REGION,OFFSET}
+    uint_reg_t region_width  : 6;
+    // Reserved.
+    uint_reg_t __reserved    : 23;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved    : 23;
+    uint_reg_t region_width  : 6;
+    uint_reg_t offset_width  : 6;
+    uint_reg_t num_svc_dom   : 7;
+    uint_reg_t svc_dom_width : 3;
+    uint_reg_t num_ch        : 15;
+    uint_reg_t ch_width      : 4;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_MMIO_INFO_t;
+
+
+// MMIO Service Domain Configuration.
+// Initialization control for the MMIO service domain table
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Index into service domain table.
+    uint_reg_t idx        : 4;
+    // Reserved.
+    uint_reg_t __reserved : 60;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 60;
+    uint_reg_t idx        : 4;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_MMIO_INIT_CTL_t;
+
+
+// MMIO service domain table data.
+// Read/Write data for the service domain table.  Each time this register is
+// read or written, MMIO_INIT_CTL.IDX is incremented.
+
+__extension__
+typedef union
+{
+  // Service domain table data.  Contents may be either MMIO_INIT_DAT_0 or
+  // MMIO_INIT_DAT_1, depending on the IDX value in MMIO_INIT_CTL.
+  uint_reg_t dat;
+  uint_reg_t word;
+} GPIO_MMIO_INIT_DAT_t;
+
+
+// MMIO service domain table data - low word.
+// Read/Write data for the service domain table.  Each time this register is
+// read or written, MMIO_INIT_CTL.IDX is incremented.  Each entry consists of
+// two words, addressed by MMIO_INIT_CTL.IDX[0].  Each bit in an entry
+// corresponds to a service or set of services.  A set bit allows access to
+// that service for MMIO accesses that address this service domain table
+// entry.
+
+__extension__
+typedef union
+{
+  // A set bit allows access to the corresponding GPIO pin. If access is
+  // disabled, the pin will read as 0 and no transitions will be detected.
+  // All output or drive enable to a disabled pin will be ignored.
+  uint_reg_t pin_enable;
+  uint_reg_t word;
+} GPIO_MMIO_INIT_DAT_0_t;
+
+
+// MMIO service domain table data - high word.
+// Read/Write data for the service domain table.  Each time this register is
+// read or written, MMIO_INIT_CTL.IDX is incremented.  Each entry consists of
+// two words, addressed by MMIO_INIT_CTL.IDX[0].  Each bit in an entry
+// corresponds to a service or set of services.  A set bit allows access to
+// that service for MMIO accesses that address this service domain table
+// entry.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // This field indicates the maximum protection level allowed for
+    // configuration access.  2/3 allows access to all registers.  1 blocks
+    // access to level 2.  0 blocks access to levels 1 and 2.
+    uint_reg_t cfg_prot_level : 3;
+    // Reserved.
+    uint_reg_t __reserved     : 61;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved     : 61;
+    uint_reg_t cfg_prot_level : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_MMIO_INIT_DAT_1_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_1_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_10_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_11_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_12_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_13_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_14_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_15_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_16_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_17_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_18_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_19_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_2_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_20_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_21_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_22_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_23_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_24_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_25_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_26_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_27_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_28_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_29_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_3_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_30_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_31_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_32_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_33_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_34_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_35_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_36_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_37_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_38_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_39_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_4_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_40_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_41_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_42_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_43_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_44_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_45_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_46_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_47_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_48_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_49_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_5_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_50_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_51_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_52_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_53_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_54_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_55_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_56_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_57_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_58_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_59_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_6_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_60_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_61_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_62_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_63_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_7_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_8_t;
+
+
+// Pad Electrical Controls.
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // Drive strength.
+    // 0 = tristate
+    // 1 = 2ma
+    // 2 = 4ma
+    // 3 = 6ma
+    // 4 = 8ma
+    // 5 = 10ma
+    // 6 = 12ma
+    // 7 = RESERVED
+    uint_reg_t strength   : 3;
+    // 1: Enable sustain (keeper), requires about 100 uA to flip the state
+    // 0: no keeper
+    uint_reg_t sus        : 1;
+    // Slew rate control
+    // 00 = slowest
+    // 11 = fastest
+    uint_reg_t sl         : 2;
+    // 1: enable pull-up resistor
+    uint_reg_t pu         : 1;
+    // 1: enable pull-down resistor
+    uint_reg_t pd         : 1;
+    // Schmitt trigger select
+    // 0: no Schmitt trigger
+    // 1: Schmitt trigger
+    uint_reg_t schm       : 1;
+    // Reserved.
+    uint_reg_t __reserved : 55;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 55;
+    uint_reg_t schm       : 1;
+    uint_reg_t pd         : 1;
+    uint_reg_t pu         : 1;
+    uint_reg_t sl         : 2;
+    uint_reg_t sus        : 1;
+    uint_reg_t strength   : 3;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_PAD_CONTROL_9_t;
+
+
+// Pin Clr.
+
+__extension__
+typedef union
+{
+  // Writing a 1 to a bit will deassert the output pin.  Pin will remain
+  // deasserted until a new value is supplied or RELEASE.
+  uint_reg_t clr;
+  uint_reg_t word;
+} GPIO_PIN_CLR_t;
+
+
+// Pin Direction Input.
+
+__extension__
+typedef union
+{
+  // Pin n direction is controlled by PIN_DIR_O[n] and PIN_DIR_I[n], encoded
+  // as:
+  // 00b=Disabled
+  // 01b=Input mode. Disable the output driver
+  // 10b=Output mode.  Drive pin to logic level specified by data assertion
+  // state and output inversion. When the pin is released, then the output
+  // will be tristated
+  // 11b=Open-drain mode.  Drive low on pin when state is asserted, and
+  // disable driver when state is deasserted
+  uint_reg_t i;
+  uint_reg_t word;
+} GPIO_PIN_DIR_I_t;
+
+
+// Pin Direction Output.
+
+__extension__
+typedef union
+{
+  // Pin n direction is controlled by PIN_DIR_O[n] and PIN_DIR_I[0], encoded
+  // as:
+  // 00b=Disabled
+  // 01b=Input mode. Disable the output driver
+  // 10b=Output mode.  Drive pin to logic level specified by data assertion
+  // state and output inversion. When the pin is released, then the output
+  // will be tristated
+  // 11b=Open-drain mode.  Drive low on pin when state is asserted, and
+  // disable driver when state is deasserted
+  uint_reg_t o;
+  uint_reg_t word;
+} GPIO_PIN_DIR_O_t;
+
+
+// Input Mask Condition.
+
+__extension__
+typedef union
+{
+  // Each bit corresponds to a GPIO pin.  When 0, the GPIO value is sampled
+  // even when being driven as an output.  When 1, the GPIO value is only
+  // sampled if the pin is configured as an input or an open-drain that is
+  // not currently being driven. This filter applies to interrupts as well.
+  uint_reg_t cnd;
+  uint_reg_t word;
+} GPIO_PIN_INPUT_CND_t;
+
+
+// Input Inversion Mode.
+
+__extension__
+typedef union
+{
+  // Each bit corresponds to a GPIO pin.  When 0, the input value read is 1
+  // when the pin logic level is high.  When 1, the input value read is 1
+  // when the pin logic level is low. The interrupt detection logic also
+  // receives the conditionally inverted input value.
+  uint_reg_t inv;
+  uint_reg_t word;
+} GPIO_PIN_INPUT_INV_t;
+
+
+// Input Mask.
+
+__extension__
+typedef union
+{
+  // Each bit corresponds to a GPIO pin.  When 0, reads of the PIN_STATE will
+  // return the input data for this pin.  When 1, reads of the PIN_STATE
+  // register will return 0.
+  uint_reg_t msk;
+  uint_reg_t word;
+} GPIO_PIN_INPUT_MSK_t;
+
+
+// Input Sync Mode.
+
+__extension__
+typedef union
+{
+  // Each bit corresponds to a GPIO pin.  When 0, the input pin value is
+  // sampled directly.  When 1, the input pin is synchronized through a
+  // double-rank synchronizer to prevent metastable data.
+  uint_reg_t sync;
+  uint_reg_t word;
+} GPIO_PIN_INPUT_SYNC_t;
+
+
+// Output Inversion Mode.
+
+__extension__
+typedef union
+{
+  // Each bit corresponds to a GPIO pin.  When 0 an asserted pin will
+  // correspond to a high logic level, and when 1 an asserted pin will
+  // correspond to a low logic level. This bit affects only the output
+  // inversion; input inversion is specified by PIN_INPUT_INV.
+  uint_reg_t inv;
+  uint_reg_t word;
+} GPIO_PIN_OUTPUT_INV_t;
+
+
+// Output Mask.
+
+__extension__
+typedef union
+{
+  // Each bit corresponds to a GPIO pin. When the bit is 0 then writes to
+  // PIN_STATE register for this bit will be processed normally. When the bit
+  // is 1, writes to the PIN_STATE register for this bit will be ignored and
+  // the drive level will not be modified.
+  uint_reg_t msk;
+  uint_reg_t word;
+} GPIO_PIN_OUTPUT_MSK_t;
+
+
+// Output Toggle.
+
+__extension__
+typedef union
+{
+  // Each bit corresponds to a GPIO pin. When the bit is written with 0 the
+  // pin output data will be unchanged. When the bit is written with 1, the
+  // pin output data will toggled. TGL changes the assertion state of the
+  // data, which is then modified by INV to determine pin logic levels.
+  uint_reg_t tgl;
+  uint_reg_t word;
+} GPIO_PIN_OUTPUT_TGL_t;
+
+
+// Pin Pulse Clear.
+
+__extension__
+typedef union
+{
+  // Writing a 1 to a bit will deassert the output pin for a single time
+  // slice.  Pins configured as outputs will return to the previous output
+  // drive state and drive value after 1 time slice.
+  uint_reg_t pulse_clr;
+  uint_reg_t word;
+} GPIO_PIN_PULSE_CLR_t;
+
+
+// Pin Pulse Set.
+
+__extension__
+typedef union
+{
+  // Writing a 1 to a bit will assert the output pin for a single time slice.
+  //  Pins configured as outputs will return to the previous output drive
+  // state and drive value after 1 time slice.
+  uint_reg_t pulse_set;
+  uint_reg_t word;
+} GPIO_PIN_PULSE_SET_t;
+
+
+// Pin Release.
+
+__extension__
+typedef union
+{
+  // Writing a 1 to a bit will disable the output driver for enabled pins.
+  uint_reg_t rel;
+  uint_reg_t word;
+} GPIO_PIN_RELEASE_t;
+
+
+// Pin Set.
+
+__extension__
+typedef union
+{
+  // Writing a 1 to a bit will assert the output pin.  Pin will remain
+  // asserted until a new value is supplied or RELEASE.
+  uint_reg_t set;
+  uint_reg_t word;
+} GPIO_PIN_SET_t;
+
+
+// Pin State.
+
+__extension__
+typedef union
+{
+  // When read, returns the pin state after conditional inversion controlled
+  // by PIN_INPUT_INV for all enabled pins and 0 for all disabled pins. Pins
+  // are enabled for read if the bit is set in SVC_DOM PIN_ENABLE field and
+  // clear in the PIN_INPUT_MSK. When written, the value will be modified by
+  // PIN_OUTPUT_INV and will be driven on the enabled output pins. Pins are
+  // enabled for output if the SVC_DOM PIN_ENABLE field is set, PIN_DIR_O is
+  // set, and the PIN_OUTPUT_MSK is clear.
+  uint_reg_t state;
+  uint_reg_t word;
+} GPIO_PIN_STATE_t;
+
+
+// Semaphore0.
+// Semaphore
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // When read, the current semaphore value is returned and the semaphore
+    // is set to 1.  Bit can also be written to 1 or 0.
+    uint_reg_t val        : 1;
+    // Reserved.
+    uint_reg_t __reserved : 63;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 63;
+    uint_reg_t val        : 1;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_SEMAPHORE0_t;
+
+
+// Semaphore1.
+// Semaphore
+
+__extension__
+typedef union
+{
+  struct
+  {
+#ifndef __BIG_ENDIAN__
+    // When read, the current semaphore value is returned and the semaphore
+    // is set to 1.  Bit can also be written to 1 or 0.
+    uint_reg_t val        : 1;
+    // Reserved.
+    uint_reg_t __reserved : 63;
+#else   // __BIG_ENDIAN__
+    uint_reg_t __reserved : 63;
+    uint_reg_t val        : 1;
+#endif
+  };
+
+  uint_reg_t word;
+} GPIO_SEMAPHORE1_t;
+
+
+#endif /* !defined(__ASSEMBLER__) */
+
+#endif /* !defined(__ARCH_GPIO_H__) */
+
+#endif /* !defined(__DOXYGEN__) */
diff -Naur linux-4.10.1-orig/arch/tile/include/asm/rb.h linux-4.10.1/arch/tile/include/asm/rb.h
--- linux-4.10.1-orig/arch/tile/include/asm/rb.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-4.10.1/arch/tile/include/asm/rb.h	2017-09-22 10:31:26.000000000 -0400
@@ -0,0 +1,76 @@
+#ifndef _RB_H
+#define _RB_H
+
+#define ID_MAC_ADDRESS_PACK     0x00000004
+#define ID_BOARD_NAME           0x00000005
+#define ID_HW_OPTIONS           0x00000015
+#define ID_BOARD_TYPE_NAME      0x00000017
+
+#define HW_OPT_HAS_uSD		(1 << 17)
+#define HW_OPT_HAS_SIM		(1 << 18)
+
+#define MMC_PINS		(0x3FULL << 54)
+
+#define GPO_SD_PWR		(1ULL << 53)
+#define GPO_USB_POWER		(1ULL << 47)
+#define GPO_BEEP		(1ULL << 15)
+#define GPO_USER_LED		(1ULL << 14)
+#define GPO_FAN_ON(x)		(1ULL << ((x == 0) ? 10 : 61))
+#define GPO_MON_SEL		(1ULL << 8)
+#define GPO_MON_SEL72		(1ULL << 16)
+#define GPO_LCD_LED	        (1ULL << 3)
+
+#define GPI_SD_CDn		(1ULL << 52)
+#define GPI_BUTTON		(1ULL << 17)
+#define GPI_PIN_HOLE		(1ULL << 16)
+
+#define GPIO_SIM_IO		(1ULL << 38)
+#define GPO_SIM_CLK		(1ULL << 39)
+#define GPO_SIM_RST		(1ULL << 40)
+#define GPO_SIM_EN		(1ULL << 41)
+#define GPO_SIM_3V_1V8n		(1ULL << 42)
+
+#define GPI_PR_MISO		(1ULL << 8)
+#define GPO_PR_STROBE1		(1ULL << 9)
+#define GPO_PR_STROBE2		(1ULL << 34)
+#define GPO_PR_CLK		(1ULL << 10)
+#define GPO_PR_MOSI		(1ULL << 11)
+#define GPO_AUX_RESET		(1ULL << 13)
+
+#define RST_I2C			BIT(2)
+#define RST_LED			BIT(8)
+#define RST_LCD			BIT(10)
+#define RST_ETH			BIT(11)
+#define RST_PCI			BIT(1) | BIT(9)
+#define RST_USB			BIT(12) | BIT(13)
+
+// GPI_SENSE(1) == GPIO9
+// GPI_SENSE(2) == GPIO11
+#define GPI_SENSE(x)		(1ULL << (7 + ((x) << 1)))
+
+struct sim_gpio {
+    unsigned long long io;
+    unsigned long long clk;
+    unsigned long long rst;
+    unsigned long long en;
+    unsigned long long vsel;
+};
+
+int nor_read(void *buf, int count, unsigned long offset);
+int read_booter_cfg(unsigned id, void *buf, int amount);
+int nor_program(void *buf, int count, unsigned long offset);
+void set_gpio(unsigned long value, unsigned long mask);
+unsigned long gpio_irq_refresh(unsigned long pin);
+void gpio_irq(unsigned irq, unsigned long pin);
+int is_name_prefix(char *str);
+int is_board_type(char *str);
+void ccr_deassert_usb_reset(unsigned i);
+unsigned long get_gpio(void);
+int fan_sense_count(void);
+unsigned long fan_sense_gpios(void);
+void usb_power_enable(void);
+
+unsigned long access_latch(int num, unsigned long value, unsigned long mask);
+
+#endif
+
diff -Naur linux-4.10.1-orig/arch/tile/include/gxio/gpio.h linux-4.10.1/arch/tile/include/gxio/gpio.h
--- linux-4.10.1-orig/arch/tile/include/gxio/gpio.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-4.10.1/arch/tile/include/gxio/gpio.h	2017-09-22 10:31:26.000000000 -0400
@@ -0,0 +1,492 @@
+/*
+ * Copyright 2013 Tilera Corporation. All Rights Reserved.
+ *
+ *   This program is free software; you can redistribute it and/or
+ *   modify it under the terms of the GNU General Public License
+ *   as published by the Free Software Foundation, version 2.
+ *
+ *   This program is distributed in the hope that it will be useful, but
+ *   WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, GOOD TITLE or
+ *   NON INFRINGEMENT.  See the GNU General Public License for
+ *   more details.
+ */
+#ifndef _GXIO_GPIO_H_
+#define _GXIO_GPIO_H_
+
+#include <gxio/common.h>
+
+#include <arch/gpio.h>
+
+#include <hv/drv_gpio_gxio_intf.h>
+#include <hv/iorpc.h>
+
+/*
+ *
+ * An API for manipulating general-purpose I/O pins.
+ */
+
+/*
+ *
+ * The GPIO shim allows access to the processor's general purpose I/O pins.
+ * These pins are normally used for low-speed devices like switches and
+ * indicators, or to perform board functions such as device reset or
+ * interrupt notification.  GPIO pins can also be used for moderate-speed
+ * data transfer, emulating a low-speed communications bus via software
+ * control.
+ *
+ * The gxio_gpio API, declared in <gxio/gpio.h>, allows applications to
+ * allocate particular GPIO pins, then assert, deassert, or sense the state
+ * of those pins.  The API is designed to be a minimal wrapper around the
+ * GPIO hardware, making system calls only for configuration purposes.
+ *
+ * We strongly recommend reading the GPIO section of the IO Device Guide
+ * (UG404) before working with this API.  Most functions in the gxio_gpio
+ * API are directly analogous to hardware interfaces, and the documentation
+ * assumes that the reader understands those hardware interfaces.  Proper
+ * configuration and use of GPIO pins generally requires knowledge of
+ * specific details of the system design, such as might be found in the
+ * hardware reference manual or board schematics.  Note that in many
+ * systems, a subset of the available pins are used for board control
+ * purposes and are not available via the gxio_gpio API.
+ */
+
+/* A context object used to manage GPIO hardware resources. */
+typedef struct {
+
+	/* File descriptor for calling up to Linux (and thus the HV). */
+	int fd;
+
+	/* The VA at which our MMIO registers are mapped. */
+	char *mmio_base;
+} gxio_gpio_context_t;
+
+/* Initialize a GPIO context.
+ *
+ *  A properly initialized context must be obtained before any of the other
+ *  gxio_gpio routines may be used.
+ *
+ * @param context Pointer to a gxio_gpio_context_t, which will be initialized
+ *  by this routine, if it succeeds.
+ * @param gpio_index Index of the GPIO shim to use.
+ * @return Zero if the context was successfully initialized, else a
+ *  GXIO_ERR_xxx error code.
+ */
+extern int gxio_gpio_init(gxio_gpio_context_t * context, int gpio_index);
+
+/* Destroy a GPIO context.
+ *
+ *  Once destroyed, a context may not be used with any gxio_gpio routines
+ *  other than gxio_gpio_init().  After this routine returns, no further
+ *  interrupts requested on this context will be delivered.  The state and
+ *  configuration of the pins which had been attached to this context are
+ *  unchanged by this operation.
+ *
+ * @param context Pointer to a gxio_gpio_context_t.
+ * @return Zero if the context was successfully destroyed, else a
+ *  GXIO_ERR_xxx error code.
+ */
+extern int gxio_gpio_destroy(gxio_gpio_context_t * context);
+
+/* Request control of a set of GPIO pins.
+ *
+ *  This routine must be called before any pin state can be sensed or
+ *  modified.  Attempts to set, clear, or sense the state of pins which
+ *  have not been attached to via this routine will fail silently.
+ *  Attempts to reconfigure pins which have not been attached to via this
+ *  routine will return an error.
+ *
+ * @param context Pointer to a properly initialized gxio_gpio_context_t.
+ * @param pin_mask Mask of pins to be associated with this context.  If
+ *  more than one successful call to this routine is made, the set of pins
+ *  attached will be those specified on the last successful call; in other
+ *  words, this routine does not add to the set of attached pins, it
+ *  defines that set.
+ * @return Zero if all of the requested pins were available and were
+ *  successfully associated with this context.  If any of the requested pins
+ *  are not available for use, either ::GXIO_GPIO_ERR_PINS_UNAVAIL
+ *  or ::GXIO_GPIO_ERR_PINS_BUSY will be returned, and the set of pins
+ *  attached to this context will remain unchanged.
+ */
+extern int gxio_gpio_attach(gxio_gpio_context_t * context, uint64_t pin_mask);
+
+/* Return the current state of a context's attached GPIO pins.
+ *
+ * @param context Pointer to a properly initialized gxio_gpio_context_t.
+ * @return Mask of pin state.  Normally, a pin's bit is 1 if and only if
+ *  it is an input pin and it is asserted.  gxio_gpio_set_input_inv() can
+ *  invert input pins, and gxio_gpio_set_in_cnd() can cause pins to be
+ *  sampled even if they are configured as outputs.
+ */
+extern uint64_t gxio_gpio_get(gxio_gpio_context_t * context);
+
+/* Set the output state of some of a context's attached GPIO pins.
+ *
+ * @param context Pointer to a properly initialized gxio_gpio_context_t.
+ * @param pins Mask specifying the new output state for the pins to be
+ *  modified.  By default, a 1 here means that the output signal is asserted;
+ *  this can be reversed for certain pins with gxio_gpio_set_out_inv().
+ * @param mask Mask specifying which pins' state is modified; if a pin's
+ *  bit is off in this mask, its output state is unchanged.
+ */
+extern void gxio_gpio_set(gxio_gpio_context_t * context, uint64_t pins,
+			  uint64_t mask);
+
+/* Toggle (invert) the output state of some of a context's attached GPIO
+ *  pins.
+ *
+ * @param context Pointer to a properly initialized gxio_gpio_context_t.
+ * @param pins Mask specifying which pins should have their output states
+ *  toggled.
+ */
+extern void gxio_gpio_toggle(gxio_gpio_context_t * context, uint64_t pins);
+
+/* Assert some of a context's attached GPIO output pins for one
+ *  GPIO clock cycle.
+ *
+ * @param context Pointer to a properly initialized gxio_gpio_context_t.
+ * @param pins Mask specifying which pins should have their output states
+ *  temporarily asserted.
+ */
+extern void gxio_gpio_pulse_assert(gxio_gpio_context_t * context,
+				   uint64_t pins);
+
+/* Deassert some of a context's attached GPIO output pins for one
+ *  GPIO clock cycle.
+ *
+ * @param context Pointer to a properly initialized gxio_gpio_context_t.
+ * @param pins Mask specifying which pins should have their output states
+ *  temporarily deasserted.
+ */
+extern void gxio_gpio_pulse_deassert(gxio_gpio_context_t * context,
+				     uint64_t pins);
+
+/* Release some of a context's attached GPIO output pins.
+ *
+ *  Any pin whose bit is set in the supplied pin mask will be tri-stated,
+ *  ignoring the current output state.  A subsequent call to this routine
+ *  which clears that bit in the pin mask will resume that pin's output.
+ *
+ * @param context Pointer to a properly initialized gxio_gpio_context_t.
+ * @param pins Mask specifying which pins should have their output states
+ *  tri-stated.
+ */
+extern void gxio_gpio_release(gxio_gpio_context_t * context, uint64_t pins);
+
+/* Retrieve the current electrical settings for one of a context's
+ *  attached GPIO pins.
+ *
+ * @param context Pointer to a properly initialized gxio_gpio_context_t.
+ * @param pin Number of the pin whose settings should be retrieved.
+ * @param pad_ctl On successful return, current settings for the specified pin.
+ * @return Zero if the settings were retrieved successfully; a nonzero error
+ *  code if the process had not successfully attached to the relevant pin.
+ */
+extern int gxio_gpio_get_elec(gxio_gpio_context_t * context, unsigned int pin,
+			      GPIO_PAD_CONTROL_t * pad_ctl);
+
+/* Change the current electrical settings for one of a context's
+ *  attached GPIO pins.
+ *
+ * @param context Pointer to a properly initialized gxio_gpio_context_t.
+ * @param pin Number of the pin whose settings should be changed.
+ * @param pad_ctl New settings for the specified pin.
+ * @return Zero if the register was updated successfully; a nonzero error
+ *  code if the process had not successfully attached to the relevant pin,
+ *  or if the specific parameters are found to be outside acceptable limits.
+ */
+extern int gxio_gpio_set_elec(gxio_gpio_context_t * context, unsigned int pin,
+			      GPIO_PAD_CONTROL_t pad_ctl);
+
+/* Retrieve the current clock settings for a context's GPIO shim.
+ *
+ * @param context Pointer to a properly initialized gxio_gpio_context_t.
+ * @param gclk_mode On successful return, current clock settings.
+ * @return Zero if the settings were retrieved successfully; a nonzero error
+ *  code otherwise.
+ */
+extern int gxio_gpio_get_gclk_mode(gxio_gpio_context_t * context,
+				   GPIO_GCLK_MODE_t * gclk_mode);
+
+/* Change the current clock settings for a context's GPIO shim.
+ *
+ * @param context Pointer to a properly initialized gxio_gpio_context_t.
+ * @param gclk_mode New settings for the shim.
+ * @return Zero if the register was updated successfully; a nonzero error
+ *  code if the process is not allowed to update this register, or if
+ *  the specific parameters are found to be outside acceptable limits.
+ */
+extern int gxio_gpio_set_gclk_mode(gxio_gpio_context_t * context,
+				   GPIO_GCLK_MODE_t gclk_mode);
+
+/* Retrieve the current output inversion settings for a context's
+ *  attached GPIO pins.
+ *
+ * @param context Pointer to a properly initialized gxio_gpio_context_t.
+ * @return Mask of current settings for the pins; 1 if a pin's output
+ *  state is inverted.
+ */
+extern uint64_t gxio_gpio_get_out_inv(gxio_gpio_context_t * context);
+
+/* Change the current output inversion settings for a context's
+ *  attached GPIO pins.
+ *
+ * @param context Pointer to a properly initialized gxio_gpio_context_t.
+ * @param pins Mask of new settings for the pins; 1 if a pin's output
+ *  state is to be inverted.
+ */
+extern void gxio_gpio_set_out_inv(gxio_gpio_context_t * context,
+				  uint64_t pins);
+
+/* Retrieve the current input inversion settings for a context's
+ *  attached GPIO pins.
+ *
+ * @param context Pointer to a properly initialized gxio_gpio_context_t.
+ * @return Mask of current settings for the pins; 1 if a pin's input
+ *  state is inverted.
+ */
+extern uint64_t gxio_gpio_get_in_inv(gxio_gpio_context_t * context);
+
+/* Change the current input inversion settings for a context's
+ *  attached GPIO pins.
+ *
+ * @param context Pointer to a properly initialized gxio_gpio_context_t.
+ * @param pins Mask of new settings for the pins; 1 if a pin's input
+ *  state is to be inverted.
+ */
+extern void gxio_gpio_set_in_inv(gxio_gpio_context_t * context, uint64_t pins);
+
+/* Retrieve the current output mask settings for a context's attached
+ *  GPIO pins.
+ *
+ * @param context Pointer to a properly initialized gxio_gpio_context_t.
+ * @return Mask of current settings for the pins; 1 if a pin's output
+ *  state is masked.  The output state of masked pins is not affected
+ *  by calls to gxio_gpio_set().
+ */
+extern uint64_t gxio_gpio_get_out_mask(gxio_gpio_context_t * context);
+
+/* Change the current output mask settings for a context's
+ *  attached GPIO pins.
+ *
+ * @param context Pointer to a properly initialized gxio_gpio_context_t.
+ * @param pins Mask of new settings for the pins; 1 if a pin's output
+ *  state is to be masked.  The output state of masked pins is not affected
+ *  by calls to gxio_gpio_set().
+ */
+extern void gxio_gpio_set_out_mask(gxio_gpio_context_t * context,
+				   uint64_t pins);
+
+/* Retrieve the current input mask settings for a context's attached
+ *  GPIO pins.
+ *
+ * @param context Pointer to a properly initialized gxio_gpio_context_t.
+ * @return Mask of current settings for the pins; 1 if a pin's input
+ *  state is masked.  The input state of masked pins is not reflected
+ *  in the result of gxio_gpio_get(); masked pins always return zero.
+ */
+extern uint64_t gxio_gpio_get_in_mask(gxio_gpio_context_t * context);
+
+/* Change the current input mask settings for a context's
+ *  attached GPIO pins.
+ *
+ * @param context Pointer to a properly initialized gxio_gpio_context_t.
+ * @param pins Mask of new settings for the pins; 1 if a pin's input
+ *  state is to be masked.  The input state of masked pins is not reflected
+ *  in the result of gxio_gpio_get(); masked pins always return zero.
+ */
+extern void gxio_gpio_set_in_mask(gxio_gpio_context_t * context,
+				  uint64_t pins);
+
+/* Retrieve the current input synchronization settings for a context's
+ *  attached GPIO pins.
+ *
+ * @param context Pointer to a properly initialized gxio_gpio_context_t.
+ * @return Mask of current settings for the pins; 1 if a pin's input
+ *  state is synchronized.
+ */
+extern uint64_t gxio_gpio_get_in_sync(gxio_gpio_context_t * context);
+
+/* Change the current input synchronization settings for a context's
+ *  attached GPIO pins.
+ *
+ * @param context Pointer to a properly initialized gxio_gpio_context_t.
+ * @param pins Mask of new settings for the pins; 1 if a pin's input
+ *  state is to be synchronized.
+ */
+extern void gxio_gpio_set_in_sync(gxio_gpio_context_t * context,
+				  uint64_t pins);
+
+/* Retrieve the current input sampling settings for a context's
+ *  attached GPIO pins.
+ *
+ * @param context Pointer to a properly initialized gxio_gpio_context_t.
+ * @return Mask of current settings for the pins; 1 if a pin's state
+ *  state is sampled even when it is configured as an output.
+ */
+extern uint64_t gxio_gpio_get_in_cnd(gxio_gpio_context_t * context);
+
+/* Change the current input sampling settings for a context's
+ *  attached GPIO pins.
+ *
+ * @param context Pointer to a properly initialized gxio_gpio_context_t.
+ * @param pins Mask of new settings for the pins; 1 if a pin's state
+ *  state is to be sampled even when it is configured as an output.
+ */
+extern void gxio_gpio_set_in_cnd(gxio_gpio_context_t * context, uint64_t pins);
+
+/* Retrieve the current input/output settings for a context's GPIO pins.
+ *
+ * @param context Pointer to a properly initialized gxio_gpio_context_t.
+ * @param disabled_pins Pointer to a pin mask.  Upon return, this mask
+ *  will contain a 1 bit corresponding to each pin which is disabled.
+ * @param input_pins Pointer to a pin mask.  Upon return, this mask
+ *  will contain a 1 bit corresponding to each pin which is configured
+ *  as an input pin.
+ * @param output_pins Pointer to a pin mask.  Upon return, this mask
+ *  will contain a 1 bit corresponding to each pin which is configured
+ *  as an output pin.
+ * @param output_od_pins Pointer to a pin mask.  Upon return, this mask
+ *  will contain a 1 bit corresponding to each pin which is configured
+ *  as an open-drain output pin.
+ */
+extern int gxio_gpio_get_dir(gxio_gpio_context_t * context,
+			     uint64_t *disabled_pins, uint64_t *input_pins,
+			     uint64_t *output_pins, uint64_t *output_od_pins);
+
+/* Modify the current input/output settings for a context's GPIO pins.
+ *
+ *  The settings for pins not specified in any mask are unchanged.  If pins
+ *  are specified in more than one mask, the behavior is undefined.
+ *
+ * @param context Pointer to a properly initialized gxio_gpio_context_t.
+ * @param disabled_pins Mask of pins which should be disabled.
+ * @param input_pins Mask of pins to be configured for input.
+ * @param output_pins Mask of pins to be configured for output.
+ * @param output_od_pins Mask of pins to be configured for open-drain output.
+ */
+extern int gxio_gpio_set_dir(gxio_gpio_context_t * context,
+			     uint64_t disabled_pins, uint64_t input_pins,
+			     uint64_t output_pins, uint64_t output_od_pins);
+
+/* Request GPIO pin interrupts.
+ *
+ *  Request that interrupts be delivered to a tile when input pins attached
+ *  to a context are asserted and/or deasserted.  Once such an interrupt is
+ *  delivered for a specific pin, that specific interrupt will no longer be
+ *  delivered for that pin until gxio_gpio_reset_interrupt() is called.
+ *  The same GPIO pin and assertion/deassertion status may not be
+ *  concurrently specified in more than one of gxio_gpio_cfg_interrupt() or
+ *  gxio_gpio_cfgpoll(); attempts to do so will cause undefined results.
+ *
+ * @param context Pointer to a properly initialized gxio_gpio_context_t.
+ * @param target_x X coordinate of interrupt target tile.
+ * @param target_y Y coordinate of interrupt target tile.
+ * @param target_ipi Index of the IPI register which will receive the
+ *  interrupt.
+ * @param target_event Specific event which will be set in the target IPI
+ *  register when the interrupt occurs.  If this event is -1, then the
+ *  interrupt events specified in on_assert/on_deassert will be disabled
+ *  for the specified pins.
+ * @param on_assert Mask of pins whose assertion will cause this interrupt.
+ *  If more than one successful call to this routine is made, the set of
+ *  pins which interrupt is the union of those specified on all successful
+ *  calls.
+ * @param on_deassert Mask of pins whose deassertion will cause this
+ *  interrupt.  If more than one successful call to this routine is made,
+ *  the set of pins which interrupt is the union of those specified on all
+ *  successful calls.
+ * @return Zero if all of the requested pins were successfully configured
+ *  to interrupt.  If any of the requested pins are not attached to this
+ *  context, GXIO_GPIO_ERR_PINS_UNAVAIL will be returned, and no pins'
+ *  interrupt state will be changed.
+ */
+extern int gxio_gpio_cfg_interrupt(gxio_gpio_context_t * context,
+				   int target_x, int target_y,
+				   int target_ipi, int target_event,
+				   uint64_t on_assert, uint64_t on_deassert);
+
+/* Report GPIO pin interrupts.
+ *
+ *  Retrieve the interrupt state of all GPIO pins.  This can be useful in
+ *  determining which pin caused an interrupt when multiple pins are
+ *  associated with the same target event.  Note that the current state of
+ *  the pin may have changed since the interrupt occurred.  Note also that
+ *  even after this routine has noted that a pin caused an interrupt, until
+ *  the interrupt status is reset with gxio_gpio_reset_interrupt() or
+ *  gxio_gpio_report_reset_interrupt(), subsequent calls to this routine
+ *  will continue to report that pin as having caused an interrupt.
+ *
+ * @param context Pointer to a properly initialized gxio_gpio_context_t.
+ * @param asserted Pointer to a mask which will be written with the set of
+ *  pins which have interrupted due to pin assertion and whose interrupt
+ *  status has not been reset.  May be NULL if no information on assertion
+ *  interrupts is desired.
+ * @param deasserted Pointer to a mask which will be written with the set of
+ *  pins which have interrupted due to pin deassertion and whose interrupt
+ *  status has not been reset.  May be NULL if no information on deassertion
+ *  interrupts is desired.
+ */
+extern void gxio_gpio_report_interrupt(gxio_gpio_context_t * context,
+				       uint64_t *asserted,
+				       uint64_t *deasserted);
+
+/* Report and reenable GPIO pin interrupts.
+ *
+ *  Retrieve the interrupt state of all GPIO pins, and reenable interrupts
+ *  on pins which had previously caused an interrupt.  This can be useful
+ *  in determining which pin caused an interrupt when multiple pins are
+ *  associated with the same target event.  Note that the current state
+ *  of the pin may have changed since the interrupt occurred.
+ *
+ * @param context Pointer to a properly initialized gxio_gpio_context_t.
+ * @param asserted Pointer to a mask which will be written with the set of
+ *  pins which have interrupted due to pin assertion and whose interrupt
+ *  status has not been reset.  May be NULL if no information on assertion
+ *  interrupts is desired; in this case, no assertion interrupts will be
+ *  reenabled, even if some have occurred.
+ * @param deasserted Pointer to a mask which will be written with the set of
+ *  pins which have interrupted due to pin deassertion and whose interrupt
+ *  status has not been reset.  May be NULL if no information on deassertion
+ *  interrupts is desired; in this case, no deassertion interrupts will be
+ *  reenabled, even if some have occurred.
+ */
+extern void gxio_gpio_report_reset_interrupt(gxio_gpio_context_t * context,
+					     uint64_t *asserted,
+					     uint64_t *deasserted);
+
+/* Reenable GPIO pin interrupts.
+ *
+ *  Request that interrupts be reenabled for a context's attached GPIO
+ *  pins.  As noted in gxio_gpio_cfg_interrupt(), interrupts are one-time
+ *  events; once a pin assertion or deassertion has produced an interrupt,
+ *  subsequent occurrences of the same event will not produce an interrupt
+ *  until it has been reenabled.
+ *
+ * @param context Pointer to a properly initialized gxio_gpio_context_t.
+ * @param en_assert Mask of pins for which the assertion interrupt
+ *  should be enabled.
+ * @param en_deassert Mask of pins for which the deassertion interrupt
+ *  should be enabled.
+ */
+extern void gxio_gpio_reset_interrupt(gxio_gpio_context_t * context,
+				      uint64_t en_assert,
+				      uint64_t en_deassert);
+
+/* Look up a named set of GPIO pins.
+ *
+ *  Names are system-dependent, but are generally hierarchical; for
+ *  instance, "panel/led/0" might be the pin connected to the first
+ *  front-panel LED, while "IDE/0/data" might be the pins on the
+ *  data bus for IDE slot 0.
+ *
+ * @param context Pointer to a properly initialized gxio_gpio_context_t.
+ * @param name Name for the target GPIO pins.
+ * @return Mask of pins associated with the given name.  If the name is
+ *  unknown, then zero is returned.
+ */
+extern uint64_t gxio_gpio_pins_get_mask(gxio_gpio_context_t * context,
+					char *name);
+
+#endif /* _GXIO_GPIO_H_ */
+
diff -Naur linux-4.10.1-orig/arch/tile/include/gxio/iorpc_gpio.h linux-4.10.1/arch/tile/include/gxio/iorpc_gpio.h
--- linux-4.10.1-orig/arch/tile/include/gxio/iorpc_gpio.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-4.10.1/arch/tile/include/gxio/iorpc_gpio.h	2017-09-22 10:31:26.000000000 -0400
@@ -0,0 +1,81 @@
+/*
+ * Copyright 2013 Tilera Corporation. All Rights Reserved.
+ *
+ *   This program is free software; you can redistribute it and/or
+ *   modify it under the terms of the GNU General Public License
+ *   as published by the Free Software Foundation, version 2.
+ *
+ *   This program is distributed in the hope that it will be useful, but
+ *   WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, GOOD TITLE or
+ *   NON INFRINGEMENT.  See the GNU General Public License for
+ *   more details.
+ */
+
+/* This file is machine-generated; DO NOT EDIT! */
+#ifndef __GXIO_GPIO_LINUX_RPC_H__
+#define __GXIO_GPIO_LINUX_RPC_H__
+
+#include <hv/iorpc.h>
+
+#include <gxio/gpio.h>
+#include <gxio/kiorpc.h>
+#include <linux/string.h>
+#include <linux/module.h>
+#include <asm/pgtable.h>
+
+#define GXIO_GPIO_OP_ATTACH            IORPC_OPCODE(IORPC_FORMAT_NONE, 0x1600)
+#define GXIO_GPIO_OP_GET_DIR           IORPC_OPCODE(IORPC_FORMAT_NONE, 0x1601)
+#define GXIO_GPIO_OP_SET_DIR           IORPC_OPCODE(IORPC_FORMAT_NONE, 0x1602)
+#define GXIO_GPIO_OP_GET_ELEC          IORPC_OPCODE(IORPC_FORMAT_NONE, 0x1603)
+#define GXIO_GPIO_OP_SET_ELEC          IORPC_OPCODE(IORPC_FORMAT_NONE, 0x1604)
+#define GXIO_GPIO_OP_GET_GCLK_MODE     IORPC_OPCODE(IORPC_FORMAT_NONE, 0x1605)
+#define GXIO_GPIO_OP_SET_GCLK_MODE     IORPC_OPCODE(IORPC_FORMAT_NONE, 0x1606)
+#define GXIO_GPIO_OP_CFG_INTERRUPT     IORPC_OPCODE(IORPC_FORMAT_KERNEL_INTERRUPT, 0x1607)
+#define GXIO_GPIO_OP_CFG_POLLFD        IORPC_OPCODE(IORPC_FORMAT_KERNEL_POLLFD_SETUP, 0x1608)
+#define GXIO_GPIO_OP_ARM_POLLFD        IORPC_OPCODE(IORPC_FORMAT_KERNEL_POLLFD, 0x9000)
+#define GXIO_GPIO_OP_CLOSE_POLLFD      IORPC_OPCODE(IORPC_FORMAT_KERNEL_POLLFD, 0x9001)
+#define GXIO_GPIO_OP_GET_MMIO_BASE     IORPC_OPCODE(IORPC_FORMAT_NONE_NOUSER, 0x8000)
+#define GXIO_GPIO_OP_CHECK_MMIO_OFFSET IORPC_OPCODE(IORPC_FORMAT_NONE_NOUSER, 0x8001)
+
+int gxio_gpio_attach(gxio_gpio_context_t * context, uint64_t pin_mask);
+
+int gxio_gpio_get_dir(gxio_gpio_context_t * context, uint64_t *disabled_pins,
+		      uint64_t *input_pins, uint64_t *output_pins,
+		      uint64_t *output_od_pins);
+
+int gxio_gpio_set_dir(gxio_gpio_context_t * context, uint64_t disabled_pins,
+		      uint64_t input_pins, uint64_t output_pins,
+		      uint64_t output_od_pins);
+
+int gxio_gpio_get_elec(gxio_gpio_context_t * context, unsigned int pin,
+		       GPIO_PAD_CONTROL_t * pad_ctl);
+
+int gxio_gpio_set_elec(gxio_gpio_context_t * context, unsigned int pin,
+		       GPIO_PAD_CONTROL_t pad_ctl);
+
+int gxio_gpio_get_gclk_mode(gxio_gpio_context_t * context,
+			    GPIO_GCLK_MODE_t * gclk_mode);
+
+int gxio_gpio_set_gclk_mode(gxio_gpio_context_t * context,
+			    GPIO_GCLK_MODE_t gclk_mode);
+
+int gxio_gpio_cfg_interrupt(gxio_gpio_context_t * context, int inter_x,
+			    int inter_y, int inter_ipi, int inter_event,
+			    uint64_t on_assert, uint64_t on_deassert);
+
+int gxio_gpio_cfg_pollfd(gxio_gpio_context_t * context, int inter_x,
+			 int inter_y, int inter_ipi, int inter_event,
+			 uint64_t on_assert, uint64_t on_deassert);
+
+int gxio_gpio_arm_pollfd(gxio_gpio_context_t * context, int pollfd_cookie);
+
+int gxio_gpio_close_pollfd(gxio_gpio_context_t * context, int pollfd_cookie);
+
+int gxio_gpio_get_mmio_base(gxio_gpio_context_t * context, HV_PTE *base);
+
+int gxio_gpio_check_mmio_offset(gxio_gpio_context_t * context,
+				unsigned long offset, unsigned long size);
+
+#endif /* !__GXIO_GPIO_LINUX_RPC_H__ */
+
diff -Naur linux-4.10.1-orig/arch/tile/include/gxio/iorpc_mpipe.h linux-4.10.1/arch/tile/include/gxio/iorpc_mpipe.h
--- linux-4.10.1-orig/arch/tile/include/gxio/iorpc_mpipe.h	2017-02-26 05:09:33.000000000 -0500
+++ linux-4.10.1/arch/tile/include/gxio/iorpc_mpipe.h	2017-09-22 10:31:26.000000000 -0400
@@ -46,6 +46,12 @@
 #define GXIO_MPIPE_OP_LINK_CLOSE_AUX   IORPC_OPCODE(IORPC_FORMAT_NONE, 0x1212)
 #define GXIO_MPIPE_OP_LINK_SET_ATTR_AUX IORPC_OPCODE(IORPC_FORMAT_NONE, 0x1213)
 
+#define GXIO_MPIPE_OP_LINK_GET_ATTR_AUX IORPC_OPCODE(IORPC_FORMAT_NONE, 0x1214)
+#define GXIO_MPIPE_OP_LINK_MDIO_RD_AUX IORPC_OPCODE(IORPC_FORMAT_NONE, 0x1215)
+#define GXIO_MPIPE_OP_LINK_MDIO_WR_AUX IORPC_OPCODE(IORPC_FORMAT_NONE, 0x1216)
+#define GXIO_MPIPE_OP_LINK_MAC_RD_AUX  IORPC_OPCODE(IORPC_FORMAT_NONE, 0x1217)
+#define GXIO_MPIPE_OP_LINK_MAC_WR_AUX  IORPC_OPCODE(IORPC_FORMAT_NONE, 0x1218)
+
 #define GXIO_MPIPE_OP_GET_TIMESTAMP_AUX IORPC_OPCODE(IORPC_FORMAT_NONE, 0x121e)
 #define GXIO_MPIPE_OP_SET_TIMESTAMP_AUX IORPC_OPCODE(IORPC_FORMAT_NONE, 0x121f)
 #define GXIO_MPIPE_OP_ADJUST_TIMESTAMP_AUX IORPC_OPCODE(IORPC_FORMAT_NONE, 0x1220)
@@ -120,6 +126,21 @@
 int gxio_mpipe_link_set_attr_aux(gxio_mpipe_context_t *context, int mac,
 				 uint32_t attr, int64_t val);
 
+int gxio_mpipe_link_get_attr_aux(gxio_mpipe_context_t *context,
+                                 unsigned int off, int64_t *data);
+
+int gxio_mpipe_link_mdio_rd_aux(gxio_mpipe_context_t *context, int mac, int phy,
+                                int dev, int addr);
+
+int gxio_mpipe_link_mdio_wr_aux(gxio_mpipe_context_t *context, int mac, int phy,
+                                int dev, int addr, uint16_t val);
+
+int gxio_mpipe_link_mac_rd_aux(gxio_mpipe_context_t *context, unsigned int off,
+                               int64_t *data);
+
+int gxio_mpipe_link_mac_wr_aux(gxio_mpipe_context_t *context, int mac, int addr,
+                               uint32_t val);
+
 int gxio_mpipe_get_timestamp_aux(gxio_mpipe_context_t *context, uint64_t *sec,
 				 uint64_t *nsec, uint64_t *cycles);
 
diff -Naur linux-4.10.1-orig/arch/tile/include/gxio/mpipe.h linux-4.10.1/arch/tile/include/gxio/mpipe.h
--- linux-4.10.1-orig/arch/tile/include/gxio/mpipe.h	2017-02-26 05:09:33.000000000 -0500
+++ linux-4.10.1/arch/tile/include/gxio/mpipe.h	2017-09-22 10:31:26.000000000 -0400
@@ -1818,6 +1818,12 @@
 extern int gxio_mpipe_link_set_attr(gxio_mpipe_link_t *link, uint32_t attr,
 				    int64_t val);
 
+
+int gxio_mpipe_link_mdio_rd(gxio_mpipe_link_t *link, int phy, int dev, int addr);
+int gxio_mpipe_link_mdio_wr(gxio_mpipe_link_t *link, int phy, int dev, int addr, uint16_t val);
+int gxio_mpipe_link_mac_rd(gxio_mpipe_link_t *link, int addr, int64_t *data);
+int gxio_mpipe_link_mac_wr(gxio_mpipe_link_t *link, int addr, uint32_t val);
+
 ///////////////////////////////////////////////////////////////////
 //                             Timestamp                         //
 ///////////////////////////////////////////////////////////////////
diff -Naur linux-4.10.1-orig/arch/tile/include/hv/drv_gpio_gxio_intf.h linux-4.10.1/arch/tile/include/hv/drv_gpio_gxio_intf.h
--- linux-4.10.1-orig/arch/tile/include/hv/drv_gpio_gxio_intf.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-4.10.1/arch/tile/include/hv/drv_gpio_gxio_intf.h	2017-09-22 10:31:26.000000000 -0400
@@ -0,0 +1,40 @@
+/*
+ * Copyright 2011 Tilera Corporation. All Rights Reserved.
+ *
+ *   This program is free software; you can redistribute it and/or
+ *   modify it under the terms of the GNU General Public License
+ *   as published by the Free Software Foundation, version 2.
+ *
+ *   This program is distributed in the hope that it will be useful, but
+ *   WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, GOOD TITLE or
+ *   NON INFRINGEMENT.  See the GNU General Public License for
+ *   more details.
+ */
+
+/**
+ * @file drv_gpio_gxio_intf.h
+ * Interface definitions for the GPIO driver.
+ */
+
+#ifndef _SYS_HV_DRV_GPIO_GXIO_INTF_H
+#define _SYS_HV_DRV_GPIO_GXIO_INTF_H
+
+#include <arch/gpio.h>
+
+#ifndef __DOXYGEN_API_REF__
+
+/** Offset for the register MMIO region. */
+#define HV_GPIO_MMIO_OFFSET(svc_dom)     \
+   ((uint64_t) (svc_dom) << GPIO_MMIO_ADDRESS_SPACE__SVC_DOM_SHIFT)
+
+/** Size of the register MMIO region. */
+#define HV_GPIO_MMIO_SIZE ((uint64_t) 1 << \
+                           GPIO_MMIO_ADDRESS_SPACE__OFFSET_WIDTH)
+
+/** The number of service domains supported by the GPIO shim. */
+#define HV_GPIO_NUM_SVC_DOM 8
+
+#endif /* !__DOXYGEN_API_REF__ */
+
+#endif /* _SYS_HV_DRV_GPIO_GXIO_INTF_H */
diff -Naur linux-4.10.1-orig/arch/tile/include/hv/drv_i2cm_intf.h linux-4.10.1/arch/tile/include/hv/drv_i2cm_intf.h
--- linux-4.10.1-orig/arch/tile/include/hv/drv_i2cm_intf.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-4.10.1/arch/tile/include/hv/drv_i2cm_intf.h	2017-09-22 10:31:26.000000000 -0400
@@ -0,0 +1,79 @@
+/*
+ * Copyright 2011 Tilera Corporation. All Rights Reserved.
+ *
+ *   This program is free software; you can redistribute it and/or
+ *   modify it under the terms of the GNU General Public License
+ *   as published by the Free Software Foundation, version 2.
+ *
+ *   This program is distributed in the hope that it will be useful, but
+ *   WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, GOOD TITLE or
+ *   NON INFRINGEMENT.  See the GNU General Public License for
+ *   more details.
+ */
+
+/**
+ * @file drv_i2cm_intf.h
+ * Interface definitions for the I2CM driver.
+ *
+ * The I2C Master interface driver provides a manner for supervisors to
+ * access the I2C devices on the I2C bus.
+ *
+ * When the supervisor issues an I2C data transaction, it stores the i2c
+ * device slave address and the data offset within the device in the offset
+ * of the HV I2C device handle. The low half-word contains the slave address
+ * while the data offset is stored in byte 2 and 3. For the write access,
+ * the first 1 or 2 bytes of the write data contain the device data address
+ * if the data offset field of the HV device handle offset is 0; otherwise,
+ * the write data are pure data payload. For the read access, it is always
+ * preceded by a dummy write access which should contain an either 1-byte or
+ * 2-byte device data address while the read message holds no addressing
+ * information.
+ */
+
+#ifndef _SYS_HV_INCLUDE_DRV_I2CM_INTF_H
+#define _SYS_HV_INCLUDE_DRV_I2CM_INTF_H
+
+/** Number of possible I2C master shims. */
+#ifdef __tilegx__
+#define HV_I2CM_MAX_MASTERS 3
+#else
+#define HV_I2CM_MAX_MASTERS 1
+#endif
+
+/** Maximum size of an HV I2C transfer. */
+#define HV_I2CM_CHUNK_SIZE 128
+
+/** Length of the i2c device name. */
+#define I2C_DEV_NAME_SIZE   20
+
+/** I2C device descriptor, to be exported to the client OS. */
+typedef struct
+{
+  char name[I2C_DEV_NAME_SIZE];   /**< Device name, e.g. "24c512". */
+  uint32_t addr;                  /**< I2C device slave address */
+}
+tile_i2c_desc_t;
+
+/** Get the number of i2c devices. Read-only, takes a 4-byte value. */
+#define I2C_GET_NUM_DEVS_OFF   0xF0000000
+
+/** Get i2c device info. Read-only, takes an array of tile_i2c_desc_t's. */
+#define I2C_GET_DEV_INFO_OFF   0xF0000004
+
+/** This structure is used to encode the I2C device slave address
+ *  and the chip data offset and is passed to the HV in the offset
+ *  of the i2cm HV device file.
+ */
+typedef union
+{
+  struct
+  {
+    uint32_t addr:8;               /**< I2C device slave address */
+    uint32_t data_offset:24;       /**< I2C device data offset */
+  };
+  uint32_t word;                   /**< 32-bit hypervisor offset value */
+}
+tile_i2c_addr_desc_t;
+
+#endif /* _SYS_HV_INCLUDE_DRV_I2CM_INTF_H */
diff -Naur linux-4.10.1-orig/arch/tile/Kbuild linux-4.10.1/arch/tile/Kbuild
--- linux-4.10.1-orig/arch/tile/Kbuild	2017-02-26 05:09:33.000000000 -0500
+++ linux-4.10.1/arch/tile/Kbuild	2017-09-22 10:31:25.000000000 -0400
@@ -1,3 +1,4 @@
 
 obj-y += kernel/
 obj-y += mm/
+obj-y += rb/
diff -Naur linux-4.10.1-orig/arch/tile/rb/Makefile linux-4.10.1/arch/tile/rb/Makefile
--- linux-4.10.1-orig/arch/tile/rb/Makefile	1969-12-31 19:00:00.000000000 -0500
+++ linux-4.10.1/arch/tile/rb/Makefile	2017-09-22 10:31:28.000000000 -0400
@@ -0,0 +1 @@
+obj-y += setup.o
diff -Naur linux-4.10.1-orig/arch/tile/rb/setup.c linux-4.10.1/arch/tile/rb/setup.c
--- linux-4.10.1-orig/arch/tile/rb/setup.c	1969-12-31 19:00:00.000000000 -0500
+++ linux-4.10.1/arch/tile/rb/setup.c	2017-09-22 10:31:28.000000000 -0400
@@ -0,0 +1,565 @@
+#include <linux/mmc/host.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/delay.h>
+#include <linux/interrupt.h>
+#include <linux/platform_device.h>
+#include <linux/spi/spi.h>
+#include <linux/gpio.h>
+#include <linux/irq.h>
+#include <asm/io.h>
+#include <asm/rb.h>
+#include <gxio/gpio.h>
+
+#include <hv/drv_srom_intf.h>
+
+static int devhdl = -1;
+static DEFINE_SPINLOCK(nor_lock);
+
+static unsigned long mmc_pins = MMC_PINS;
+static unsigned long gpi_sd_cdn = GPI_SD_CDn;
+static unsigned long gpo_sd_pwr = GPO_SD_PWR;
+
+#define FN_ARG int (*fn)(int, __hv32, HV_VirtAddr, __hv32, __hv64)
+
+static int nor_fn(void *buf, int count, unsigned long offset, FN_ARG) {
+    int retval;
+    int retries = 1000;
+    unsigned long flags;
+
+    spin_lock_irqsave(&nor_lock, flags);
+    for (;;) {
+	retval = fn(devhdl, 0, (HV_VirtAddr) buf, count, offset);
+	if (retval == HV_EBUSY && --retries > 0) {
+	    mdelay(20);
+	    continue;
+	}
+	else if (retval < 0) {
+	    continue;
+	}
+	else break;
+    }
+    spin_unlock_irqrestore(&nor_lock, flags);
+
+    return retval;
+}  
+
+int nor_read(void *buf, int count, unsigned long offset) {
+    return nor_fn(buf, count, offset, hv_dev_pread);
+}  
+EXPORT_SYMBOL(nor_read);
+
+static int nor_write(void *buf, int count, unsigned long offset) {
+    return nor_fn(buf, count, offset, hv_dev_pwrite);
+}
+
+int nor_program(void *buf, int count, unsigned long offset) {
+    char dummy;
+    int retval;
+    retval = nor_write(buf, count, offset);
+    nor_write(&dummy, 1, SROM_FLUSH_OFF);
+    return retval;
+}
+EXPORT_SYMBOL(nor_program);
+
+static unsigned read_unsigned(unsigned *offset) {
+    unsigned val = 0;
+    nor_read(&val, sizeof(unsigned), *offset);
+    *offset += sizeof(unsigned);
+    return val;    
+}
+
+int read_booter_cfg(unsigned id, void *buf, int amount) {
+    unsigned offset = 0x30000;
+    if (read_unsigned(&offset) != 0x64726148) return 0;
+    while (offset < 0x31000) {
+	unsigned data = read_unsigned(&offset);
+	unsigned tag = data & 0xffff;	
+	int len = data >> 16;	
+	if (len == 0 || len > 0x1000 || tag == 0) {
+	    break;
+	} else if (tag == id) {
+	    amount = min(len, amount);
+	    nor_read(buf, amount, offset);
+	    return amount;
+	}
+	offset = offset + len;
+    }
+    return 0;
+}
+EXPORT_SYMBOL(read_booter_cfg);
+
+static struct hrtimer beep_timer;
+static unsigned beep_interval = 0;
+static gxio_gpio_context_t gpio_ctx;
+
+void set_gpio(unsigned long value, unsigned long mask) {
+    gxio_gpio_set(&gpio_ctx, value, mask);
+}
+EXPORT_SYMBOL(set_gpio);
+
+unsigned long get_gpio(void) {
+    return gxio_gpio_get(&gpio_ctx);
+}
+EXPORT_SYMBOL(get_gpio);
+
+static enum hrtimer_restart beep_callback(struct hrtimer *t) {
+    static unsigned state = 1;
+    set_gpio((state = !state) ? GPO_BEEP : 0, GPO_BEEP);
+    hrtimer_forward_now(&beep_timer, ns_to_ktime(beep_interval));
+    return HRTIMER_RESTART;
+}
+
+void router_beep(int freq) {
+    unsigned long flags;
+    printk("tile_beep: %d\n", freq);
+
+    spin_lock_irqsave(&nor_lock, flags);
+    if (freq > 0) {
+        beep_interval = 1000000000 / (2 * freq);
+        hrtimer_start(&beep_timer, ns_to_ktime(0), HRTIMER_MODE_REL_PINNED);
+    }
+    else {
+        hrtimer_cancel(&beep_timer);
+	gxio_gpio_set(&gpio_ctx, 0, GPO_BEEP);
+    }
+    spin_unlock_irqrestore(&nor_lock, flags);
+}
+EXPORT_SYMBOL(router_beep);
+
+static spinlock_t latch_lock;
+static unsigned hw_options = 0;
+
+int ccr_init(void) {
+    char name[64];
+    spin_lock_init(&latch_lock);
+    devhdl = hv_dev_open((HV_VirtAddr) "srom/0/0", 0);
+    read_booter_cfg(ID_BOARD_NAME, name, sizeof(name));
+    read_booter_cfg(ID_HW_OPTIONS, &hw_options, sizeof(unsigned));
+    printk("Hello [%s] HW=%08x\n", name, hw_options);
+    return 0;
+}
+early_initcall(ccr_init);
+
+unsigned long gpio_irq_refresh(unsigned long pin) {
+    uint64_t s1 = pin, s2 = pin;
+    gxio_gpio_report_reset_interrupt(&gpio_ctx, &s1, &s2);
+    return (s1 | s2);
+}
+EXPORT_SYMBOL(gpio_irq_refresh);
+
+void gpio_irq(unsigned irq, unsigned long pin) {
+    int my_cpu = smp_processor_id();
+    int x = cpu_x(my_cpu);
+    int y = cpu_y(my_cpu);
+    gxio_gpio_cfg_interrupt(&gpio_ctx, x, y, KERNEL_PL, irq, pin, pin);
+    gpio_irq_refresh(pin);
+}
+EXPORT_SYMBOL(gpio_irq);
+
+static struct spi_board_info ccr_spi_microsd = {
+	.modalias = "mmc_spi",
+	.max_speed_hz = 10 * 1000 * 1000,
+	.bus_num = 0,
+	.chip_select = 0,
+	.controller_data = (void*)56,
+	.mode = SPI_MODE_3,
+};
+
+static struct spi_board_info *ccr_spi_info[] = {
+	&ccr_spi_microsd, NULL
+};
+
+static struct platform_device tile_mmc_device = {
+	.name	= "ccr-mmc-spi",
+	.id	= -1,
+	.dev	= {
+		.platform_data = ccr_spi_info,
+	},
+};
+
+static struct sim_gpio ccr1009_sim_gpio = {
+	.io	= GPIO_SIM_IO,
+	.clk	= GPO_SIM_CLK,
+	.rst	= GPO_SIM_RST,
+	.en	= GPO_SIM_EN,
+	.vsel	= GPO_SIM_3V_1V8n,
+};
+static struct platform_device ccr1009_sim_device = {
+	.name	= "ccr-sim",
+	.id	= -1,
+	.dev	= {
+		.platform_data = &ccr1009_sim_gpio,
+	},
+};
+
+static struct sim_gpio ccr1072_sim_gpio = {
+	.io	= (1ULL << 35),
+	.clk	= (1ULL << 36),
+	.rst	= (1ULL << 37),
+	.en	= (1ULL << 38),
+	.vsel	= (1ULL << 39),
+};
+static struct platform_device ccr1072_sim_device = {
+	.name	= "ccr-sim",
+	.id	= -1,
+	.dev	= {
+		.platform_data = &ccr1072_sim_gpio,
+	},
+};
+
+static struct platform_device tile_led_device = {
+	.name	= "ccr-led",
+	.id	= -1,
+};
+
+static struct platform_device tile_uart_device = {
+	.name	= "ccr-uart",
+	.id	= -1,
+};
+
+static struct platform_device tile_crypto_device = {
+	.name	= "tile",
+	.id	= -1,
+};
+
+static struct platform_device tile_eth_device = {
+	.name	= "tilegx",
+	.id	= -1,
+};
+
+static struct platform_device *tile_devices[] = {
+	&tile_led_device,
+	&tile_uart_device,
+	&tile_crypto_device,
+	&tile_eth_device,
+};
+
+static struct platform_device *tile_mmc_devices[] = {
+	&tile_mmc_device,
+};
+
+static int tile_gpio_get(struct gpio_chip *chip, unsigned offset) {
+    return (get_gpio() & BIT(offset)) != 0;
+}
+
+static void tile_gpio_set(struct gpio_chip *chip, unsigned offset, int value) {    
+    unsigned long bit = BIT(offset);
+    set_gpio(value ? bit : 0, bit);
+}
+
+static int tile_direction_input(struct gpio_chip *chip, unsigned offset) {
+    gxio_gpio_set_dir(&gpio_ctx, 0, BIT(offset), 0, 0);
+    return 0;
+}
+
+static int tile_direction_output(struct gpio_chip *chip, unsigned offset, int value) {
+    tile_gpio_set(chip, offset, value);
+    gxio_gpio_set_dir(&gpio_ctx, 0, 0, BIT(offset), 0);
+    tile_gpio_set(chip, offset, value);
+    return 0;
+}
+
+static struct gpio_chip tile_gpio_chip = {
+    .label			= "gpio",
+    .direction_input		= tile_direction_input,
+    .direction_output		= tile_direction_output,
+    .set			= tile_gpio_set,
+    .get			= tile_gpio_get,
+    .base			= 0,
+    .ngpio			= 64,
+};
+
+static void micro_sd_power_toggle(void) {
+    int card_in = (get_gpio() & gpi_sd_cdn) == 0;
+    printk("MicroSD power %s\n", card_in ? "on" : "off");
+    set_gpio(card_in ? gpo_sd_pwr : 0, gpo_sd_pwr);
+}
+
+irqreturn_t mmc_cd_irq(int irq, void *ptr) {
+    struct spi_device *spi = ptr;
+    void *mmc_host = dev_get_drvdata(&spi->dev);
+    printk("mmc card detect irq\n");
+    if (gpio_irq_refresh(gpi_sd_cdn) & gpi_sd_cdn && mmc_host) {
+	printk("toggle power and detect\n");
+	micro_sd_power_toggle();
+	mmc_detect_change(mmc_host, msecs_to_jiffies(100));
+    }
+    return IRQ_HANDLED;
+}
+
+void init_ccr_spi(struct spi_master *master) {
+    int irq_num;
+    struct spi_device *spi_dev;
+    spi_dev = spi_new_device(master, &ccr_spi_microsd);
+
+    irq_num = irq_alloc_hwirq(-1);
+    if (irq_num <= 0)
+    {
+        printk("failed to allocate irq for microsd\n");
+        return;
+    }
+    tile_irq_activate(irq_num, TILE_IRQ_PERCPU);
+    if (request_irq(irq_num, &mmc_cd_irq, IRQF_SHARED, "MicroSD", spi_dev)) {
+        printk("failed to request irq for microsd\n");
+	irq_free_hwirq(irq_num);
+	return;
+    }
+    gpio_irq(irq_num, gpi_sd_cdn);
+
+}
+EXPORT_SYMBOL(init_ccr_spi);
+
+static int is_prefix(char *str, char *base) {
+    unsigned len = strlen(str);
+    if (strlen(base) < len) return 0;
+    return (memcmp(base, str, len) == 0) ? 1 : 0;
+}
+
+#define FETCH_NAME(id) \
+    static int fetched = 0; \
+    static char name[64]; \
+    if (!fetched) { \
+	read_booter_cfg(id, name, sizeof(name)); \
+	fetched = 1; \
+    }
+
+int is_name_prefix(char *str) {
+    FETCH_NAME(ID_BOARD_NAME);
+    return is_prefix(str, name);
+}
+EXPORT_SYMBOL(is_name_prefix);
+
+int is_board_type(char *str) {
+    FETCH_NAME(ID_BOARD_TYPE_NAME);
+    return strcmp(str, name) == 0;
+}
+EXPORT_SYMBOL(is_board_type);
+
+int fan_sense_count(void) {
+    return is_board_type("ccr1009c") ? 1 : 2;
+}
+EXPORT_SYMBOL(fan_sense_count);
+
+unsigned long fan_sense_gpios(void) {
+    return GPI_SENSE(1) | (fan_sense_count() < 2 ? 0 : GPI_SENSE(2));
+}
+EXPORT_SYMBOL(fan_sense_gpios);
+
+struct latch_info {
+    unsigned long strobe;
+    unsigned long state;
+    int input;
+    int output;
+};
+
+#define latch_delay() __insn_mf(); ndelay(15)
+unsigned long access_latch(int num, unsigned long value, unsigned long mask) {
+    static struct latch_info info[] = {
+	{ .strobe = GPO_PR_STROBE1,
+	  .state = RST_USB | RST_PCI | RST_ETH | RST_LCD | RST_LED | RST_I2C,
+	  .input = 0,
+	  .output = 16,
+	},
+	{ .strobe = GPO_PR_STROBE2,
+	  .state = 0,
+	  .input = 32,
+	  .output = 40,
+	},
+    };
+
+    int i;
+    unsigned long flags;
+    unsigned long ret = 0;
+    struct latch_info *latch = &info[num];
+    spin_lock_irqsave(&latch_lock, flags);
+    latch->state = (latch->state & ~mask) | (value & mask);
+    set_gpio(0, GPO_AUX_RESET | latch->strobe);
+    for (i = 0; i < latch->output; ++i) {
+	unsigned long pin = (latch->state & (1ULL << i)) ? GPO_PR_MOSI : 0;
+	set_gpio(pin, GPO_PR_MOSI | GPO_PR_CLK);
+	latch_delay();
+	set_gpio(pin | GPO_PR_CLK, GPO_PR_MOSI | GPO_PR_CLK);
+	latch_delay();
+    }
+    set_gpio(latch->strobe, latch->strobe);
+    for (i = 0; i < latch->input; ++i) {
+	set_gpio(0, GPO_PR_CLK);
+	latch_delay();
+	ret = (ret << 1) | ((get_gpio() & GPI_PR_MISO) ? 1 : 0);
+	set_gpio(GPO_PR_CLK, GPO_PR_CLK);
+	latch_delay();
+    }
+    spin_unlock_irqrestore(&latch_lock, flags);
+    return ret;
+}
+EXPORT_SYMBOL(access_latch);
+
+void ccr_deassert_usb_reset(unsigned i) {
+    static int nr[] = { 13, 12 };
+    if (is_name_prefix("CCR1072") && i < ARRAY_SIZE(nr)) {
+	printk("CCR1072: deasserting USB%d reset (pin%d)\n", i, nr[i]);
+	access_latch(0, 0, BIT(nr[i]));
+	udelay(1000);
+    }
+}
+EXPORT_SYMBOL(ccr_deassert_usb_reset);
+
+struct class_attribute_gpio {
+    struct class_attribute class_attr;
+    unsigned long gpio_bit;
+};
+
+static ssize_t show_gpio_state(struct class *class,
+			struct class_attribute *attr,
+			char *output_buffer)
+{
+    struct class_attribute_gpio *info;
+    info = container_of(attr, struct class_attribute_gpio, class_attr);
+    return scnprintf(output_buffer, PAGE_SIZE, "%d\n",
+		     !!(get_gpio() & info->gpio_bit));
+}
+
+static ssize_t store_nothing(struct class *class,
+			     struct class_attribute *attr,
+			     const char *buf, size_t count)
+{
+    return count;
+}
+
+unsigned long add_sysfs_gpio_state_file(struct class *hw_info,
+					const char *filename,
+					int gpio_num) {
+
+	struct class_attribute_gpio *info;
+	info = kmalloc(sizeof(struct class_attribute_gpio), GFP_KERNEL);
+	memset(info, 0, sizeof(struct class_attribute_gpio));
+
+	info->class_attr.attr.name = filename;
+	info->class_attr.attr.mode = S_IWUSR | S_IRUGO;
+	info->class_attr.show = &show_gpio_state;
+	info->class_attr.store = &store_nothing;
+	info->gpio_bit = BIT(gpio_num);
+
+	if (class_create_file(hw_info, &info->class_attr) < 0) {
+	    printk("add_sysfs_gpio_state_file: failed\n");
+	}
+
+	return info->gpio_bit;
+}
+
+unsigned long add_psu_state(unsigned gpio_numA, unsigned gpio_numB) {
+    unsigned long pins = 0;
+    struct class *hw_info = class_create(THIS_MODULE, "hw_info");
+    pins |= add_sysfs_gpio_state_file(hw_info, "psu1_state", gpio_numA);
+    pins |= add_sysfs_gpio_state_file(hw_info, "psu2_state", gpio_numB);
+    return pins;
+}
+
+void usb_power_enable(void) {
+    set_gpio(is_board_type("ccr1009c") ? GPO_USB_POWER : 0, GPO_USB_POWER);
+}
+EXPORT_SYMBOL(usb_power_enable);
+
+int ccr_platform_init(void) {
+    unsigned long in_pins, out_pins, od_pins, all_pins = 0;
+    struct platform_device *pdev_sim = NULL;
+    in_pins = GPI_BUTTON
+	| fan_sense_gpios()
+	| GPI_PIN_HOLE;
+    out_pins = GPO_BEEP
+	| GPO_USER_LED
+	| GPO_MON_SEL
+	| GPO_LCD_LED
+	| GPO_USB_POWER;
+    od_pins = GPO_FAN_ON(0);
+
+    if (is_name_prefix("CCR1036-8G")
+	|| is_name_prefix("CCR1036-12S")
+	|| is_name_prefix("CCR1016-12S")) {
+	od_pins |= GPO_FAN_ON(1);
+    }
+
+    if (is_name_prefix("CCR1072")) {
+	struct spi_board_info **spi_info;
+	in_pins = GPI_PR_MISO | GPI_BUTTON;
+	out_pins = GPO_PR_STROBE1
+	    | GPO_PR_STROBE2
+	    | GPO_PR_CLK
+	    | GPO_PR_MOSI
+	    | GPO_BEEP
+	    | GPO_USER_LED
+	    | GPO_MON_SEL72
+	    | GPO_LCD_LED
+	    | GPO_AUX_RESET;
+
+	gpi_sd_cdn = (1ULL << 40);
+	gpo_sd_pwr = (1ULL << 41);
+	mmc_pins = (0x3FULL << 42);
+
+	tile_mmc_device.name = "ccr-mmc-spi-ccr1072";
+	spi_info = tile_mmc_device.dev.platform_data;
+	spi_info[0]->controller_data = (void *) 44;
+    }
+
+    if (is_name_prefix("CCR1009-8G-1S-1S+")) {
+	in_pins |= add_psu_state(35, 34);
+    }
+
+    if (is_name_prefix("CCR1016-12S-1S+")) {
+	in_pins |= add_psu_state(48, 50);
+    }
+
+    if (hw_options & HW_OPT_HAS_uSD) {
+	in_pins |= gpi_sd_cdn;
+	out_pins |= gpo_sd_pwr;
+	all_pins |= mmc_pins;
+    }
+    if (hw_options & HW_OPT_HAS_SIM) {
+	struct sim_gpio *gpio;
+	pdev_sim = &ccr1009_sim_device;
+	if (is_name_prefix("CCR1072")) pdev_sim = &ccr1072_sim_device;
+
+	gpio = (struct sim_gpio *)pdev_sim->dev.platform_data;
+	od_pins |= gpio->io;
+	out_pins |= gpio->clk | gpio->rst | gpio->en | gpio->vsel;
+    }
+
+    all_pins |= out_pins | in_pins | od_pins;
+
+    gxio_gpio_init(&gpio_ctx, 0);
+    gxio_gpio_attach(&gpio_ctx, all_pins);
+    gxio_gpio_set_dir(&gpio_ctx, 0, in_pins, out_pins, od_pins);
+    usb_power_enable();
+
+    hrtimer_init(&beep_timer, CLOCK_MONOTONIC, HRTIMER_MODE_REL);
+    beep_timer.function = beep_callback;
+    gpiochip_add(&tile_gpio_chip);
+
+    if (hw_options & HW_OPT_HAS_uSD) {
+	printk("CCR with MicroSD slot!\n");
+	set_gpio(0, gpo_sd_pwr);
+	udelay(10000);
+	micro_sd_power_toggle();
+	printk("platfork_add_devices(tile_mmc_devices) = %d\n", platform_add_devices(tile_mmc_devices, ARRAY_SIZE(tile_mmc_devices)));
+    }
+/*
+    if (pdev_sim) {
+	struct sim_gpio *gpio = (struct sim_gpio *)pdev_sim->dev.platform_data;
+	printk("CCR with SIM card slot!\n");
+	set_gpio(gpio->vsel,
+		 gpio->io | gpio->clk | gpio->rst | gpio->en | gpio->vsel);
+	platform_device_register(pdev_sim);
+    }
+*/
+    if (is_name_prefix("CCR1072")) {
+	/* use USB type A connector by default */
+	access_latch(0, BIT(0), BIT(0));
+    }
+
+    return platform_add_devices(tile_devices, ARRAY_SIZE(tile_devices));
+}
+
+arch_initcall(ccr_platform_init);
+
diff -Naur linux-4.10.1-orig/.config linux-4.10.1/.config
--- linux-4.10.1-orig/.config	1969-12-31 19:00:00.000000000 -0500
+++ linux-4.10.1/.config	2018-11-28 05:54:17.814494610 -0500
@@ -0,0 +1,3389 @@
+#
+# Automatically generated file; DO NOT EDIT.
+# Linux/tile 4.10.1 Kernel Configuration
+#
+CONFIG_TILE=y
+CONFIG_MMU=y
+CONFIG_GENERIC_CSUM=y
+CONFIG_HAVE_ARCH_ALLOC_REMAP=y
+CONFIG_HAVE_SETUP_PER_CPU_AREA=y
+CONFIG_NEED_PER_CPU_PAGE_FIRST_CHUNK=y
+CONFIG_SYS_SUPPORTS_HUGETLBFS=y
+CONFIG_HUGETLB_SUPER_PAGES=y
+CONFIG_GENERIC_TIME_VSYSCALL=y
+CONFIG_USE_PMC=y
+CONFIG_RWSEM_GENERIC_SPINLOCK=y
+CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING=y
+CONFIG_ARCH_PHYS_ADDR_T_64BIT=y
+CONFIG_ARCH_DMA_ADDR_T_64BIT=y
+CONFIG_NEED_DMA_MAP_STATE=y
+CONFIG_ARCH_HAS_DMA_SET_COHERENT_MASK=y
+CONFIG_LOCKDEP_SUPPORT=y
+CONFIG_STACKTRACE_SUPPORT=y
+CONFIG_ARCH_DISCONTIGMEM_ENABLE=y
+CONFIG_ARCH_DISCONTIGMEM_DEFAULT=y
+CONFIG_TRACE_IRQFLAGS_SUPPORT=y
+CONFIG_SMP=y
+CONFIG_HVC_TILE=y
+CONFIG_TILEGX=y
+# CONFIG_TILEPRO is not set
+CONFIG_64BIT=y
+CONFIG_ARCH_DEFCONFIG="arch/tile/configs/tilegx_defconfig"
+CONFIG_PGTABLE_LEVELS=3
+CONFIG_DEFCONFIG_LIST="/lib/modules/$UNAME_RELEASE/.config"
+CONFIG_IRQ_WORK=y
+
+#
+# General setup
+#
+CONFIG_INIT_ENV_ARG_LIMIT=32
+CONFIG_CROSS_COMPILE=""
+# CONFIG_COMPILE_TEST is not set
+CONFIG_LOCALVERSION=""
+CONFIG_LOCALVERSION_AUTO=y
+CONFIG_DEFAULT_HOSTNAME="(none)"
+CONFIG_SWAP=y
+CONFIG_SYSVIPC=y
+CONFIG_SYSVIPC_SYSCTL=y
+CONFIG_POSIX_MQUEUE=y
+CONFIG_POSIX_MQUEUE_SYSCTL=y
+CONFIG_CROSS_MEMORY_ATTACH=y
+CONFIG_FHANDLE=y
+# CONFIG_USELIB is not set
+CONFIG_AUDIT=y
+
+#
+# IRQ subsystem
+#
+CONFIG_GENERIC_IRQ_PROBE=y
+CONFIG_GENERIC_IRQ_SHOW=y
+CONFIG_GENERIC_IRQ_LEGACY_ALLOC_HWIRQ=y
+CONFIG_GENERIC_PENDING_IRQ=y
+CONFIG_IRQ_DOMAIN=y
+CONFIG_GENERIC_MSI_IRQ=y
+# CONFIG_IRQ_DOMAIN_DEBUG is not set
+CONFIG_SPARSE_IRQ=y
+CONFIG_GENERIC_CLOCKEVENTS=y
+
+#
+# Timers subsystem
+#
+CONFIG_TICK_ONESHOT=y
+CONFIG_NO_HZ_COMMON=y
+# CONFIG_HZ_PERIODIC is not set
+CONFIG_NO_HZ_IDLE=y
+# CONFIG_NO_HZ_FULL is not set
+CONFIG_NO_HZ=y
+CONFIG_HIGH_RES_TIMERS=y
+
+#
+# CPU/Task time and stats accounting
+#
+CONFIG_TICK_CPU_ACCOUNTING=y
+# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set
+CONFIG_BSD_PROCESS_ACCT=y
+CONFIG_BSD_PROCESS_ACCT_V3=y
+CONFIG_TASKSTATS=y
+CONFIG_TASK_DELAY_ACCT=y
+CONFIG_TASK_XACCT=y
+CONFIG_TASK_IO_ACCOUNTING=y
+
+#
+# RCU Subsystem
+#
+CONFIG_TREE_RCU=y
+# CONFIG_RCU_EXPERT is not set
+CONFIG_SRCU=y
+# CONFIG_TASKS_RCU is not set
+CONFIG_RCU_STALL_COMMON=y
+# CONFIG_TREE_RCU_TRACE is not set
+# CONFIG_RCU_EXPEDITE_BOOT is not set
+CONFIG_BUILD_BIN2C=y
+CONFIG_IKCONFIG=y
+CONFIG_IKCONFIG_PROC=y
+CONFIG_LOG_BUF_SHIFT=19
+CONFIG_LOG_CPU_MAX_BUF_SHIFT=12
+CONFIG_NMI_LOG_BUF_SHIFT=13
+CONFIG_CGROUPS=y
+# CONFIG_MEMCG is not set
+# CONFIG_BLK_CGROUP is not set
+CONFIG_CGROUP_SCHED=y
+CONFIG_FAIR_GROUP_SCHED=y
+# CONFIG_CFS_BANDWIDTH is not set
+CONFIG_RT_GROUP_SCHED=y
+# CONFIG_CGROUP_PIDS is not set
+# CONFIG_CGROUP_FREEZER is not set
+# CONFIG_CGROUP_HUGETLB is not set
+CONFIG_CPUSETS=y
+CONFIG_PROC_PID_CPUSET=y
+CONFIG_CGROUP_DEVICE=y
+CONFIG_CGROUP_CPUACCT=y
+# CONFIG_CGROUP_PERF is not set
+CONFIG_CGROUP_DEBUG=y
+CONFIG_SOCK_CGROUP_DATA=y
+# CONFIG_CHECKPOINT_RESTORE is not set
+CONFIG_NAMESPACES=y
+CONFIG_UTS_NS=y
+CONFIG_IPC_NS=y
+# CONFIG_USER_NS is not set
+CONFIG_PID_NS=y
+CONFIG_NET_NS=y
+# CONFIG_SCHED_AUTOGROUP is not set
+CONFIG_SYSFS_DEPRECATED=y
+# CONFIG_SYSFS_DEPRECATED_V2 is not set
+CONFIG_RELAY=y
+CONFIG_BLK_DEV_INITRD=y
+CONFIG_INITRAMFS_SOURCE=""
+CONFIG_RD_GZIP=y
+CONFIG_RD_BZIP2=y
+CONFIG_RD_LZMA=y
+CONFIG_RD_XZ=y
+CONFIG_RD_LZO=y
+CONFIG_RD_LZ4=y
+CONFIG_INITRAMFS_COMPRESSION=".gz"
+CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y
+# CONFIG_CC_OPTIMIZE_FOR_SIZE is not set
+CONFIG_SYSCTL=y
+CONFIG_ANON_INODES=y
+CONFIG_SYSCTL_EXCEPTION_TRACE=y
+CONFIG_BPF=y
+CONFIG_EXPERT=y
+CONFIG_MULTIUSER=y
+# CONFIG_SGETMASK_SYSCALL is not set
+CONFIG_SYSFS_SYSCALL=y
+CONFIG_SYSCTL_SYSCALL=y
+CONFIG_POSIX_TIMERS=y
+CONFIG_KALLSYMS=y
+CONFIG_KALLSYMS_ALL=y
+# CONFIG_KALLSYMS_ABSOLUTE_PERCPU is not set
+# CONFIG_KALLSYMS_BASE_RELATIVE is not set
+CONFIG_PRINTK=y
+CONFIG_PRINTK_NMI=y
+CONFIG_BUG=y
+CONFIG_ELF_CORE=y
+CONFIG_BASE_FULL=y
+CONFIG_FUTEX=y
+CONFIG_EPOLL=y
+CONFIG_SIGNALFD=y
+CONFIG_TIMERFD=y
+CONFIG_EVENTFD=y
+# CONFIG_BPF_SYSCALL is not set
+CONFIG_SHMEM=y
+CONFIG_AIO=y
+CONFIG_ADVISE_SYSCALLS=y
+# CONFIG_USERFAULTFD is not set
+CONFIG_PCI_QUIRKS=y
+CONFIG_MEMBARRIER=y
+CONFIG_EMBEDDED=y
+CONFIG_HAVE_PERF_EVENTS=y
+
+#
+# Kernel Performance Events And Counters
+#
+CONFIG_PERF_EVENTS=y
+# CONFIG_DEBUG_PERF_USE_VMALLOC is not set
+CONFIG_VM_EVENT_COUNTERS=y
+CONFIG_SLUB_DEBUG=y
+# CONFIG_COMPAT_BRK is not set
+# CONFIG_SLAB is not set
+CONFIG_SLUB=y
+# CONFIG_SLOB is not set
+# CONFIG_SLAB_FREELIST_RANDOM is not set
+CONFIG_SLUB_CPU_PARTIAL=y
+# CONFIG_SYSTEM_DATA_VERIFICATION is not set
+CONFIG_PROFILING=y
+CONFIG_KPROBES=y
+# CONFIG_JUMP_LABEL is not set
+CONFIG_HAVE_64BIT_ALIGNED_ACCESS=y
+CONFIG_KRETPROBES=y
+CONFIG_HAVE_KPROBES=y
+CONFIG_HAVE_KRETPROBES=y
+CONFIG_HAVE_NMI=y
+CONFIG_HAVE_ARCH_TRACEHOOK=y
+CONFIG_HAVE_DMA_API_DEBUG=y
+CONFIG_HAVE_ARCH_JUMP_LABEL=y
+CONFIG_ARCH_HAVE_NMI_SAFE_CMPXCHG=y
+CONFIG_HAVE_ARCH_SECCOMP_FILTER=y
+# CONFIG_CC_STACKPROTECTOR is not set
+CONFIG_HAVE_CONTEXT_TRACKING=y
+CONFIG_HAVE_VIRT_CPU_ACCOUNTING_GEN=y
+CONFIG_MODULES_USE_ELF_RELA=y
+CONFIG_HAVE_EXIT_THREAD=y
+# CONFIG_HAVE_ARCH_HASH is not set
+# CONFIG_ISA_BUS_API is not set
+# CONFIG_CPU_NO_EFFICIENT_FFS is not set
+# CONFIG_HAVE_ARCH_VMAP_STACK is not set
+
+#
+# GCOV-based kernel profiling
+#
+# CONFIG_GCOV_KERNEL is not set
+# CONFIG_ARCH_HAS_GCOV_PROFILE_ALL is not set
+# CONFIG_HAVE_GENERIC_DMA_COHERENT is not set
+CONFIG_SLABINFO=y
+CONFIG_RT_MUTEXES=y
+CONFIG_BASE_SMALL=0
+CONFIG_MODULES=y
+CONFIG_MODULE_FORCE_LOAD=y
+CONFIG_MODULE_UNLOAD=y
+# CONFIG_MODULE_FORCE_UNLOAD is not set
+# CONFIG_MODVERSIONS is not set
+# CONFIG_MODULE_SRCVERSION_ALL is not set
+# CONFIG_MODULE_SIG is not set
+# CONFIG_MODULE_COMPRESS is not set
+CONFIG_MODULES_TREE_LOOKUP=y
+CONFIG_BLOCK=y
+CONFIG_BLK_DEV_BSG=y
+# CONFIG_BLK_DEV_BSGLIB is not set
+# CONFIG_BLK_DEV_INTEGRITY is not set
+# CONFIG_BLK_DEV_ZONED is not set
+CONFIG_BLK_CMDLINE_PARSER=y
+# CONFIG_BLK_WBT is not set
+
+#
+# Partition Types
+#
+CONFIG_PARTITION_ADVANCED=y
+# CONFIG_ACORN_PARTITION is not set
+# CONFIG_AIX_PARTITION is not set
+# CONFIG_OSF_PARTITION is not set
+# CONFIG_AMIGA_PARTITION is not set
+# CONFIG_ATARI_PARTITION is not set
+# CONFIG_MAC_PARTITION is not set
+CONFIG_MSDOS_PARTITION=y
+# CONFIG_BSD_DISKLABEL is not set
+# CONFIG_MINIX_SUBPARTITION is not set
+# CONFIG_SOLARIS_X86_PARTITION is not set
+# CONFIG_UNIXWARE_DISKLABEL is not set
+# CONFIG_LDM_PARTITION is not set
+# CONFIG_SGI_PARTITION is not set
+# CONFIG_ULTRIX_PARTITION is not set
+# CONFIG_SUN_PARTITION is not set
+# CONFIG_KARMA_PARTITION is not set
+CONFIG_EFI_PARTITION=y
+# CONFIG_SYSV68_PARTITION is not set
+# CONFIG_CMDLINE_PARTITION is not set
+CONFIG_BLOCK_COMPAT=y
+CONFIG_BLK_MQ_PCI=y
+
+#
+# IO Schedulers
+#
+CONFIG_IOSCHED_NOOP=y
+CONFIG_IOSCHED_DEADLINE=y
+CONFIG_IOSCHED_CFQ=y
+# CONFIG_DEFAULT_DEADLINE is not set
+CONFIG_DEFAULT_CFQ=y
+# CONFIG_DEFAULT_NOOP is not set
+CONFIG_DEFAULT_IOSCHED="cfq"
+CONFIG_PADATA=y
+CONFIG_INLINE_SPIN_UNLOCK_IRQ=y
+CONFIG_INLINE_READ_UNLOCK=y
+CONFIG_INLINE_READ_UNLOCK_IRQ=y
+CONFIG_INLINE_WRITE_UNLOCK=y
+CONFIG_INLINE_WRITE_UNLOCK_IRQ=y
+CONFIG_ARCH_SUPPORTS_ATOMIC_RMW=y
+CONFIG_MUTEX_SPIN_ON_OWNER=y
+CONFIG_LOCK_SPIN_ON_OWNER=y
+# CONFIG_FREEZER is not set
+
+#
+# Tilera-specific configuration
+#
+CONFIG_NR_CPUS=100
+# CONFIG_PAGE_SIZE_16KB is not set
+CONFIG_PAGE_SIZE_64KB=y
+# CONFIG_HZ_100 is not set
+# CONFIG_HZ_250 is not set
+# CONFIG_HZ_300 is not set
+CONFIG_HZ_1000=y
+CONFIG_HZ=1000
+CONFIG_SCHED_HRTICK=y
+# CONFIG_KEXEC is not set
+CONFIG_COMPAT=y
+# CONFIG_SECCOMP is not set
+CONFIG_SYSVIPC_COMPAT=y
+# CONFIG_HIGHMEM is not set
+CONFIG_ZONE_DMA=y
+CONFIG_IOMMU_HELPER=y
+CONFIG_NEED_SG_DMA_LENGTH=y
+CONFIG_SWIOTLB=y
+CONFIG_NUMA=y
+CONFIG_NODES_SHIFT=2
+CONFIG_DISCONTIGMEM=y
+CONFIG_FLAT_NODE_MEM_MAP=y
+CONFIG_NEED_MULTIPLE_NODES=y
+# CONFIG_HAVE_BOOTMEM_INFO_NODE is not set
+CONFIG_SPLIT_PTLOCK_CPUS=4
+# CONFIG_COMPACTION is not set
+CONFIG_MIGRATION=y
+CONFIG_PHYS_ADDR_T_64BIT=y
+CONFIG_BOUNCE=y
+CONFIG_NEED_BOUNCE_POOL=y
+CONFIG_VIRT_TO_BUS=y
+# CONFIG_KSM is not set
+CONFIG_DEFAULT_MMAP_MIN_ADDR=4096
+# CONFIG_CLEANCACHE is not set
+CONFIG_FRONTSWAP=y
+# CONFIG_ZSWAP is not set
+CONFIG_ZPOOL=y
+# CONFIG_ZBUD is not set
+# CONFIG_Z3FOLD is not set
+# CONFIG_ZSMALLOC is not set
+# CONFIG_IDLE_PAGE_TRACKING is not set
+# CONFIG_PREEMPT_NONE is not set
+CONFIG_PREEMPT_VOLUNTARY=y
+# CONFIG_PREEMPT is not set
+# CONFIG_CMDLINE_BOOL is not set
+CONFIG_VMALLOC_RESERVE=0x2000000
+CONFIG_HARDWALL=y
+CONFIG_KERNEL_PL=2
+CONFIG_TILE_GXIO=y
+CONFIG_TILE_GXIO_DMA=y
+CONFIG_TILE_GXIO_MPIPE=y
+CONFIG_TILE_GXIO_GPIO=y
+CONFIG_TILE_GXIO_TRIO=y
+CONFIG_TILE_GXIO_USB_HOST=y
+CONFIG_TILE_GXIO_UART=y
+
+#
+# Bus options
+#
+CONFIG_PCI=y
+CONFIG_PCI_DOMAINS=y
+# CONFIG_NO_IOMEM is not set
+# CONFIG_NO_IOPORT_MAP is not set
+CONFIG_TILE_PCI_IO=y
+# CONFIG_PCIEPORTBUS is not set
+CONFIG_PCI_BUS_ADDR_T_64BIT=y
+CONFIG_PCI_MSI=y
+# CONFIG_PCI_MSI_IRQ_DOMAIN is not set
+CONFIG_PCI_DEBUG=y
+# CONFIG_PCI_REALLOC_ENABLE_AUTO is not set
+# CONFIG_PCI_STUB is not set
+# CONFIG_PCI_IOV is not set
+# CONFIG_PCI_PRI is not set
+# CONFIG_PCI_PASID is not set
+# CONFIG_HOTPLUG_PCI is not set
+
+#
+# PCI host controller drivers
+#
+CONFIG_TILE_USB=y
+
+#
+# Executable file formats
+#
+CONFIG_BINFMT_ELF=y
+CONFIG_COMPAT_BINFMT_ELF=y
+CONFIG_ELFCORE=y
+# CONFIG_CORE_DUMP_DEFAULT_ELF_HEADERS is not set
+CONFIG_BINFMT_SCRIPT=y
+# CONFIG_HAVE_AOUT is not set
+CONFIG_BINFMT_MISC=y
+CONFIG_COREDUMP=y
+CONFIG_NET=y
+CONFIG_NET_INGRESS=y
+CONFIG_NET_EGRESS=y
+
+#
+# Networking options
+#
+CONFIG_PACKET=y
+CONFIG_PACKET_DIAG=y
+CONFIG_UNIX=y
+CONFIG_UNIX_DIAG=y
+CONFIG_XFRM=y
+CONFIG_XFRM_ALGO=y
+CONFIG_XFRM_USER=y
+CONFIG_XFRM_SUB_POLICY=y
+CONFIG_XFRM_MIGRATE=y
+CONFIG_XFRM_STATISTICS=y
+CONFIG_XFRM_IPCOMP=m
+# CONFIG_NET_KEY is not set
+CONFIG_INET=y
+CONFIG_IP_MULTICAST=y
+CONFIG_IP_ADVANCED_ROUTER=y
+# CONFIG_IP_FIB_TRIE_STATS is not set
+CONFIG_IP_MULTIPLE_TABLES=y
+CONFIG_IP_ROUTE_MULTIPATH=y
+CONFIG_IP_ROUTE_VERBOSE=y
+CONFIG_IP_ROUTE_CLASSID=y
+# CONFIG_IP_PNP is not set
+CONFIG_NET_IPIP=m
+# CONFIG_NET_IPGRE_DEMUX is not set
+CONFIG_NET_IP_TUNNEL=m
+CONFIG_IP_MROUTE=y
+# CONFIG_IP_MROUTE_MULTIPLE_TABLES is not set
+CONFIG_IP_PIMSM_V1=y
+CONFIG_IP_PIMSM_V2=y
+CONFIG_SYN_COOKIES=y
+# CONFIG_NET_IPVTI is not set
+# CONFIG_NET_UDP_TUNNEL is not set
+# CONFIG_NET_FOU is not set
+# CONFIG_NET_FOU_IP_TUNNELS is not set
+CONFIG_INET_AH=m
+CONFIG_INET_ESP=m
+CONFIG_INET_IPCOMP=m
+CONFIG_INET_XFRM_TUNNEL=m
+CONFIG_INET_TUNNEL=m
+CONFIG_INET_XFRM_MODE_TRANSPORT=m
+CONFIG_INET_XFRM_MODE_TUNNEL=m
+CONFIG_INET_XFRM_MODE_BEET=m
+CONFIG_INET_DIAG=y
+CONFIG_INET_TCP_DIAG=y
+CONFIG_INET_UDP_DIAG=y
+CONFIG_INET_RAW_DIAG=y
+# CONFIG_INET_DIAG_DESTROY is not set
+CONFIG_TCP_CONG_ADVANCED=y
+CONFIG_TCP_CONG_BIC=m
+CONFIG_TCP_CONG_CUBIC=y
+CONFIG_TCP_CONG_WESTWOOD=m
+CONFIG_TCP_CONG_HTCP=m
+CONFIG_TCP_CONG_HSTCP=m
+CONFIG_TCP_CONG_HYBLA=m
+CONFIG_TCP_CONG_VEGAS=m
+# CONFIG_TCP_CONG_NV is not set
+CONFIG_TCP_CONG_SCALABLE=m
+CONFIG_TCP_CONG_LP=m
+CONFIG_TCP_CONG_VENO=m
+CONFIG_TCP_CONG_YEAH=m
+CONFIG_TCP_CONG_ILLINOIS=m
+# CONFIG_TCP_CONG_DCTCP is not set
+# CONFIG_TCP_CONG_CDG is not set
+# CONFIG_TCP_CONG_BBR is not set
+CONFIG_DEFAULT_CUBIC=y
+# CONFIG_DEFAULT_RENO is not set
+CONFIG_DEFAULT_TCP_CONG="cubic"
+CONFIG_TCP_MD5SIG=y
+CONFIG_IPV6=y
+CONFIG_IPV6_ROUTER_PREF=y
+CONFIG_IPV6_ROUTE_INFO=y
+CONFIG_IPV6_OPTIMISTIC_DAD=y
+CONFIG_INET6_AH=m
+CONFIG_INET6_ESP=m
+CONFIG_INET6_IPCOMP=m
+CONFIG_IPV6_MIP6=m
+# CONFIG_IPV6_ILA is not set
+CONFIG_INET6_XFRM_TUNNEL=m
+CONFIG_INET6_TUNNEL=m
+CONFIG_INET6_XFRM_MODE_TRANSPORT=m
+CONFIG_INET6_XFRM_MODE_TUNNEL=m
+CONFIG_INET6_XFRM_MODE_BEET=m
+CONFIG_INET6_XFRM_MODE_ROUTEOPTIMIZATION=m
+# CONFIG_IPV6_VTI is not set
+CONFIG_IPV6_SIT=m
+# CONFIG_IPV6_SIT_6RD is not set
+CONFIG_IPV6_NDISC_NODETYPE=y
+CONFIG_IPV6_TUNNEL=m
+# CONFIG_IPV6_FOU is not set
+# CONFIG_IPV6_FOU_TUNNEL is not set
+CONFIG_IPV6_MULTIPLE_TABLES=y
+# CONFIG_IPV6_SUBTREES is not set
+CONFIG_IPV6_MROUTE=y
+# CONFIG_IPV6_MROUTE_MULTIPLE_TABLES is not set
+CONFIG_IPV6_PIMSM_V2=y
+# CONFIG_IPV6_SEG6_LWTUNNEL is not set
+# CONFIG_IPV6_SEG6_HMAC is not set
+CONFIG_NETLABEL=y
+CONFIG_NETWORK_SECMARK=y
+CONFIG_NET_PTP_CLASSIFY=y
+# CONFIG_NETWORK_PHY_TIMESTAMPING is not set
+CONFIG_NETFILTER=y
+# CONFIG_NETFILTER_DEBUG is not set
+CONFIG_NETFILTER_ADVANCED=y
+CONFIG_BRIDGE_NETFILTER=m
+
+#
+# Core Netfilter Configuration
+#
+CONFIG_NETFILTER_INGRESS=y
+# CONFIG_NETFILTER_NETLINK_ACCT is not set
+# CONFIG_NETFILTER_NETLINK_QUEUE is not set
+# CONFIG_NETFILTER_NETLINK_LOG is not set
+# CONFIG_NF_CONNTRACK is not set
+# CONFIG_NF_LOG_NETDEV is not set
+# CONFIG_NF_TABLES is not set
+# CONFIG_NETFILTER_XTABLES is not set
+# CONFIG_IP_SET is not set
+# CONFIG_IP_VS is not set
+
+#
+# IP: Netfilter Configuration
+#
+# CONFIG_NF_DEFRAG_IPV4 is not set
+# CONFIG_NF_SOCKET_IPV4 is not set
+# CONFIG_NF_DUP_IPV4 is not set
+# CONFIG_NF_LOG_ARP is not set
+# CONFIG_NF_LOG_IPV4 is not set
+# CONFIG_NF_REJECT_IPV4 is not set
+# CONFIG_IP_NF_IPTABLES is not set
+# CONFIG_IP_NF_ARPTABLES is not set
+
+#
+# IPv6: Netfilter Configuration
+#
+# CONFIG_NF_DEFRAG_IPV6 is not set
+# CONFIG_NF_SOCKET_IPV6 is not set
+# CONFIG_NF_DUP_IPV6 is not set
+# CONFIG_NF_REJECT_IPV6 is not set
+# CONFIG_NF_LOG_IPV6 is not set
+# CONFIG_IP6_NF_IPTABLES is not set
+# CONFIG_IP_DCCP is not set
+CONFIG_IP_SCTP=m
+# CONFIG_NET_SCTPPROBE is not set
+# CONFIG_SCTP_DBG_OBJCNT is not set
+CONFIG_SCTP_DEFAULT_COOKIE_HMAC_MD5=y
+# CONFIG_SCTP_DEFAULT_COOKIE_HMAC_SHA1 is not set
+# CONFIG_SCTP_DEFAULT_COOKIE_HMAC_NONE is not set
+CONFIG_SCTP_COOKIE_HMAC_MD5=y
+# CONFIG_SCTP_COOKIE_HMAC_SHA1 is not set
+CONFIG_INET_SCTP_DIAG=m
+CONFIG_RDS=m
+CONFIG_RDS_TCP=m
+# CONFIG_RDS_DEBUG is not set
+# CONFIG_TIPC is not set
+# CONFIG_ATM is not set
+# CONFIG_L2TP is not set
+CONFIG_STP=m
+CONFIG_GARP=m
+CONFIG_BRIDGE=m
+CONFIG_BRIDGE_IGMP_SNOOPING=y
+# CONFIG_BRIDGE_VLAN_FILTERING is not set
+CONFIG_HAVE_NET_DSA=y
+CONFIG_VLAN_8021Q=m
+CONFIG_VLAN_8021Q_GVRP=y
+# CONFIG_VLAN_8021Q_MVRP is not set
+# CONFIG_DECNET is not set
+CONFIG_LLC=m
+# CONFIG_LLC2 is not set
+# CONFIG_IPX is not set
+# CONFIG_ATALK is not set
+# CONFIG_X25 is not set
+# CONFIG_LAPB is not set
+CONFIG_PHONET=m
+# CONFIG_6LOWPAN is not set
+# CONFIG_IEEE802154 is not set
+CONFIG_NET_SCHED=y
+
+#
+# Queueing/Scheduling
+#
+CONFIG_NET_SCH_CBQ=m
+CONFIG_NET_SCH_HTB=m
+CONFIG_NET_SCH_HFSC=m
+CONFIG_NET_SCH_PRIO=m
+CONFIG_NET_SCH_MULTIQ=m
+CONFIG_NET_SCH_RED=m
+# CONFIG_NET_SCH_SFB is not set
+CONFIG_NET_SCH_SFQ=m
+CONFIG_NET_SCH_TEQL=m
+CONFIG_NET_SCH_TBF=m
+CONFIG_NET_SCH_GRED=m
+CONFIG_NET_SCH_DSMARK=m
+CONFIG_NET_SCH_NETEM=m
+CONFIG_NET_SCH_DRR=m
+# CONFIG_NET_SCH_MQPRIO is not set
+# CONFIG_NET_SCH_CHOKE is not set
+# CONFIG_NET_SCH_QFQ is not set
+# CONFIG_NET_SCH_CODEL is not set
+# CONFIG_NET_SCH_FQ_CODEL is not set
+# CONFIG_NET_SCH_FQ is not set
+# CONFIG_NET_SCH_HHF is not set
+# CONFIG_NET_SCH_PIE is not set
+CONFIG_NET_SCH_INGRESS=m
+# CONFIG_NET_SCH_PLUG is not set
+
+#
+# Classification
+#
+CONFIG_NET_CLS=y
+CONFIG_NET_CLS_BASIC=m
+CONFIG_NET_CLS_TCINDEX=m
+CONFIG_NET_CLS_ROUTE4=m
+CONFIG_NET_CLS_FW=m
+CONFIG_NET_CLS_U32=m
+CONFIG_CLS_U32_PERF=y
+CONFIG_CLS_U32_MARK=y
+CONFIG_NET_CLS_RSVP=m
+CONFIG_NET_CLS_RSVP6=m
+CONFIG_NET_CLS_FLOW=m
+CONFIG_NET_CLS_CGROUP=y
+# CONFIG_NET_CLS_BPF is not set
+# CONFIG_NET_CLS_FLOWER is not set
+# CONFIG_NET_CLS_MATCHALL is not set
+CONFIG_NET_EMATCH=y
+CONFIG_NET_EMATCH_STACK=32
+CONFIG_NET_EMATCH_CMP=m
+CONFIG_NET_EMATCH_NBYTE=m
+CONFIG_NET_EMATCH_U32=m
+CONFIG_NET_EMATCH_META=m
+CONFIG_NET_EMATCH_TEXT=m
+CONFIG_NET_CLS_ACT=y
+CONFIG_NET_ACT_POLICE=m
+CONFIG_NET_ACT_GACT=m
+CONFIG_GACT_PROB=y
+CONFIG_NET_ACT_MIRRED=m
+CONFIG_NET_ACT_NAT=m
+CONFIG_NET_ACT_PEDIT=m
+CONFIG_NET_ACT_SIMP=m
+CONFIG_NET_ACT_SKBEDIT=m
+# CONFIG_NET_ACT_CSUM is not set
+# CONFIG_NET_ACT_VLAN is not set
+# CONFIG_NET_ACT_BPF is not set
+# CONFIG_NET_ACT_SKBMOD is not set
+# CONFIG_NET_ACT_IFE is not set
+# CONFIG_NET_ACT_TUNNEL_KEY is not set
+CONFIG_NET_CLS_IND=y
+CONFIG_NET_SCH_FIFO=y
+CONFIG_DCB=y
+CONFIG_DNS_RESOLVER=y
+# CONFIG_BATMAN_ADV is not set
+# CONFIG_OPENVSWITCH is not set
+# CONFIG_VSOCKETS is not set
+# CONFIG_NETLINK_DIAG is not set
+# CONFIG_MPLS is not set
+# CONFIG_HSR is not set
+# CONFIG_NET_SWITCHDEV is not set
+# CONFIG_NET_L3_MASTER_DEV is not set
+# CONFIG_NET_NCSI is not set
+CONFIG_RPS=y
+CONFIG_RFS_ACCEL=y
+CONFIG_XPS=y
+# CONFIG_CGROUP_NET_PRIO is not set
+CONFIG_CGROUP_NET_CLASSID=y
+CONFIG_NET_RX_BUSY_POLL=y
+CONFIG_BQL=y
+CONFIG_NET_FLOW_LIMIT=y
+
+#
+# Network testing
+#
+# CONFIG_NET_PKTGEN is not set
+# CONFIG_NET_TCPPROBE is not set
+# CONFIG_HAMRADIO is not set
+# CONFIG_CAN is not set
+# CONFIG_IRDA is not set
+# CONFIG_BT is not set
+# CONFIG_AF_RXRPC is not set
+# CONFIG_AF_KCM is not set
+# CONFIG_STREAM_PARSER is not set
+CONFIG_FIB_RULES=y
+# CONFIG_WIRELESS is not set
+# CONFIG_WIMAX is not set
+# CONFIG_RFKILL is not set
+# CONFIG_NET_9P is not set
+# CONFIG_CAIF is not set
+# CONFIG_CEPH_LIB is not set
+# CONFIG_NFC is not set
+# CONFIG_LWTUNNEL is not set
+CONFIG_DST_CACHE=y
+# CONFIG_NET_DEVLINK is not set
+CONFIG_MAY_USE_DEVLINK=y
+
+#
+# Device Drivers
+#
+
+#
+# Generic Driver Options
+#
+CONFIG_UEVENT_HELPER=y
+CONFIG_UEVENT_HELPER_PATH="/sbin/hotplug"
+CONFIG_DEVTMPFS=y
+CONFIG_DEVTMPFS_MOUNT=y
+CONFIG_STANDALONE=y
+CONFIG_PREVENT_FIRMWARE_BUILD=y
+CONFIG_FW_LOADER=y
+# CONFIG_FIRMWARE_IN_KERNEL is not set
+CONFIG_EXTRA_FIRMWARE=""
+# CONFIG_FW_LOADER_USER_HELPER_FALLBACK is not set
+CONFIG_ALLOW_DEV_COREDUMP=y
+# CONFIG_DEBUG_DRIVER is not set
+# CONFIG_DEBUG_DEVRES is not set
+# CONFIG_DEBUG_TEST_DRIVER_REMOVE is not set
+# CONFIG_TEST_ASYNC_DRIVER_PROBE is not set
+CONFIG_SYS_HYPERVISOR=y
+# CONFIG_GENERIC_CPU_DEVICES is not set
+CONFIG_REGMAP=y
+CONFIG_REGMAP_I2C=y
+CONFIG_REGMAP_SPI=y
+CONFIG_DMA_SHARED_BUFFER=y
+# CONFIG_DMA_FENCE_TRACE is not set
+
+#
+# Bus devices
+#
+CONFIG_CONNECTOR=y
+CONFIG_PROC_EVENTS=y
+CONFIG_MTD=y
+# CONFIG_MTD_TESTS is not set
+# CONFIG_MTD_REDBOOT_PARTS is not set
+# CONFIG_MTD_CMDLINE_PARTS is not set
+# CONFIG_MTD_AR7_PARTS is not set
+
+#
+# User Modules And Translation Layers
+#
+# CONFIG_MTD_BLOCK is not set
+# CONFIG_MTD_BLOCK_RO is not set
+# CONFIG_FTL is not set
+# CONFIG_NFTL is not set
+# CONFIG_INFTL is not set
+# CONFIG_RFD_FTL is not set
+# CONFIG_SSFDC is not set
+# CONFIG_SM_FTL is not set
+# CONFIG_MTD_OOPS is not set
+# CONFIG_MTD_SWAP is not set
+# CONFIG_MTD_PARTITIONED_MASTER is not set
+
+#
+# RAM/ROM/Flash chip drivers
+#
+# CONFIG_MTD_CFI is not set
+# CONFIG_MTD_JEDECPROBE is not set
+CONFIG_MTD_MAP_BANK_WIDTH_1=y
+CONFIG_MTD_MAP_BANK_WIDTH_2=y
+CONFIG_MTD_MAP_BANK_WIDTH_4=y
+# CONFIG_MTD_MAP_BANK_WIDTH_8 is not set
+# CONFIG_MTD_MAP_BANK_WIDTH_16 is not set
+# CONFIG_MTD_MAP_BANK_WIDTH_32 is not set
+CONFIG_MTD_CFI_I1=y
+CONFIG_MTD_CFI_I2=y
+# CONFIG_MTD_CFI_I4 is not set
+# CONFIG_MTD_CFI_I8 is not set
+# CONFIG_MTD_RAM is not set
+# CONFIG_MTD_ROM is not set
+# CONFIG_MTD_ABSENT is not set
+
+#
+# Mapping drivers for chip access
+#
+# CONFIG_MTD_COMPLEX_MAPPINGS is not set
+# CONFIG_MTD_INTEL_VR_NOR is not set
+# CONFIG_MTD_PLATRAM is not set
+
+#
+# Self-contained MTD device drivers
+#
+# CONFIG_MTD_PMC551 is not set
+# CONFIG_MTD_DATAFLASH is not set
+# CONFIG_MTD_M25P80 is not set
+# CONFIG_MTD_SST25L is not set
+# CONFIG_MTD_SLRAM is not set
+# CONFIG_MTD_PHRAM is not set
+# CONFIG_MTD_MTDRAM is not set
+# CONFIG_MTD_BLOCK2MTD is not set
+
+#
+# Disk-On-Chip Device Drivers
+#
+# CONFIG_MTD_DOCG3 is not set
+CONFIG_MTD_NAND_ECC=y
+# CONFIG_MTD_NAND_ECC_SMC is not set
+CONFIG_MTD_NAND=y
+# CONFIG_MTD_NAND_ECC_BCH is not set
+# CONFIG_MTD_SM_COMMON is not set
+# CONFIG_MTD_NAND_DENALI_PCI is not set
+CONFIG_MTD_NAND_GPIO=y
+# CONFIG_MTD_NAND_OMAP_BCH_BUILD is not set
+CONFIG_MTD_NAND_IDS=y
+# CONFIG_MTD_NAND_RICOH is not set
+# CONFIG_MTD_NAND_DISKONCHIP is not set
+# CONFIG_MTD_NAND_DOCG4 is not set
+# CONFIG_MTD_NAND_CAFE is not set
+# CONFIG_MTD_NAND_NANDSIM is not set
+# CONFIG_MTD_NAND_PLATFORM is not set
+# CONFIG_MTD_NAND_OXNAS is not set
+# CONFIG_MTD_NAND_HISI504 is not set
+# CONFIG_MTD_NAND_MTK is not set
+# CONFIG_MTD_ONENAND is not set
+
+#
+# LPDDR & LPDDR2 PCM memory drivers
+#
+# CONFIG_MTD_LPDDR is not set
+CONFIG_MTD_SPI_NOR=y
+# CONFIG_MTD_MT81xx_NOR is not set
+CONFIG_MTD_SPI_NOR_USE_4K_SECTORS=y
+CONFIG_MTD_UBI=y
+CONFIG_MTD_UBI_WL_THRESHOLD=4096
+CONFIG_MTD_UBI_BEB_LIMIT=20
+# CONFIG_MTD_UBI_FASTMAP is not set
+CONFIG_MTD_UBI_GLUEBI=y
+CONFIG_MTD_UBI_BLOCK=y
+# CONFIG_OF is not set
+# CONFIG_PARPORT is not set
+CONFIG_BLK_DEV=y
+# CONFIG_BLK_DEV_NULL_BLK is not set
+# CONFIG_BLK_DEV_PCIESSD_MTIP32XX is not set
+# CONFIG_BLK_CPQ_CISS_DA is not set
+# CONFIG_BLK_DEV_DAC960 is not set
+# CONFIG_BLK_DEV_UMEM is not set
+# CONFIG_BLK_DEV_COW_COMMON is not set
+# CONFIG_BLK_DEV_LOOP is not set
+# CONFIG_BLK_DEV_DRBD is not set
+CONFIG_BLK_DEV_NBD=y
+# CONFIG_BLK_DEV_SKD is not set
+# CONFIG_BLK_DEV_SX8 is not set
+# CONFIG_BLK_DEV_RAM is not set
+# CONFIG_CDROM_PKTCDVD is not set
+# CONFIG_ATA_OVER_ETH is not set
+# CONFIG_BLK_DEV_RBD is not set
+# CONFIG_BLK_DEV_RSXX is not set
+# CONFIG_BLK_DEV_NVME is not set
+# CONFIG_NVME_FC is not set
+# CONFIG_NVME_TARGET is not set
+
+#
+# Misc devices
+#
+# CONFIG_SENSORS_LIS3LV02D is not set
+# CONFIG_AD525X_DPOT is not set
+# CONFIG_DUMMY_IRQ is not set
+# CONFIG_PHANTOM is not set
+# CONFIG_SGI_IOC4 is not set
+# CONFIG_TIFM_CORE is not set
+# CONFIG_ICS932S401 is not set
+# CONFIG_ENCLOSURE_SERVICES is not set
+# CONFIG_HP_ILO is not set
+# CONFIG_APDS9802ALS is not set
+# CONFIG_ISL29003 is not set
+# CONFIG_ISL29020 is not set
+# CONFIG_SENSORS_TSL2550 is not set
+# CONFIG_SENSORS_BH1770 is not set
+# CONFIG_SENSORS_APDS990X is not set
+# CONFIG_HMC6352 is not set
+# CONFIG_DS1682 is not set
+# CONFIG_TI_DAC7512 is not set
+# CONFIG_USB_SWITCH_FSA9480 is not set
+# CONFIG_LATTICE_ECP3_CONFIG is not set
+# CONFIG_SRAM is not set
+# CONFIG_C2PORT is not set
+
+#
+# EEPROM support
+#
+CONFIG_EEPROM_AT24=y
+CONFIG_EEPROM_AT25=y
+# CONFIG_EEPROM_LEGACY is not set
+# CONFIG_EEPROM_MAX6875 is not set
+# CONFIG_EEPROM_93CX6 is not set
+# CONFIG_EEPROM_93XX46 is not set
+# CONFIG_CB710_CORE is not set
+
+#
+# Texas Instruments shared transport line discipline
+#
+# CONFIG_TI_ST is not set
+# CONFIG_SENSORS_LIS3_SPI is not set
+# CONFIG_SENSORS_LIS3_I2C is not set
+
+#
+# Altera FPGA firmware download module
+#
+# CONFIG_ALTERA_STAPL is not set
+
+#
+# Intel MIC Bus Driver
+#
+
+#
+# SCIF Bus Driver
+#
+
+#
+# VOP Bus Driver
+#
+
+#
+# Intel MIC Host Driver
+#
+
+#
+# Intel MIC Card Driver
+#
+
+#
+# SCIF Driver
+#
+
+#
+# Intel MIC Coprocessor State Management (COSM) Drivers
+#
+
+#
+# VOP Driver
+#
+# CONFIG_GENWQE is not set
+# CONFIG_ECHO is not set
+# CONFIG_CXL_BASE is not set
+# CONFIG_CXL_AFU_DRIVER_OPS is not set
+
+#
+# SCSI device support
+#
+CONFIG_SCSI_MOD=y
+# CONFIG_RAID_ATTRS is not set
+CONFIG_SCSI=y
+CONFIG_SCSI_DMA=y
+# CONFIG_SCSI_NETLINK is not set
+# CONFIG_SCSI_MQ_DEFAULT is not set
+CONFIG_SCSI_PROC_FS=y
+
+#
+# SCSI support type (disk, tape, CD-ROM)
+#
+CONFIG_BLK_DEV_SD=y
+# CONFIG_CHR_DEV_ST is not set
+# CONFIG_CHR_DEV_OSST is not set
+# CONFIG_BLK_DEV_SR is not set
+CONFIG_CHR_DEV_SG=y
+# CONFIG_CHR_DEV_SCH is not set
+# CONFIG_SCSI_CONSTANTS is not set
+# CONFIG_SCSI_LOGGING is not set
+# CONFIG_SCSI_SCAN_ASYNC is not set
+
+#
+# SCSI Transports
+#
+# CONFIG_SCSI_SPI_ATTRS is not set
+# CONFIG_SCSI_FC_ATTRS is not set
+# CONFIG_SCSI_ISCSI_ATTRS is not set
+# CONFIG_SCSI_SAS_ATTRS is not set
+# CONFIG_SCSI_SAS_LIBSAS is not set
+# CONFIG_SCSI_SRP_ATTRS is not set
+CONFIG_SCSI_LOWLEVEL=y
+# CONFIG_ISCSI_TCP is not set
+# CONFIG_ISCSI_BOOT_SYSFS is not set
+# CONFIG_SCSI_CXGB3_ISCSI is not set
+# CONFIG_SCSI_CXGB4_ISCSI is not set
+# CONFIG_SCSI_BNX2_ISCSI is not set
+# CONFIG_BE2ISCSI is not set
+# CONFIG_BLK_DEV_3W_XXXX_RAID is not set
+# CONFIG_SCSI_HPSA is not set
+# CONFIG_SCSI_3W_9XXX is not set
+# CONFIG_SCSI_3W_SAS is not set
+# CONFIG_SCSI_ACARD is not set
+# CONFIG_SCSI_AACRAID is not set
+# CONFIG_SCSI_AIC7XXX is not set
+# CONFIG_SCSI_AIC79XX is not set
+# CONFIG_SCSI_AIC94XX is not set
+# CONFIG_SCSI_MVSAS is not set
+# CONFIG_SCSI_MVUMI is not set
+# CONFIG_SCSI_DPT_I2O is not set
+# CONFIG_SCSI_ADVANSYS is not set
+# CONFIG_SCSI_ARCMSR is not set
+# CONFIG_SCSI_ESAS2R is not set
+# CONFIG_MEGARAID_NEWGEN is not set
+# CONFIG_MEGARAID_LEGACY is not set
+# CONFIG_MEGARAID_SAS is not set
+# CONFIG_SCSI_MPT3SAS is not set
+# CONFIG_SCSI_MPT2SAS is not set
+# CONFIG_SCSI_SMARTPQI is not set
+# CONFIG_SCSI_UFSHCD is not set
+# CONFIG_SCSI_HPTIOP is not set
+# CONFIG_SCSI_SNIC is not set
+# CONFIG_SCSI_DMX3191D is not set
+# CONFIG_SCSI_FUTURE_DOMAIN is not set
+# CONFIG_SCSI_IPS is not set
+# CONFIG_SCSI_INITIO is not set
+# CONFIG_SCSI_INIA100 is not set
+# CONFIG_SCSI_STEX is not set
+# CONFIG_SCSI_SYM53C8XX_2 is not set
+# CONFIG_SCSI_QLOGIC_1280 is not set
+# CONFIG_SCSI_QLA_ISCSI is not set
+# CONFIG_QEDI is not set
+# CONFIG_SCSI_DC395x is not set
+# CONFIG_SCSI_AM53C974 is not set
+# CONFIG_SCSI_WD719X is not set
+# CONFIG_SCSI_DEBUG is not set
+# CONFIG_SCSI_PMCRAID is not set
+# CONFIG_SCSI_PM8001 is not set
+# CONFIG_SCSI_LOWLEVEL_PCMCIA is not set
+# CONFIG_SCSI_DH is not set
+# CONFIG_SCSI_OSD_INITIATOR is not set
+# CONFIG_ATA is not set
+CONFIG_MD=y
+CONFIG_BLK_DEV_MD=y
+CONFIG_MD_AUTODETECT=y
+CONFIG_MD_LINEAR=y
+CONFIG_MD_RAID0=y
+CONFIG_MD_RAID1=y
+CONFIG_MD_RAID10=y
+CONFIG_MD_RAID456=y
+CONFIG_MD_MULTIPATH=y
+# CONFIG_MD_FAULTY is not set
+# CONFIG_MD_CLUSTER is not set
+CONFIG_BCACHE=y
+# CONFIG_BCACHE_DEBUG is not set
+# CONFIG_BCACHE_CLOSURES_DEBUG is not set
+CONFIG_BLK_DEV_DM_BUILTIN=y
+CONFIG_BLK_DEV_DM=y
+# CONFIG_DM_MQ_DEFAULT is not set
+# CONFIG_DM_DEBUG is not set
+CONFIG_DM_BUFIO=y
+# CONFIG_DM_DEBUG_BLOCK_MANAGER_LOCKING is not set
+CONFIG_DM_BIO_PRISON=y
+CONFIG_DM_PERSISTENT_DATA=y
+CONFIG_DM_CRYPT=y
+CONFIG_DM_SNAPSHOT=y
+CONFIG_DM_THIN_PROVISIONING=y
+# CONFIG_DM_CACHE is not set
+# CONFIG_DM_ERA is not set
+CONFIG_DM_MIRROR=y
+# CONFIG_DM_LOG_USERSPACE is not set
+CONFIG_DM_RAID=y
+# CONFIG_DM_ZERO is not set
+CONFIG_DM_MULTIPATH=y
+CONFIG_DM_MULTIPATH_QL=y
+CONFIG_DM_MULTIPATH_ST=y
+# CONFIG_DM_DELAY is not set
+# CONFIG_DM_UEVENT is not set
+# CONFIG_DM_FLAKEY is not set
+# CONFIG_DM_VERITY is not set
+# CONFIG_DM_SWITCH is not set
+# CONFIG_DM_LOG_WRITES is not set
+# CONFIG_TARGET_CORE is not set
+CONFIG_FUSION=y
+# CONFIG_FUSION_SPI is not set
+# CONFIG_FUSION_SAS is not set
+CONFIG_FUSION_MAX_SGE=128
+# CONFIG_FUSION_LOGGING is not set
+
+#
+# IEEE 1394 (FireWire) support
+#
+# CONFIG_FIREWIRE is not set
+# CONFIG_FIREWIRE_NOSY is not set
+CONFIG_NETDEVICES=y
+CONFIG_MII=y
+CONFIG_NET_CORE=y
+CONFIG_BONDING=y
+CONFIG_DUMMY=m
+# CONFIG_EQUALIZER is not set
+# CONFIG_NET_FC is not set
+CONFIG_IFB=m
+# CONFIG_NET_TEAM is not set
+CONFIG_MACVLAN=m
+CONFIG_MACVTAP=m
+# CONFIG_VXLAN is not set
+# CONFIG_MACSEC is not set
+CONFIG_NETCONSOLE=y
+CONFIG_NETPOLL=y
+CONFIG_NET_POLL_CONTROLLER=y
+CONFIG_TUN=y
+# CONFIG_TUN_VNET_CROSS_LE is not set
+CONFIG_VETH=m
+# CONFIG_NLMON is not set
+# CONFIG_ARCNET is not set
+
+#
+# CAIF transport drivers
+#
+
+#
+# Distributed Switch Architecture drivers
+#
+CONFIG_ETHERNET=y
+CONFIG_MDIO=y
+CONFIG_NET_VENDOR_3COM=y
+# CONFIG_VORTEX is not set
+# CONFIG_TYPHOON is not set
+CONFIG_NET_VENDOR_ADAPTEC=y
+# CONFIG_ADAPTEC_STARFIRE is not set
+CONFIG_NET_VENDOR_AGERE=y
+# CONFIG_ET131X is not set
+CONFIG_NET_VENDOR_ALACRITECH=y
+# CONFIG_SLICOSS is not set
+CONFIG_NET_VENDOR_ALTEON=y
+# CONFIG_ACENIC is not set
+# CONFIG_ALTERA_TSE is not set
+CONFIG_NET_VENDOR_AMAZON=y
+CONFIG_NET_VENDOR_AMD=y
+# CONFIG_AMD8111_ETH is not set
+# CONFIG_PCNET32 is not set
+# CONFIG_AMD_XGBE_HAVE_ECC is not set
+CONFIG_NET_VENDOR_ARC=y
+CONFIG_NET_VENDOR_ATHEROS=y
+# CONFIG_ATL2 is not set
+# CONFIG_ATL1 is not set
+# CONFIG_ATL1E is not set
+# CONFIG_ATL1C is not set
+# CONFIG_ALX is not set
+# CONFIG_NET_VENDOR_AURORA is not set
+CONFIG_NET_CADENCE=y
+# CONFIG_MACB is not set
+CONFIG_NET_VENDOR_BROADCOM=y
+CONFIG_B44=y
+CONFIG_B44_PCI_AUTOSELECT=y
+CONFIG_B44_PCICORE_AUTOSELECT=y
+CONFIG_B44_PCI=y
+CONFIG_BCMGENET=y
+CONFIG_BNX2=y
+CONFIG_CNIC=y
+CONFIG_TIGON3=y
+CONFIG_BNX2X=y
+CONFIG_BNXT=y
+# CONFIG_BNXT_DCB is not set
+CONFIG_NET_VENDOR_BROCADE=y
+CONFIG_BNA=y
+CONFIG_NET_VENDOR_CAVIUM=y
+CONFIG_THUNDER_NIC_PF=y
+CONFIG_THUNDER_NIC_VF=y
+CONFIG_THUNDER_NIC_BGX=y
+CONFIG_THUNDER_NIC_RGX=y
+CONFIG_LIQUIDIO=y
+CONFIG_LIQUIDIO_VF=y
+CONFIG_NET_VENDOR_CHELSIO=y
+CONFIG_CHELSIO_T1=y
+CONFIG_CHELSIO_T1_1G=y
+CONFIG_CHELSIO_T3=y
+CONFIG_CHELSIO_T4=y
+CONFIG_CHELSIO_T4_DCB=y
+CONFIG_CHELSIO_T4VF=y
+CONFIG_NET_VENDOR_CISCO=y
+# CONFIG_ENIC is not set
+# CONFIG_DNET is not set
+CONFIG_NET_VENDOR_DEC=y
+# CONFIG_NET_TULIP is not set
+CONFIG_NET_VENDOR_DLINK=y
+# CONFIG_DL2K is not set
+# CONFIG_SUNDANCE is not set
+CONFIG_NET_VENDOR_EMULEX=y
+# CONFIG_BE2NET is not set
+CONFIG_NET_VENDOR_EZCHIP=y
+CONFIG_NET_VENDOR_EXAR=y
+# CONFIG_S2IO is not set
+# CONFIG_VXGE is not set
+CONFIG_NET_VENDOR_HP=y
+# CONFIG_HP100 is not set
+CONFIG_NET_VENDOR_INTEL=y
+# CONFIG_E100 is not set
+# CONFIG_E1000 is not set
+# CONFIG_E1000E is not set
+# CONFIG_IGB is not set
+# CONFIG_IGBVF is not set
+# CONFIG_IXGB is not set
+# CONFIG_IXGBE is not set
+# CONFIG_IXGBEVF is not set
+# CONFIG_I40E is not set
+# CONFIG_I40EVF is not set
+# CONFIG_FM10K is not set
+CONFIG_NET_VENDOR_I825XX=y
+# CONFIG_JME is not set
+CONFIG_NET_VENDOR_MARVELL=y
+# CONFIG_MVMDIO is not set
+# CONFIG_SKGE is not set
+CONFIG_SKY2=y
+# CONFIG_SKY2_DEBUG is not set
+CONFIG_NET_VENDOR_MELLANOX=y
+# CONFIG_MLX4_EN is not set
+# CONFIG_MLX4_CORE is not set
+# CONFIG_MLX5_CORE is not set
+# CONFIG_MLXSW_CORE is not set
+CONFIG_NET_VENDOR_MICREL=y
+# CONFIG_KS8851 is not set
+# CONFIG_KS8851_MLL is not set
+# CONFIG_KSZ884X_PCI is not set
+CONFIG_NET_VENDOR_MICROCHIP=y
+# CONFIG_ENC28J60 is not set
+# CONFIG_ENCX24J600 is not set
+CONFIG_NET_VENDOR_MYRI=y
+# CONFIG_MYRI10GE is not set
+# CONFIG_FEALNX is not set
+CONFIG_NET_VENDOR_NATSEMI=y
+# CONFIG_NATSEMI is not set
+# CONFIG_NS83820 is not set
+CONFIG_NET_VENDOR_NETRONOME=y
+# CONFIG_NFP_NETVF is not set
+CONFIG_NET_VENDOR_8390=y
+# CONFIG_NE2K_PCI is not set
+CONFIG_NET_VENDOR_NVIDIA=y
+# CONFIG_FORCEDETH is not set
+CONFIG_NET_VENDOR_OKI=y
+# CONFIG_ETHOC is not set
+CONFIG_NET_PACKET_ENGINE=y
+# CONFIG_HAMACHI is not set
+# CONFIG_YELLOWFIN is not set
+CONFIG_NET_VENDOR_QLOGIC=y
+CONFIG_QLA3XXX=y
+CONFIG_QLCNIC=y
+CONFIG_QLCNIC_DCB=y
+CONFIG_QLCNIC_HWMON=y
+CONFIG_QLGE=y
+CONFIG_NETXEN_NIC=y
+CONFIG_QED=y
+CONFIG_QEDE=y
+CONFIG_NET_VENDOR_QUALCOMM=y
+# CONFIG_QCOM_EMAC is not set
+CONFIG_NET_VENDOR_REALTEK=y
+# CONFIG_8139CP is not set
+# CONFIG_8139TOO is not set
+# CONFIG_R8169 is not set
+CONFIG_NET_VENDOR_RENESAS=y
+CONFIG_NET_VENDOR_RDC=y
+# CONFIG_R6040 is not set
+CONFIG_NET_VENDOR_ROCKER=y
+CONFIG_NET_VENDOR_SAMSUNG=y
+# CONFIG_SXGBE_ETH is not set
+CONFIG_NET_VENDOR_SEEQ=y
+CONFIG_NET_VENDOR_SILAN=y
+# CONFIG_SC92031 is not set
+CONFIG_NET_VENDOR_SIS=y
+# CONFIG_SIS900 is not set
+# CONFIG_SIS190 is not set
+CONFIG_NET_VENDOR_SOLARFLARE=y
+# CONFIG_SFC is not set
+# CONFIG_SFC_FALCON is not set
+CONFIG_NET_VENDOR_SMSC=y
+# CONFIG_EPIC100 is not set
+# CONFIG_SMSC911X is not set
+# CONFIG_SMSC9420 is not set
+CONFIG_NET_VENDOR_STMICRO=y
+# CONFIG_STMMAC_ETH is not set
+CONFIG_NET_VENDOR_SUN=y
+# CONFIG_HAPPYMEAL is not set
+# CONFIG_SUNGEM is not set
+# CONFIG_CASSINI is not set
+# CONFIG_NIU is not set
+CONFIG_NET_VENDOR_SYNOPSYS=y
+CONFIG_NET_VENDOR_TEHUTI=y
+# CONFIG_TEHUTI is not set
+CONFIG_NET_VENDOR_TI=y
+# CONFIG_TI_CPSW_ALE is not set
+# CONFIG_TLAN is not set
+CONFIG_TILE_NET=y
+CONFIG_NET_VENDOR_VIA=y
+# CONFIG_VIA_RHINE is not set
+# CONFIG_VIA_VELOCITY is not set
+CONFIG_NET_VENDOR_WIZNET=y
+# CONFIG_WIZNET_W5100 is not set
+# CONFIG_WIZNET_W5300 is not set
+# CONFIG_FDDI is not set
+# CONFIG_HIPPI is not set
+CONFIG_PHYLIB=y
+CONFIG_SWPHY=y
+
+#
+# MDIO bus device drivers
+#
+CONFIG_MDIO_BCM_UNIMAC=y
+CONFIG_MDIO_BITBANG=y
+CONFIG_MDIO_CAVIUM=y
+CONFIG_MDIO_GPIO=y
+CONFIG_MDIO_OCTEON=y
+CONFIG_MDIO_THUNDER=y
+
+#
+# MII PHY device drivers
+#
+CONFIG_AMD_PHY=y
+CONFIG_AQUANTIA_PHY=y
+CONFIG_AT803X_PHY=y
+CONFIG_BCM7XXX_PHY=y
+CONFIG_BCM87XX_PHY=y
+CONFIG_BCM_NET_PHYLIB=y
+CONFIG_BROADCOM_PHY=y
+CONFIG_CICADA_PHY=y
+CONFIG_DAVICOM_PHY=y
+CONFIG_DP83848_PHY=y
+CONFIG_DP83867_PHY=y
+CONFIG_FIXED_PHY=y
+CONFIG_ICPLUS_PHY=y
+CONFIG_INTEL_XWAY_PHY=y
+CONFIG_LSI_ET1011C_PHY=y
+CONFIG_LXT_PHY=y
+CONFIG_MARVELL_PHY=y
+CONFIG_MICREL_PHY=y
+CONFIG_MICROCHIP_PHY=y
+CONFIG_MICROSEMI_PHY=y
+CONFIG_NATIONAL_PHY=y
+CONFIG_QSEMI_PHY=y
+CONFIG_REALTEK_PHY=y
+CONFIG_SMSC_PHY=y
+CONFIG_STE10XP=y
+CONFIG_TERANETICS_PHY=y
+CONFIG_VITESSE_PHY=y
+CONFIG_XILINX_GMII2RGMII=y
+# CONFIG_MICREL_KS8995MA is not set
+# CONFIG_PPP is not set
+# CONFIG_SLIP is not set
+CONFIG_USB_NET_DRIVERS=y
+# CONFIG_USB_CATC is not set
+# CONFIG_USB_KAWETH is not set
+# CONFIG_USB_PEGASUS is not set
+# CONFIG_USB_RTL8150 is not set
+# CONFIG_USB_RTL8152 is not set
+# CONFIG_USB_LAN78XX is not set
+# CONFIG_USB_USBNET is not set
+# CONFIG_USB_IPHETH is not set
+# CONFIG_WLAN is not set
+
+#
+# Enable WiMAX (Networking options) to see the WiMAX drivers
+#
+# CONFIG_WAN is not set
+# CONFIG_VMXNET3 is not set
+# CONFIG_ISDN is not set
+# CONFIG_NVM is not set
+
+#
+# Input device support
+#
+CONFIG_INPUT=y
+CONFIG_INPUT_LEDS=y
+# CONFIG_INPUT_FF_MEMLESS is not set
+CONFIG_INPUT_POLLDEV=y
+# CONFIG_INPUT_SPARSEKMAP is not set
+# CONFIG_INPUT_MATRIXKMAP is not set
+
+#
+# Userland interfaces
+#
+# CONFIG_INPUT_MOUSEDEV is not set
+# CONFIG_INPUT_JOYDEV is not set
+# CONFIG_INPUT_EVDEV is not set
+# CONFIG_INPUT_EVBUG is not set
+
+#
+# Input Device Drivers
+#
+CONFIG_INPUT_KEYBOARD=y
+# CONFIG_KEYBOARD_ADP5588 is not set
+# CONFIG_KEYBOARD_ADP5589 is not set
+CONFIG_KEYBOARD_ATKBD=y
+# CONFIG_KEYBOARD_QT1070 is not set
+# CONFIG_KEYBOARD_QT2160 is not set
+# CONFIG_KEYBOARD_LKKBD is not set
+CONFIG_KEYBOARD_GPIO=y
+CONFIG_KEYBOARD_GPIO_POLLED=y
+# CONFIG_KEYBOARD_TCA6416 is not set
+# CONFIG_KEYBOARD_TCA8418 is not set
+# CONFIG_KEYBOARD_MATRIX is not set
+# CONFIG_KEYBOARD_LM8323 is not set
+# CONFIG_KEYBOARD_LM8333 is not set
+# CONFIG_KEYBOARD_MAX7359 is not set
+# CONFIG_KEYBOARD_MCS is not set
+# CONFIG_KEYBOARD_MPR121 is not set
+# CONFIG_KEYBOARD_NEWTON is not set
+# CONFIG_KEYBOARD_OPENCORES is not set
+# CONFIG_KEYBOARD_STOWAWAY is not set
+# CONFIG_KEYBOARD_SUNKBD is not set
+# CONFIG_KEYBOARD_XTKBD is not set
+CONFIG_INPUT_MOUSE=y
+CONFIG_MOUSE_PS2=y
+CONFIG_MOUSE_PS2_ALPS=y
+CONFIG_MOUSE_PS2_BYD=y
+CONFIG_MOUSE_PS2_LOGIPS2PP=y
+CONFIG_MOUSE_PS2_SYNAPTICS=y
+CONFIG_MOUSE_PS2_CYPRESS=y
+CONFIG_MOUSE_PS2_TRACKPOINT=y
+# CONFIG_MOUSE_PS2_ELANTECH is not set
+# CONFIG_MOUSE_PS2_SENTELIC is not set
+# CONFIG_MOUSE_PS2_TOUCHKIT is not set
+CONFIG_MOUSE_PS2_FOCALTECH=y
+# CONFIG_MOUSE_SERIAL is not set
+# CONFIG_MOUSE_APPLETOUCH is not set
+# CONFIG_MOUSE_BCM5974 is not set
+# CONFIG_MOUSE_CYAPA is not set
+# CONFIG_MOUSE_ELAN_I2C is not set
+# CONFIG_MOUSE_VSXXXAA is not set
+# CONFIG_MOUSE_GPIO is not set
+# CONFIG_MOUSE_SYNAPTICS_I2C is not set
+# CONFIG_MOUSE_SYNAPTICS_USB is not set
+# CONFIG_INPUT_JOYSTICK is not set
+# CONFIG_INPUT_TABLET is not set
+# CONFIG_INPUT_TOUCHSCREEN is not set
+CONFIG_INPUT_MISC=y
+# CONFIG_INPUT_AD714X is not set
+# CONFIG_INPUT_BMA150 is not set
+# CONFIG_INPUT_E3X0_BUTTON is not set
+# CONFIG_INPUT_MMA8450 is not set
+# CONFIG_INPUT_MPU3050 is not set
+# CONFIG_INPUT_GP2A is not set
+# CONFIG_INPUT_GPIO_BEEPER is not set
+# CONFIG_INPUT_GPIO_TILT_POLLED is not set
+# CONFIG_INPUT_GPIO_DECODER is not set
+# CONFIG_INPUT_ATI_REMOTE2 is not set
+# CONFIG_INPUT_KEYSPAN_REMOTE is not set
+# CONFIG_INPUT_KXTJ9 is not set
+# CONFIG_INPUT_POWERMATE is not set
+# CONFIG_INPUT_YEALINK is not set
+# CONFIG_INPUT_CM109 is not set
+# CONFIG_INPUT_UINPUT is not set
+# CONFIG_INPUT_PCF8574 is not set
+# CONFIG_INPUT_PWM_BEEPER is not set
+# CONFIG_INPUT_GPIO_ROTARY_ENCODER is not set
+# CONFIG_INPUT_ADXL34X is not set
+# CONFIG_INPUT_IMS_PCU is not set
+# CONFIG_INPUT_CMA3000 is not set
+# CONFIG_INPUT_SOC_BUTTON_ARRAY is not set
+# CONFIG_INPUT_DRV260X_HAPTICS is not set
+# CONFIG_INPUT_DRV2665_HAPTICS is not set
+# CONFIG_INPUT_DRV2667_HAPTICS is not set
+# CONFIG_RMI4_CORE is not set
+
+#
+# Hardware I/O ports
+#
+CONFIG_SERIO=y
+CONFIG_SERIO_SERPORT=y
+# CONFIG_SERIO_PCIPS2 is not set
+CONFIG_SERIO_LIBPS2=y
+# CONFIG_SERIO_RAW is not set
+# CONFIG_SERIO_ALTERA_PS2 is not set
+# CONFIG_SERIO_PS2MULT is not set
+# CONFIG_SERIO_ARC_PS2 is not set
+# CONFIG_USERIO is not set
+# CONFIG_GAMEPORT is not set
+
+#
+# Character devices
+#
+CONFIG_TTY=y
+CONFIG_VT=y
+CONFIG_CONSOLE_TRANSLATIONS=y
+CONFIG_VT_CONSOLE=y
+CONFIG_HW_CONSOLE=y
+# CONFIG_VT_HW_CONSOLE_BINDING is not set
+CONFIG_UNIX98_PTYS=y
+# CONFIG_LEGACY_PTYS is not set
+CONFIG_SERIAL_NONSTANDARD=y
+# CONFIG_ROCKETPORT is not set
+# CONFIG_CYCLADES is not set
+# CONFIG_MOXA_INTELLIO is not set
+# CONFIG_MOXA_SMARTIO is not set
+# CONFIG_SYNCLINKMP is not set
+# CONFIG_SYNCLINK_GT is not set
+# CONFIG_NOZOMI is not set
+# CONFIG_ISI is not set
+# CONFIG_N_HDLC is not set
+# CONFIG_N_GSM is not set
+# CONFIG_TRACE_SINK is not set
+CONFIG_DEVMEM=y
+CONFIG_DEVKMEM=y
+
+#
+# Serial drivers
+#
+# CONFIG_SERIAL_8250 is not set
+
+#
+# Non-8250 serial port support
+#
+# CONFIG_SERIAL_KGDB_NMI is not set
+# CONFIG_SERIAL_MAX3100 is not set
+# CONFIG_SERIAL_MAX310X is not set
+# CONFIG_SERIAL_UARTLITE is not set
+CONFIG_SERIAL_CORE=y
+CONFIG_CONSOLE_POLL=y
+# CONFIG_SERIAL_JSM is not set
+# CONFIG_SERIAL_SCCNXP is not set
+# CONFIG_SERIAL_SC16IS7XX is not set
+# CONFIG_SERIAL_ALTERA_JTAGUART is not set
+# CONFIG_SERIAL_ALTERA_UART is not set
+# CONFIG_SERIAL_IFX6X60 is not set
+CONFIG_SERIAL_TILEGX=y
+# CONFIG_SERIAL_ARC is not set
+# CONFIG_SERIAL_RP2 is not set
+# CONFIG_SERIAL_FSL_LPUART is not set
+# CONFIG_TTY_PRINTK is not set
+CONFIG_HVC_DRIVER=y
+CONFIG_HVC_IRQ=y
+# CONFIG_IPMI_HANDLER is not set
+CONFIG_HW_RANDOM=y
+CONFIG_HW_RANDOM_TIMERIOMEM=m
+# CONFIG_R3964 is not set
+# CONFIG_APPLICOM is not set
+
+#
+# PCMCIA character devices
+#
+# CONFIG_RAW_DRIVER is not set
+# CONFIG_TCG_TPM is not set
+CONFIG_DEVPORT=y
+CONFIG_TILE_SROM=y
+# CONFIG_XILLYBUS is not set
+
+#
+# I2C support
+#
+CONFIG_I2C=y
+CONFIG_I2C_BOARDINFO=y
+CONFIG_I2C_COMPAT=y
+CONFIG_I2C_CHARDEV=y
+CONFIG_I2C_MUX=y
+
+#
+# Multiplexer I2C Chip support
+#
+# CONFIG_I2C_MUX_GPIO is not set
+CONFIG_I2C_MUX_PCA9541=y
+# CONFIG_I2C_MUX_PCA954x is not set
+CONFIG_I2C_MUX_REG=y
+CONFIG_I2C_MUX_MLXCPLD=m
+CONFIG_I2C_HELPER_AUTO=y
+CONFIG_I2C_ALGOBIT=y
+CONFIG_I2C_ALGOPCA=y
+
+#
+# I2C Hardware Bus support
+#
+
+#
+# PC SMBus host controller drivers
+#
+# CONFIG_I2C_ALI1535 is not set
+# CONFIG_I2C_ALI1563 is not set
+# CONFIG_I2C_ALI15X3 is not set
+# CONFIG_I2C_AMD756 is not set
+# CONFIG_I2C_AMD8111 is not set
+# CONFIG_I2C_I801 is not set
+# CONFIG_I2C_ISCH is not set
+# CONFIG_I2C_PIIX4 is not set
+# CONFIG_I2C_NFORCE2 is not set
+# CONFIG_I2C_SIS5595 is not set
+# CONFIG_I2C_SIS630 is not set
+# CONFIG_I2C_SIS96X is not set
+# CONFIG_I2C_VIA is not set
+# CONFIG_I2C_VIAPRO is not set
+
+#
+# I2C system bus drivers (mostly embedded / system-on-chip)
+#
+# CONFIG_I2C_CBUS_GPIO is not set
+# CONFIG_I2C_DESIGNWARE_PLATFORM is not set
+# CONFIG_I2C_DESIGNWARE_PCI is not set
+CONFIG_I2C_GPIO=y
+# CONFIG_I2C_OCORES is not set
+CONFIG_I2C_PCA_PLATFORM=y
+# CONFIG_I2C_PXA_PCI is not set
+# CONFIG_I2C_SIMTEC is not set
+CONFIG_I2C_TILE=y
+# CONFIG_I2C_XILINX is not set
+
+#
+# External I2C/SMBus adapter drivers
+#
+# CONFIG_I2C_DIOLAN_U2C is not set
+# CONFIG_I2C_PARPORT_LIGHT is not set
+# CONFIG_I2C_ROBOTFUZZ_OSIF is not set
+# CONFIG_I2C_TAOS_EVM is not set
+# CONFIG_I2C_TINY_USB is not set
+
+#
+# Other I2C/SMBus bus drivers
+#
+# CONFIG_I2C_STUB is not set
+# CONFIG_I2C_SLAVE is not set
+# CONFIG_I2C_DEBUG_CORE is not set
+# CONFIG_I2C_DEBUG_ALGO is not set
+CONFIG_I2C_DEBUG_BUS=y
+CONFIG_SPI=y
+# CONFIG_SPI_DEBUG is not set
+CONFIG_SPI_MASTER=y
+
+#
+# SPI Master Controller Drivers
+#
+# CONFIG_SPI_ALTERA is not set
+# CONFIG_SPI_AXI_SPI_ENGINE is not set
+CONFIG_SPI_BITBANG=y
+# CONFIG_SPI_CADENCE is not set
+# CONFIG_SPI_DESIGNWARE is not set
+CONFIG_SPI_GPIO=y
+# CONFIG_SPI_OC_TINY is not set
+CONFIG_SPI_PXA2XX=y
+# CONFIG_SPI_PXA2XX_PCI is not set
+# CONFIG_SPI_ROCKCHIP is not set
+# CONFIG_SPI_SC18IS602 is not set
+# CONFIG_SPI_XCOMM is not set
+# CONFIG_SPI_XILINX is not set
+# CONFIG_SPI_ZYNQMP_GQSPI is not set
+
+#
+# SPI Protocol Masters
+#
+# CONFIG_SPI_SPIDEV is not set
+# CONFIG_SPI_LOOPBACK_TEST is not set
+# CONFIG_SPI_TLE62X0 is not set
+# CONFIG_SPMI is not set
+# CONFIG_HSI is not set
+
+#
+# PPS support
+#
+CONFIG_PPS=y
+# CONFIG_PPS_DEBUG is not set
+
+#
+# PPS clients support
+#
+# CONFIG_PPS_CLIENT_KTIMER is not set
+# CONFIG_PPS_CLIENT_LDISC is not set
+# CONFIG_PPS_CLIENT_GPIO is not set
+
+#
+# PPS generators support
+#
+
+#
+# PTP clock support
+#
+CONFIG_PTP_1588_CLOCK=y
+
+#
+# Enable PHYLIB and NETWORK_PHY_TIMESTAMPING to see the additional clocks.
+#
+CONFIG_GPIOLIB=y
+CONFIG_GPIOLIB_IRQCHIP=y
+# CONFIG_DEBUG_GPIO is not set
+CONFIG_GPIO_SYSFS=y
+
+#
+# Memory mapped GPIO drivers
+#
+# CONFIG_GPIO_DWAPB is not set
+# CONFIG_GPIO_GENERIC_PLATFORM is not set
+# CONFIG_GPIO_MOCKUP is not set
+
+#
+# I2C GPIO expanders
+#
+# CONFIG_GPIO_ADP5588 is not set
+# CONFIG_GPIO_MAX7300 is not set
+# CONFIG_GPIO_MAX732X is not set
+CONFIG_GPIO_PCA953X=y
+CONFIG_GPIO_PCA953X_IRQ=y
+CONFIG_GPIO_PCF857X=y
+# CONFIG_GPIO_TPIC2810 is not set
+
+#
+# MFD GPIO expanders
+#
+
+#
+# PCI GPIO expanders
+#
+# CONFIG_GPIO_BT8XX is not set
+# CONFIG_GPIO_RDC321X is not set
+
+#
+# SPI GPIO expanders
+#
+# CONFIG_GPIO_MAX7301 is not set
+# CONFIG_GPIO_MC33880 is not set
+# CONFIG_GPIO_PISOSR is not set
+
+#
+# SPI or I2C GPIO expanders
+#
+
+#
+# USB GPIO expanders
+#
+# CONFIG_W1 is not set
+# CONFIG_POWER_AVS is not set
+# CONFIG_POWER_RESET is not set
+# CONFIG_POWER_SUPPLY is not set
+CONFIG_HWMON=y
+CONFIG_HWMON_VID=y
+CONFIG_HWMON_DEBUG_CHIP=y
+
+#
+# Native drivers
+#
+# CONFIG_SENSORS_AD7314 is not set
+# CONFIG_SENSORS_AD7414 is not set
+# CONFIG_SENSORS_AD7418 is not set
+# CONFIG_SENSORS_ADM1021 is not set
+# CONFIG_SENSORS_ADM1025 is not set
+# CONFIG_SENSORS_ADM1026 is not set
+# CONFIG_SENSORS_ADM1029 is not set
+# CONFIG_SENSORS_ADM1031 is not set
+# CONFIG_SENSORS_ADM9240 is not set
+# CONFIG_SENSORS_ADT7310 is not set
+# CONFIG_SENSORS_ADT7410 is not set
+# CONFIG_SENSORS_ADT7411 is not set
+# CONFIG_SENSORS_ADT7462 is not set
+# CONFIG_SENSORS_ADT7470 is not set
+# CONFIG_SENSORS_ADT7475 is not set
+# CONFIG_SENSORS_ASC7621 is not set
+# CONFIG_SENSORS_ATXP1 is not set
+# CONFIG_SENSORS_DS620 is not set
+# CONFIG_SENSORS_DS1621 is not set
+# CONFIG_SENSORS_I5K_AMB is not set
+# CONFIG_SENSORS_F71805F is not set
+# CONFIG_SENSORS_F71882FG is not set
+# CONFIG_SENSORS_F75375S is not set
+# CONFIG_SENSORS_FTSTEUTATES is not set
+# CONFIG_SENSORS_GL518SM is not set
+# CONFIG_SENSORS_GL520SM is not set
+# CONFIG_SENSORS_G760A is not set
+# CONFIG_SENSORS_G762 is not set
+# CONFIG_SENSORS_GPIO_FAN is not set
+# CONFIG_SENSORS_HIH6130 is not set
+# CONFIG_SENSORS_IT87 is not set
+# CONFIG_SENSORS_JC42 is not set
+# CONFIG_SENSORS_POWR1220 is not set
+# CONFIG_SENSORS_LINEAGE is not set
+# CONFIG_SENSORS_LTC2945 is not set
+# CONFIG_SENSORS_LTC2990 is not set
+# CONFIG_SENSORS_LTC4151 is not set
+# CONFIG_SENSORS_LTC4215 is not set
+# CONFIG_SENSORS_LTC4222 is not set
+# CONFIG_SENSORS_LTC4245 is not set
+# CONFIG_SENSORS_LTC4260 is not set
+# CONFIG_SENSORS_LTC4261 is not set
+# CONFIG_SENSORS_MAX1111 is not set
+# CONFIG_SENSORS_MAX16065 is not set
+# CONFIG_SENSORS_MAX1619 is not set
+# CONFIG_SENSORS_MAX1668 is not set
+# CONFIG_SENSORS_MAX197 is not set
+# CONFIG_SENSORS_MAX31722 is not set
+CONFIG_SENSORS_MAX6639=y
+# CONFIG_SENSORS_MAX6642 is not set
+# CONFIG_SENSORS_MAX6650 is not set
+# CONFIG_SENSORS_MAX6697 is not set
+# CONFIG_SENSORS_MAX31790 is not set
+# CONFIG_SENSORS_MCP3021 is not set
+# CONFIG_SENSORS_TC654 is not set
+# CONFIG_SENSORS_ADCXX is not set
+CONFIG_SENSORS_LM63=y
+CONFIG_SENSORS_LM70=y
+CONFIG_SENSORS_LM73=y
+CONFIG_SENSORS_LM75=y
+CONFIG_SENSORS_LM77=y
+CONFIG_SENSORS_LM78=y
+CONFIG_SENSORS_LM80=y
+CONFIG_SENSORS_LM83=y
+CONFIG_SENSORS_LM85=y
+CONFIG_SENSORS_LM87=y
+CONFIG_SENSORS_LM90=y
+CONFIG_SENSORS_LM92=y
+CONFIG_SENSORS_LM93=y
+CONFIG_SENSORS_LM95234=y
+CONFIG_SENSORS_LM95241=y
+CONFIG_SENSORS_LM95245=y
+# CONFIG_SENSORS_PC87360 is not set
+# CONFIG_SENSORS_PC87427 is not set
+# CONFIG_SENSORS_NTC_THERMISTOR is not set
+# CONFIG_SENSORS_NCT6683 is not set
+# CONFIG_SENSORS_NCT6775 is not set
+# CONFIG_SENSORS_NCT7802 is not set
+# CONFIG_SENSORS_NCT7904 is not set
+# CONFIG_SENSORS_PCF8591 is not set
+# CONFIG_PMBUS is not set
+# CONFIG_SENSORS_SHT15 is not set
+# CONFIG_SENSORS_SHT21 is not set
+# CONFIG_SENSORS_SHT3x is not set
+# CONFIG_SENSORS_SHTC1 is not set
+# CONFIG_SENSORS_SIS5595 is not set
+# CONFIG_SENSORS_DME1737 is not set
+# CONFIG_SENSORS_EMC1403 is not set
+# CONFIG_SENSORS_EMC2103 is not set
+# CONFIG_SENSORS_EMC6W201 is not set
+# CONFIG_SENSORS_SMSC47M1 is not set
+# CONFIG_SENSORS_SMSC47M192 is not set
+# CONFIG_SENSORS_SMSC47B397 is not set
+# CONFIG_SENSORS_SCH56XX_COMMON is not set
+# CONFIG_SENSORS_SCH5627 is not set
+# CONFIG_SENSORS_SCH5636 is not set
+# CONFIG_SENSORS_SMM665 is not set
+# CONFIG_SENSORS_ADC128D818 is not set
+# CONFIG_SENSORS_ADS1015 is not set
+# CONFIG_SENSORS_ADS7828 is not set
+# CONFIG_SENSORS_ADS7871 is not set
+# CONFIG_SENSORS_AMC6821 is not set
+# CONFIG_SENSORS_INA209 is not set
+# CONFIG_SENSORS_INA2XX is not set
+# CONFIG_SENSORS_INA3221 is not set
+# CONFIG_SENSORS_TC74 is not set
+# CONFIG_SENSORS_THMC50 is not set
+# CONFIG_SENSORS_TMP102 is not set
+# CONFIG_SENSORS_TMP103 is not set
+# CONFIG_SENSORS_TMP108 is not set
+# CONFIG_SENSORS_TMP401 is not set
+# CONFIG_SENSORS_TMP421 is not set
+# CONFIG_SENSORS_VIA686A is not set
+# CONFIG_SENSORS_VT1211 is not set
+# CONFIG_SENSORS_VT8231 is not set
+# CONFIG_SENSORS_W83781D is not set
+# CONFIG_SENSORS_W83791D is not set
+# CONFIG_SENSORS_W83792D is not set
+# CONFIG_SENSORS_W83793 is not set
+# CONFIG_SENSORS_W83795 is not set
+# CONFIG_SENSORS_W83L785TS is not set
+# CONFIG_SENSORS_W83L786NG is not set
+# CONFIG_SENSORS_W83627HF is not set
+# CONFIG_SENSORS_W83627EHF is not set
+CONFIG_THERMAL=y
+CONFIG_THERMAL_HWMON=y
+# CONFIG_THERMAL_WRITABLE_TRIPS is not set
+CONFIG_THERMAL_DEFAULT_GOV_STEP_WISE=y
+# CONFIG_THERMAL_DEFAULT_GOV_FAIR_SHARE is not set
+# CONFIG_THERMAL_DEFAULT_GOV_USER_SPACE is not set
+# CONFIG_THERMAL_DEFAULT_GOV_POWER_ALLOCATOR is not set
+# CONFIG_THERMAL_GOV_FAIR_SHARE is not set
+CONFIG_THERMAL_GOV_STEP_WISE=y
+# CONFIG_THERMAL_GOV_BANG_BANG is not set
+# CONFIG_THERMAL_GOV_USER_SPACE is not set
+# CONFIG_THERMAL_GOV_POWER_ALLOCATOR is not set
+# CONFIG_THERMAL_EMULATION is not set
+
+#
+# ACPI INT340X thermal drivers
+#
+CONFIG_WATCHDOG=y
+# CONFIG_WATCHDOG_CORE is not set
+CONFIG_WATCHDOG_NOWAYOUT=y
+# CONFIG_WATCHDOG_SYSFS is not set
+
+#
+# Watchdog Device Drivers
+#
+# CONFIG_SOFT_WATCHDOG is not set
+# CONFIG_XILINX_WATCHDOG is not set
+# CONFIG_ZIIRAVE_WATCHDOG is not set
+# CONFIG_CADENCE_WATCHDOG is not set
+# CONFIG_DW_WATCHDOG is not set
+# CONFIG_MAX63XX_WATCHDOG is not set
+# CONFIG_ALIM7101_WDT is not set
+# CONFIG_I6300ESB_WDT is not set
+# CONFIG_MEN_A21_WDT is not set
+
+#
+# PCI-based Watchdog Cards
+#
+# CONFIG_PCIPCWATCHDOG is not set
+# CONFIG_WDTPCI is not set
+
+#
+# USB-based Watchdog Cards
+#
+# CONFIG_USBPCWATCHDOG is not set
+
+#
+# Watchdog Pretimeout Governors
+#
+# CONFIG_WATCHDOG_PRETIMEOUT_GOV is not set
+CONFIG_SSB_POSSIBLE=y
+
+#
+# Sonics Silicon Backplane
+#
+CONFIG_SSB=y
+CONFIG_SSB_SPROM=y
+CONFIG_SSB_PCIHOST_POSSIBLE=y
+CONFIG_SSB_PCIHOST=y
+# CONFIG_SSB_B43_PCI_BRIDGE is not set
+CONFIG_SSB_SDIOHOST_POSSIBLE=y
+# CONFIG_SSB_SDIOHOST is not set
+# CONFIG_SSB_SILENT is not set
+# CONFIG_SSB_DEBUG is not set
+CONFIG_SSB_DRIVER_PCICORE_POSSIBLE=y
+CONFIG_SSB_DRIVER_PCICORE=y
+# CONFIG_SSB_DRIVER_GPIO is not set
+CONFIG_BCMA_POSSIBLE=y
+
+#
+# Broadcom specific AMBA
+#
+# CONFIG_BCMA is not set
+
+#
+# Multifunction device drivers
+#
+# CONFIG_MFD_CORE is not set
+# CONFIG_MFD_AS3711 is not set
+# CONFIG_PMIC_ADP5520 is not set
+# CONFIG_MFD_AAT2870_CORE is not set
+# CONFIG_MFD_BCM590XX is not set
+# CONFIG_MFD_AXP20X_I2C is not set
+# CONFIG_PMIC_DA903X is not set
+# CONFIG_MFD_DA9052_SPI is not set
+# CONFIG_MFD_DA9052_I2C is not set
+# CONFIG_MFD_DA9055 is not set
+# CONFIG_MFD_DA9062 is not set
+# CONFIG_MFD_DA9063 is not set
+# CONFIG_MFD_DA9150 is not set
+# CONFIG_MFD_DLN2 is not set
+# CONFIG_MFD_MC13XXX_SPI is not set
+# CONFIG_MFD_MC13XXX_I2C is not set
+# CONFIG_HTC_PASIC3 is not set
+# CONFIG_HTC_I2CPLD is not set
+# CONFIG_LPC_ICH is not set
+# CONFIG_LPC_SCH is not set
+# CONFIG_INTEL_SOC_PMIC is not set
+# CONFIG_MFD_JANZ_CMODIO is not set
+# CONFIG_MFD_KEMPLD is not set
+# CONFIG_MFD_88PM800 is not set
+# CONFIG_MFD_88PM805 is not set
+# CONFIG_MFD_88PM860X is not set
+# CONFIG_MFD_MAX14577 is not set
+# CONFIG_MFD_MAX77693 is not set
+# CONFIG_MFD_MAX77843 is not set
+# CONFIG_MFD_MAX8907 is not set
+# CONFIG_MFD_MAX8925 is not set
+# CONFIG_MFD_MAX8997 is not set
+# CONFIG_MFD_MAX8998 is not set
+# CONFIG_MFD_MT6397 is not set
+# CONFIG_MFD_MENF21BMC is not set
+# CONFIG_EZX_PCAP is not set
+# CONFIG_MFD_VIPERBOARD is not set
+# CONFIG_MFD_RETU is not set
+# CONFIG_MFD_PCF50633 is not set
+# CONFIG_MFD_RDC321X is not set
+# CONFIG_MFD_RTSX_PCI is not set
+# CONFIG_MFD_RT5033 is not set
+# CONFIG_MFD_RTSX_USB is not set
+# CONFIG_MFD_RC5T583 is not set
+# CONFIG_MFD_SEC_CORE is not set
+# CONFIG_MFD_SI476X_CORE is not set
+# CONFIG_MFD_SM501 is not set
+# CONFIG_MFD_SKY81452 is not set
+# CONFIG_MFD_SMSC is not set
+# CONFIG_ABX500_CORE is not set
+# CONFIG_MFD_SYSCON is not set
+# CONFIG_MFD_TI_AM335X_TSCADC is not set
+# CONFIG_MFD_LP3943 is not set
+# CONFIG_MFD_LP8788 is not set
+# CONFIG_MFD_PALMAS is not set
+# CONFIG_TPS6105X is not set
+# CONFIG_TPS65010 is not set
+# CONFIG_TPS6507X is not set
+# CONFIG_MFD_TPS65086 is not set
+# CONFIG_MFD_TPS65090 is not set
+# CONFIG_MFD_TPS65217 is not set
+# CONFIG_MFD_TI_LP873X is not set
+# CONFIG_MFD_TPS65218 is not set
+# CONFIG_MFD_TPS6586X is not set
+# CONFIG_MFD_TPS65910 is not set
+# CONFIG_MFD_TPS65912_I2C is not set
+# CONFIG_MFD_TPS65912_SPI is not set
+# CONFIG_MFD_TPS80031 is not set
+# CONFIG_TWL4030_CORE is not set
+# CONFIG_TWL6040_CORE is not set
+# CONFIG_MFD_WL1273_CORE is not set
+# CONFIG_MFD_LM3533 is not set
+# CONFIG_MFD_TMIO is not set
+# CONFIG_MFD_VX855 is not set
+# CONFIG_MFD_ARIZONA_I2C is not set
+# CONFIG_MFD_ARIZONA_SPI is not set
+# CONFIG_MFD_WM8400 is not set
+# CONFIG_MFD_WM831X_I2C is not set
+# CONFIG_MFD_WM831X_SPI is not set
+# CONFIG_MFD_WM8350_I2C is not set
+# CONFIG_MFD_WM8994 is not set
+# CONFIG_REGULATOR is not set
+# CONFIG_MEDIA_SUPPORT is not set
+
+#
+# Graphics support
+#
+# CONFIG_VGA_ARB is not set
+CONFIG_DRM=y
+# CONFIG_DRM_DP_AUX_CHARDEV is not set
+# CONFIG_DRM_DEBUG_MM is not set
+CONFIG_DRM_KMS_HELPER=y
+CONFIG_DRM_KMS_FB_HELPER=y
+CONFIG_DRM_FBDEV_EMULATION=y
+# CONFIG_DRM_LOAD_EDID_FIRMWARE is not set
+
+#
+# I2C encoder or helper chips
+#
+# CONFIG_DRM_I2C_CH7006 is not set
+# CONFIG_DRM_I2C_SIL164 is not set
+# CONFIG_DRM_I2C_NXP_TDA998X is not set
+# CONFIG_DRM_RADEON is not set
+# CONFIG_DRM_AMDGPU is not set
+
+#
+# ACP (Audio CoProcessor) Configuration
+#
+# CONFIG_DRM_NOUVEAU is not set
+# CONFIG_DRM_VGEM is not set
+CONFIG_DRM_UDL=y
+# CONFIG_DRM_AST is not set
+# CONFIG_DRM_MGAG200 is not set
+# CONFIG_DRM_CIRRUS_QEMU is not set
+# CONFIG_DRM_QXL is not set
+# CONFIG_DRM_BOCHS is not set
+CONFIG_DRM_BRIDGE=y
+
+#
+# Display Interface Bridges
+#
+# CONFIG_DRM_ANALOGIX_ANX78XX is not set
+# CONFIG_DRM_HISI_HIBMC is not set
+# CONFIG_DRM_LEGACY is not set
+
+#
+# Frame buffer Devices
+#
+CONFIG_FB=y
+# CONFIG_FIRMWARE_EDID is not set
+CONFIG_FB_CMDLINE=y
+CONFIG_FB_NOTIFY=y
+# CONFIG_FB_DDC is not set
+# CONFIG_FB_BOOT_VESA_SUPPORT is not set
+CONFIG_FB_CFB_FILLRECT=y
+CONFIG_FB_CFB_COPYAREA=y
+CONFIG_FB_CFB_IMAGEBLIT=y
+# CONFIG_FB_CFB_REV_PIXELS_IN_BYTE is not set
+CONFIG_FB_SYS_FILLRECT=y
+CONFIG_FB_SYS_COPYAREA=y
+CONFIG_FB_SYS_IMAGEBLIT=y
+# CONFIG_FB_FOREIGN_ENDIAN is not set
+CONFIG_FB_SYS_FOPS=y
+CONFIG_FB_DEFERRED_IO=y
+# CONFIG_FB_SVGALIB is not set
+# CONFIG_FB_MACMODES is not set
+CONFIG_FB_BACKLIGHT=y
+CONFIG_FB_MODE_HELPERS=y
+# CONFIG_FB_TILEBLITTING is not set
+
+#
+# Frame buffer hardware drivers
+#
+# CONFIG_FB_CIRRUS is not set
+# CONFIG_FB_PM2 is not set
+# CONFIG_FB_CYBER2000 is not set
+# CONFIG_FB_ASILIANT is not set
+# CONFIG_FB_IMSTT is not set
+CONFIG_FB_UVESA=y
+# CONFIG_FB_OPENCORES is not set
+# CONFIG_FB_S1D13XXX is not set
+# CONFIG_FB_NVIDIA is not set
+# CONFIG_FB_RIVA is not set
+# CONFIG_FB_I740 is not set
+# CONFIG_FB_MATROX is not set
+# CONFIG_FB_RADEON is not set
+# CONFIG_FB_ATY128 is not set
+# CONFIG_FB_ATY is not set
+# CONFIG_FB_S3 is not set
+# CONFIG_FB_SAVAGE is not set
+# CONFIG_FB_SIS is not set
+# CONFIG_FB_NEOMAGIC is not set
+# CONFIG_FB_KYRO is not set
+# CONFIG_FB_3DFX is not set
+# CONFIG_FB_VOODOO1 is not set
+# CONFIG_FB_VT8623 is not set
+# CONFIG_FB_TRIDENT is not set
+# CONFIG_FB_ARK is not set
+# CONFIG_FB_PM3 is not set
+# CONFIG_FB_CARMINE is not set
+# CONFIG_FB_SMSCUFX is not set
+CONFIG_FB_UDL=y
+# CONFIG_FB_IBM_GXT4500 is not set
+# CONFIG_FB_VIRTUAL is not set
+# CONFIG_FB_METRONOME is not set
+# CONFIG_FB_MB862XX is not set
+# CONFIG_FB_BROADSHEET is not set
+# CONFIG_FB_AUO_K190X is not set
+CONFIG_FB_SIMPLE=y
+# CONFIG_FB_SM712 is not set
+CONFIG_BACKLIGHT_LCD_SUPPORT=y
+CONFIG_LCD_CLASS_DEVICE=y
+# CONFIG_LCD_L4F00242T03 is not set
+# CONFIG_LCD_LMS283GF05 is not set
+# CONFIG_LCD_LTV350QV is not set
+# CONFIG_LCD_ILI922X is not set
+# CONFIG_LCD_ILI9320 is not set
+# CONFIG_LCD_TDO24M is not set
+# CONFIG_LCD_VGG2432A4 is not set
+# CONFIG_LCD_PLATFORM is not set
+# CONFIG_LCD_S6E63M0 is not set
+# CONFIG_LCD_LD9040 is not set
+# CONFIG_LCD_AMS369FG06 is not set
+# CONFIG_LCD_LMS501KF03 is not set
+# CONFIG_LCD_HX8357 is not set
+CONFIG_BACKLIGHT_CLASS_DEVICE=y
+CONFIG_BACKLIGHT_GENERIC=y
+# CONFIG_BACKLIGHT_PWM is not set
+# CONFIG_BACKLIGHT_PM8941_WLED is not set
+# CONFIG_BACKLIGHT_ADP8860 is not set
+# CONFIG_BACKLIGHT_ADP8870 is not set
+# CONFIG_BACKLIGHT_LM3630A is not set
+# CONFIG_BACKLIGHT_LM3639 is not set
+# CONFIG_BACKLIGHT_LP855X is not set
+CONFIG_BACKLIGHT_GPIO=y
+# CONFIG_BACKLIGHT_LV5207LP is not set
+# CONFIG_BACKLIGHT_BD6107 is not set
+# CONFIG_VGASTATE is not set
+CONFIG_HDMI=y
+
+#
+# Console display driver support
+#
+CONFIG_VGA_CONSOLE=y
+# CONFIG_VGACON_SOFT_SCROLLBACK is not set
+CONFIG_DUMMY_CONSOLE=y
+CONFIG_DUMMY_CONSOLE_COLUMNS=80
+CONFIG_DUMMY_CONSOLE_ROWS=25
+# CONFIG_FRAMEBUFFER_CONSOLE is not set
+CONFIG_LOGO=y
+CONFIG_LOGO_LINUX_MONO=y
+CONFIG_LOGO_LINUX_VGA16=y
+CONFIG_LOGO_LINUX_CLUT224=y
+# CONFIG_SOUND is not set
+
+#
+# HID support
+#
+CONFIG_HID=y
+# CONFIG_HID_BATTERY_STRENGTH is not set
+# CONFIG_HIDRAW is not set
+# CONFIG_UHID is not set
+CONFIG_HID_GENERIC=y
+
+#
+# Special HID drivers
+#
+# CONFIG_HID_A4TECH is not set
+# CONFIG_HID_ACRUX is not set
+# CONFIG_HID_APPLE is not set
+# CONFIG_HID_APPLEIR is not set
+# CONFIG_HID_AUREAL is not set
+# CONFIG_HID_BELKIN is not set
+# CONFIG_HID_BETOP_FF is not set
+# CONFIG_HID_CHERRY is not set
+# CONFIG_HID_CHICONY is not set
+# CONFIG_HID_CORSAIR is not set
+# CONFIG_HID_CMEDIA is not set
+# CONFIG_HID_CP2112 is not set
+# CONFIG_HID_CYPRESS is not set
+# CONFIG_HID_DRAGONRISE is not set
+# CONFIG_HID_EMS_FF is not set
+# CONFIG_HID_ELECOM is not set
+# CONFIG_HID_ELO is not set
+# CONFIG_HID_EZKEY is not set
+# CONFIG_HID_GEMBIRD is not set
+# CONFIG_HID_GFRM is not set
+# CONFIG_HID_HOLTEK is not set
+# CONFIG_HID_GT683R is not set
+# CONFIG_HID_KEYTOUCH is not set
+# CONFIG_HID_KYE is not set
+# CONFIG_HID_UCLOGIC is not set
+# CONFIG_HID_WALTOP is not set
+# CONFIG_HID_GYRATION is not set
+# CONFIG_HID_ICADE is not set
+# CONFIG_HID_TWINHAN is not set
+# CONFIG_HID_KENSINGTON is not set
+# CONFIG_HID_LCPOWER is not set
+# CONFIG_HID_LED is not set
+# CONFIG_HID_LENOVO is not set
+# CONFIG_HID_LOGITECH is not set
+# CONFIG_HID_MAGICMOUSE is not set
+# CONFIG_HID_MAYFLASH is not set
+# CONFIG_HID_MICROSOFT is not set
+# CONFIG_HID_MONTEREY is not set
+# CONFIG_HID_MULTITOUCH is not set
+# CONFIG_HID_NTRIG is not set
+# CONFIG_HID_ORTEK is not set
+# CONFIG_HID_PANTHERLORD is not set
+# CONFIG_HID_PENMOUNT is not set
+# CONFIG_HID_PETALYNX is not set
+# CONFIG_HID_PICOLCD is not set
+# CONFIG_HID_PLANTRONICS is not set
+# CONFIG_HID_PRIMAX is not set
+# CONFIG_HID_ROCCAT is not set
+# CONFIG_HID_SAITEK is not set
+# CONFIG_HID_SAMSUNG is not set
+# CONFIG_HID_SONY is not set
+# CONFIG_HID_SPEEDLINK is not set
+# CONFIG_HID_STEELSERIES is not set
+# CONFIG_HID_SUNPLUS is not set
+# CONFIG_HID_RMI is not set
+# CONFIG_HID_GREENASIA is not set
+# CONFIG_HID_SMARTJOYPLUS is not set
+# CONFIG_HID_TIVO is not set
+# CONFIG_HID_TOPSEED is not set
+# CONFIG_HID_THINGM is not set
+# CONFIG_HID_THRUSTMASTER is not set
+# CONFIG_HID_UDRAW_PS3 is not set
+# CONFIG_HID_WACOM is not set
+# CONFIG_HID_WIIMOTE is not set
+# CONFIG_HID_XINMO is not set
+# CONFIG_HID_ZEROPLUS is not set
+# CONFIG_HID_ZYDACRON is not set
+# CONFIG_HID_SENSOR_HUB is not set
+# CONFIG_HID_ALPS is not set
+
+#
+# USB HID support
+#
+CONFIG_USB_HID=y
+# CONFIG_HID_PID is not set
+# CONFIG_USB_HIDDEV is not set
+
+#
+# I2C HID support
+#
+# CONFIG_I2C_HID is not set
+CONFIG_USB_OHCI_LITTLE_ENDIAN=y
+CONFIG_USB_SUPPORT=y
+CONFIG_USB_COMMON=y
+CONFIG_USB_ARCH_HAS_HCD=y
+CONFIG_USB=y
+CONFIG_USB_ANNOUNCE_NEW_DEVICES=y
+
+#
+# Miscellaneous USB options
+#
+CONFIG_USB_DEFAULT_PERSIST=y
+# CONFIG_USB_DYNAMIC_MINORS is not set
+# CONFIG_USB_OTG_WHITELIST is not set
+# CONFIG_USB_OTG_BLACKLIST_HUB is not set
+CONFIG_USB_MON=y
+# CONFIG_USB_WUSB_CBAF is not set
+
+#
+# USB Host Controller Drivers
+#
+# CONFIG_USB_C67X00_HCD is not set
+# CONFIG_USB_XHCI_HCD is not set
+CONFIG_USB_EHCI_HCD=y
+# CONFIG_USB_EHCI_ROOT_HUB_TT is not set
+CONFIG_USB_EHCI_TT_NEWSCHED=y
+CONFIG_USB_EHCI_PCI=y
+CONFIG_USB_EHCI_HCD_PLATFORM=y
+# CONFIG_USB_OXU210HP_HCD is not set
+# CONFIG_USB_ISP116X_HCD is not set
+# CONFIG_USB_ISP1362_HCD is not set
+# CONFIG_USB_FOTG210_HCD is not set
+CONFIG_USB_MAX3421_HCD=y
+CONFIG_USB_OHCI_HCD=y
+CONFIG_USB_OHCI_HCD_PCI=y
+# CONFIG_USB_OHCI_HCD_SSB is not set
+# CONFIG_USB_OHCI_HCD_PLATFORM is not set
+# CONFIG_USB_UHCI_HCD is not set
+# CONFIG_USB_SL811_HCD is not set
+# CONFIG_USB_R8A66597_HCD is not set
+# CONFIG_USB_HCD_SSB is not set
+# CONFIG_USB_HCD_TEST_MODE is not set
+
+#
+# USB Device Class drivers
+#
+# CONFIG_USB_ACM is not set
+# CONFIG_USB_PRINTER is not set
+# CONFIG_USB_WDM is not set
+# CONFIG_USB_TMC is not set
+
+#
+# NOTE: USB_STORAGE depends on SCSI but BLK_DEV_SD may
+#
+
+#
+# also be needed; see USB_STORAGE Help for more info
+#
+CONFIG_USB_STORAGE=y
+# CONFIG_USB_STORAGE_DEBUG is not set
+# CONFIG_USB_STORAGE_REALTEK is not set
+# CONFIG_USB_STORAGE_DATAFAB is not set
+# CONFIG_USB_STORAGE_FREECOM is not set
+# CONFIG_USB_STORAGE_ISD200 is not set
+# CONFIG_USB_STORAGE_USBAT is not set
+# CONFIG_USB_STORAGE_SDDR09 is not set
+# CONFIG_USB_STORAGE_SDDR55 is not set
+# CONFIG_USB_STORAGE_JUMPSHOT is not set
+# CONFIG_USB_STORAGE_ALAUDA is not set
+# CONFIG_USB_STORAGE_ONETOUCH is not set
+# CONFIG_USB_STORAGE_KARMA is not set
+# CONFIG_USB_STORAGE_CYPRESS_ATACB is not set
+# CONFIG_USB_STORAGE_ENE_UB6250 is not set
+CONFIG_USB_UAS=y
+
+#
+# USB Imaging devices
+#
+# CONFIG_USB_MDC800 is not set
+# CONFIG_USB_MICROTEK is not set
+# CONFIG_USBIP_CORE is not set
+# CONFIG_USB_MUSB_HDRC is not set
+# CONFIG_USB_DWC3 is not set
+# CONFIG_USB_DWC2 is not set
+# CONFIG_USB_CHIPIDEA is not set
+# CONFIG_USB_ISP1760 is not set
+
+#
+# USB port drivers
+#
+# CONFIG_USB_SERIAL is not set
+
+#
+# USB Miscellaneous drivers
+#
+# CONFIG_USB_EMI62 is not set
+# CONFIG_USB_EMI26 is not set
+# CONFIG_USB_ADUTUX is not set
+# CONFIG_USB_SEVSEG is not set
+# CONFIG_USB_RIO500 is not set
+# CONFIG_USB_LEGOTOWER is not set
+# CONFIG_USB_LCD is not set
+# CONFIG_USB_CYPRESS_CY7C63 is not set
+# CONFIG_USB_CYTHERM is not set
+# CONFIG_USB_IDMOUSE is not set
+# CONFIG_USB_FTDI_ELAN is not set
+# CONFIG_USB_APPLEDISPLAY is not set
+# CONFIG_USB_SISUSBVGA is not set
+# CONFIG_USB_LD is not set
+# CONFIG_USB_TRANCEVIBRATOR is not set
+# CONFIG_USB_IOWARRIOR is not set
+# CONFIG_USB_TEST is not set
+# CONFIG_USB_EHSET_TEST_FIXTURE is not set
+# CONFIG_USB_ISIGHTFW is not set
+# CONFIG_USB_YUREX is not set
+# CONFIG_USB_EZUSB_FX2 is not set
+# CONFIG_USB_HSIC_USB3503 is not set
+# CONFIG_USB_HSIC_USB4604 is not set
+# CONFIG_USB_LINK_LAYER_TEST is not set
+# CONFIG_USB_CHAOSKEY is not set
+
+#
+# USB Physical Layer drivers
+#
+CONFIG_USB_PHY=y
+# CONFIG_NOP_USB_XCEIV is not set
+CONFIG_USB_GPIO_VBUS=y
+# CONFIG_USB_ISP1301 is not set
+# CONFIG_USB_GADGET is not set
+# CONFIG_USB_ULPI_BUS is not set
+# CONFIG_UWB is not set
+CONFIG_MMC=y
+# CONFIG_MMC_DEBUG is not set
+CONFIG_MMC_BLOCK=y
+CONFIG_MMC_BLOCK_MINORS=8
+CONFIG_MMC_BLOCK_BOUNCE=y
+# CONFIG_SDIO_UART is not set
+# CONFIG_MMC_TEST is not set
+
+#
+# MMC/SD/SDIO Host Controller Drivers
+#
+# CONFIG_MMC_SDHCI is not set
+# CONFIG_MMC_TIFM_SD is not set
+CONFIG_MMC_SPI=y
+# CONFIG_MMC_CB710 is not set
+# CONFIG_MMC_VIA_SDMMC is not set
+# CONFIG_MMC_VUB300 is not set
+CONFIG_MMC_USHC=y
+# CONFIG_MMC_USDHI6ROL0 is not set
+# CONFIG_MMC_TOSHIBA_PCI is not set
+# CONFIG_MMC_MTK is not set
+# CONFIG_MEMSTICK is not set
+CONFIG_NEW_LEDS=y
+CONFIG_LEDS_CLASS=y
+# CONFIG_LEDS_CLASS_FLASH is not set
+
+#
+# LED drivers
+#
+# CONFIG_LEDS_LM3530 is not set
+# CONFIG_LEDS_LM3642 is not set
+# CONFIG_LEDS_PCA9532 is not set
+# CONFIG_LEDS_GPIO is not set
+# CONFIG_LEDS_LP3944 is not set
+# CONFIG_LEDS_LP5521 is not set
+# CONFIG_LEDS_LP5523 is not set
+# CONFIG_LEDS_LP5562 is not set
+# CONFIG_LEDS_LP8501 is not set
+# CONFIG_LEDS_LP8860 is not set
+CONFIG_LEDS_PCA955X=y
+CONFIG_LEDS_PCA963X=y
+# CONFIG_LEDS_DAC124S085 is not set
+# CONFIG_LEDS_PWM is not set
+# CONFIG_LEDS_BD2802 is not set
+# CONFIG_LEDS_LT3593 is not set
+# CONFIG_LEDS_TCA6507 is not set
+# CONFIG_LEDS_TLC591XX is not set
+# CONFIG_LEDS_LM355x is not set
+
+#
+# LED driver for blink(1) USB RGB LED is under Special HID drivers (HID_THINGM)
+#
+# CONFIG_LEDS_BLINKM is not set
+CONFIG_LEDS_USER=y
+
+#
+# LED Triggers
+#
+# CONFIG_LEDS_TRIGGERS is not set
+# CONFIG_ACCESSIBILITY is not set
+# CONFIG_INFINIBAND is not set
+CONFIG_EDAC_SUPPORT=y
+CONFIG_EDAC=y
+CONFIG_EDAC_LEGACY_SYSFS=y
+# CONFIG_EDAC_DEBUG is not set
+CONFIG_EDAC_MM_EDAC=y
+CONFIG_EDAC_TILE=y
+CONFIG_RTC_LIB=y
+CONFIG_RTC_CLASS=y
+CONFIG_RTC_HCTOSYS=y
+CONFIG_RTC_HCTOSYS_DEVICE="rtc0"
+CONFIG_RTC_SYSTOHC=y
+CONFIG_RTC_SYSTOHC_DEVICE="rtc0"
+# CONFIG_RTC_DEBUG is not set
+
+#
+# RTC interfaces
+#
+CONFIG_RTC_INTF_SYSFS=y
+CONFIG_RTC_INTF_PROC=y
+CONFIG_RTC_INTF_DEV=y
+# CONFIG_RTC_INTF_DEV_UIE_EMUL is not set
+# CONFIG_RTC_DRV_TEST is not set
+
+#
+# I2C RTC drivers
+#
+# CONFIG_RTC_DRV_ABB5ZES3 is not set
+# CONFIG_RTC_DRV_ABX80X is not set
+# CONFIG_RTC_DRV_DS1307 is not set
+# CONFIG_RTC_DRV_DS1374 is not set
+# CONFIG_RTC_DRV_DS1672 is not set
+# CONFIG_RTC_DRV_MAX6900 is not set
+# CONFIG_RTC_DRV_RS5C372 is not set
+# CONFIG_RTC_DRV_ISL1208 is not set
+# CONFIG_RTC_DRV_ISL12022 is not set
+# CONFIG_RTC_DRV_X1205 is not set
+# CONFIG_RTC_DRV_PCF8523 is not set
+# CONFIG_RTC_DRV_PCF85063 is not set
+# CONFIG_RTC_DRV_PCF8563 is not set
+# CONFIG_RTC_DRV_PCF8583 is not set
+# CONFIG_RTC_DRV_M41T80 is not set
+# CONFIG_RTC_DRV_BQ32K is not set
+# CONFIG_RTC_DRV_S35390A is not set
+# CONFIG_RTC_DRV_FM3130 is not set
+# CONFIG_RTC_DRV_RX8010 is not set
+# CONFIG_RTC_DRV_RX8581 is not set
+# CONFIG_RTC_DRV_RX8025 is not set
+# CONFIG_RTC_DRV_EM3027 is not set
+# CONFIG_RTC_DRV_RV8803 is not set
+
+#
+# SPI RTC drivers
+#
+# CONFIG_RTC_DRV_M41T93 is not set
+# CONFIG_RTC_DRV_M41T94 is not set
+# CONFIG_RTC_DRV_DS1302 is not set
+# CONFIG_RTC_DRV_DS1305 is not set
+# CONFIG_RTC_DRV_DS1343 is not set
+# CONFIG_RTC_DRV_DS1347 is not set
+# CONFIG_RTC_DRV_DS1390 is not set
+# CONFIG_RTC_DRV_MAX6916 is not set
+# CONFIG_RTC_DRV_R9701 is not set
+# CONFIG_RTC_DRV_RX4581 is not set
+# CONFIG_RTC_DRV_RX6110 is not set
+# CONFIG_RTC_DRV_RS5C348 is not set
+# CONFIG_RTC_DRV_MAX6902 is not set
+# CONFIG_RTC_DRV_PCF2123 is not set
+# CONFIG_RTC_DRV_MCP795 is not set
+CONFIG_RTC_I2C_AND_SPI=y
+
+#
+# SPI and I2C RTC drivers
+#
+# CONFIG_RTC_DRV_DS3232 is not set
+# CONFIG_RTC_DRV_PCF2127 is not set
+# CONFIG_RTC_DRV_RV3029C2 is not set
+
+#
+# Platform RTC drivers
+#
+# CONFIG_RTC_DRV_DS1286 is not set
+# CONFIG_RTC_DRV_DS1511 is not set
+# CONFIG_RTC_DRV_DS1553 is not set
+# CONFIG_RTC_DRV_DS1685_FAMILY is not set
+# CONFIG_RTC_DRV_DS1742 is not set
+# CONFIG_RTC_DRV_DS2404 is not set
+# CONFIG_RTC_DRV_STK17TA8 is not set
+# CONFIG_RTC_DRV_M48T86 is not set
+# CONFIG_RTC_DRV_M48T35 is not set
+# CONFIG_RTC_DRV_M48T59 is not set
+# CONFIG_RTC_DRV_MSM6242 is not set
+# CONFIG_RTC_DRV_BQ4802 is not set
+# CONFIG_RTC_DRV_RP5C01 is not set
+# CONFIG_RTC_DRV_V3020 is not set
+
+#
+# on-CPU RTC drivers
+#
+CONFIG_RTC_DRV_TILE=y
+
+#
+# HID Sensor RTC drivers
+#
+# CONFIG_RTC_DRV_HID_SENSOR_TIME is not set
+CONFIG_DMADEVICES=y
+# CONFIG_DMADEVICES_DEBUG is not set
+
+#
+# DMA Devices
+#
+# CONFIG_INTEL_IDMA64 is not set
+# CONFIG_QCOM_HIDMA_MGMT is not set
+# CONFIG_QCOM_HIDMA is not set
+# CONFIG_DW_DMAC is not set
+# CONFIG_DW_DMAC_PCI is not set
+
+#
+# DMABUF options
+#
+CONFIG_SYNC_FILE=y
+# CONFIG_SW_SYNC is not set
+# CONFIG_AUXDISPLAY is not set
+CONFIG_UIO=y
+# CONFIG_UIO_CIF is not set
+# CONFIG_UIO_PDRV_GENIRQ is not set
+# CONFIG_UIO_DMEM_GENIRQ is not set
+# CONFIG_UIO_AEC is not set
+# CONFIG_UIO_SERCOS3 is not set
+# CONFIG_UIO_PCI_GENERIC is not set
+# CONFIG_UIO_NETX is not set
+# CONFIG_UIO_PRUSS is not set
+# CONFIG_UIO_MF624 is not set
+# CONFIG_VIRT_DRIVERS is not set
+
+#
+# Virtio drivers
+#
+# CONFIG_VIRTIO_PCI is not set
+# CONFIG_VIRTIO_MMIO is not set
+
+#
+# Microsoft Hyper-V guest support
+#
+CONFIG_STAGING=y
+# CONFIG_COMEDI is not set
+# CONFIG_RTS5208 is not set
+# CONFIG_FB_SM750 is not set
+# CONFIG_FB_XGI is not set
+
+#
+# Speakup console speech
+#
+# CONFIG_SPEAKUP is not set
+# CONFIG_STAGING_MEDIA is not set
+
+#
+# Android
+#
+# CONFIG_LTE_GDM724X is not set
+# CONFIG_MTD_SPINAND_MT29F is not set
+# CONFIG_LNET is not set
+# CONFIG_DGNC is not set
+# CONFIG_GS_FPGABOOT is not set
+CONFIG_FB_TFT=y
+# CONFIG_FB_TFT_AGM1264K_FL is not set
+# CONFIG_FB_TFT_BD663474 is not set
+# CONFIG_FB_TFT_HX8340BN is not set
+# CONFIG_FB_TFT_HX8347D is not set
+# CONFIG_FB_TFT_HX8353D is not set
+# CONFIG_FB_TFT_HX8357D is not set
+# CONFIG_FB_TFT_ILI9163 is not set
+# CONFIG_FB_TFT_ILI9320 is not set
+# CONFIG_FB_TFT_ILI9325 is not set
+# CONFIG_FB_TFT_ILI9340 is not set
+# CONFIG_FB_TFT_ILI9341 is not set
+# CONFIG_FB_TFT_ILI9481 is not set
+# CONFIG_FB_TFT_ILI9486 is not set
+# CONFIG_FB_TFT_PCD8544 is not set
+# CONFIG_FB_TFT_RA8875 is not set
+# CONFIG_FB_TFT_S6D02A1 is not set
+# CONFIG_FB_TFT_S6D1121 is not set
+# CONFIG_FB_TFT_SSD1289 is not set
+# CONFIG_FB_TFT_SSD1305 is not set
+# CONFIG_FB_TFT_SSD1306 is not set
+# CONFIG_FB_TFT_SSD1325 is not set
+# CONFIG_FB_TFT_SSD1331 is not set
+# CONFIG_FB_TFT_SSD1351 is not set
+# CONFIG_FB_TFT_ST7735R is not set
+# CONFIG_FB_TFT_ST7789V is not set
+# CONFIG_FB_TFT_TINYLCD is not set
+# CONFIG_FB_TFT_TLS8204 is not set
+# CONFIG_FB_TFT_UC1611 is not set
+# CONFIG_FB_TFT_UC1701 is not set
+# CONFIG_FB_TFT_UPD161704 is not set
+# CONFIG_FB_TFT_WATTEROTT is not set
+CONFIG_FB_FLEX=y
+# CONFIG_FB_TFT_FBTFT_DEVICE is not set
+# CONFIG_MOST is not set
+# CONFIG_GREYBUS is not set
+
+#
+# Hardware Spinlock drivers
+#
+
+#
+# Clock Source drivers
+#
+# CONFIG_ATMEL_PIT is not set
+# CONFIG_SH_TIMER_CMT is not set
+# CONFIG_SH_TIMER_MTU2 is not set
+# CONFIG_SH_TIMER_TMU is not set
+# CONFIG_EM_TIMER_STI is not set
+# CONFIG_MAILBOX is not set
+CONFIG_IOMMU_SUPPORT=y
+
+#
+# Generic IOMMU Pagetable Support
+#
+
+#
+# Remoteproc drivers
+#
+# CONFIG_REMOTEPROC is not set
+
+#
+# Rpmsg drivers
+#
+
+#
+# SOC (System On Chip) specific Drivers
+#
+
+#
+# Broadcom SoC drivers
+#
+# CONFIG_SUNXI_SRAM is not set
+# CONFIG_SOC_TI is not set
+# CONFIG_PM_DEVFREQ is not set
+# CONFIG_EXTCON is not set
+CONFIG_MEMORY=y
+# CONFIG_IIO is not set
+# CONFIG_NTB is not set
+# CONFIG_VME_BUS is not set
+CONFIG_PWM=y
+CONFIG_PWM_SYSFS=y
+# CONFIG_PWM_PCA9685 is not set
+CONFIG_ARM_GIC_MAX_NR=1
+# CONFIG_IPACK_BUS is not set
+# CONFIG_RESET_CONTROLLER is not set
+# CONFIG_FMC is not set
+
+#
+# PHY Subsystem
+#
+CONFIG_GENERIC_PHY=y
+# CONFIG_PHY_PXA_28NM_HSIC is not set
+# CONFIG_PHY_PXA_28NM_USB2 is not set
+# CONFIG_BCM_KONA_USB2_PHY is not set
+# CONFIG_POWERCAP is not set
+# CONFIG_MCB is not set
+
+#
+# Performance monitor support
+#
+CONFIG_RAS=y
+
+#
+# Android
+#
+# CONFIG_ANDROID is not set
+# CONFIG_LIBNVDIMM is not set
+CONFIG_NVMEM=y
+# CONFIG_STM is not set
+# CONFIG_INTEL_TH is not set
+
+#
+# FPGA Configuration Support
+#
+# CONFIG_FPGA is not set
+
+#
+# File systems
+#
+CONFIG_FS_IOMAP=y
+CONFIG_EXT2_FS=y
+# CONFIG_EXT2_FS_XATTR is not set
+CONFIG_EXT3_FS=y
+# CONFIG_EXT3_FS_POSIX_ACL is not set
+# CONFIG_EXT3_FS_SECURITY is not set
+CONFIG_EXT4_FS=y
+# CONFIG_EXT4_FS_POSIX_ACL is not set
+# CONFIG_EXT4_FS_SECURITY is not set
+CONFIG_EXT4_ENCRYPTION=y
+CONFIG_EXT4_FS_ENCRYPTION=y
+# CONFIG_EXT4_DEBUG is not set
+CONFIG_JBD2=y
+# CONFIG_JBD2_DEBUG is not set
+CONFIG_FS_MBCACHE=y
+# CONFIG_REISERFS_FS is not set
+# CONFIG_JFS_FS is not set
+CONFIG_XFS_FS=y
+# CONFIG_XFS_QUOTA is not set
+CONFIG_XFS_POSIX_ACL=y
+# CONFIG_XFS_RT is not set
+# CONFIG_XFS_WARN is not set
+# CONFIG_XFS_DEBUG is not set
+# CONFIG_GFS2_FS is not set
+# CONFIG_OCFS2_FS is not set
+CONFIG_BTRFS_FS=y
+CONFIG_BTRFS_FS_POSIX_ACL=y
+# CONFIG_BTRFS_FS_CHECK_INTEGRITY is not set
+# CONFIG_BTRFS_FS_RUN_SANITY_TESTS is not set
+# CONFIG_BTRFS_DEBUG is not set
+# CONFIG_BTRFS_ASSERT is not set
+# CONFIG_NILFS2_FS is not set
+CONFIG_F2FS_FS=y
+CONFIG_F2FS_STAT_FS=y
+CONFIG_F2FS_FS_XATTR=y
+CONFIG_F2FS_FS_POSIX_ACL=y
+# CONFIG_F2FS_FS_SECURITY is not set
+# CONFIG_F2FS_CHECK_FS is not set
+CONFIG_F2FS_FS_ENCRYPTION=y
+# CONFIG_F2FS_FAULT_INJECTION is not set
+# CONFIG_FS_DAX is not set
+CONFIG_FS_POSIX_ACL=y
+CONFIG_EXPORTFS=y
+# CONFIG_EXPORTFS_BLOCK_OPS is not set
+CONFIG_FILE_LOCKING=y
+CONFIG_MANDATORY_FILE_LOCKING=y
+CONFIG_FS_ENCRYPTION=y
+CONFIG_FSNOTIFY=y
+CONFIG_DNOTIFY=y
+CONFIG_INOTIFY_USER=y
+# CONFIG_FANOTIFY is not set
+CONFIG_QUOTA=y
+CONFIG_QUOTA_NETLINK_INTERFACE=y
+# CONFIG_PRINT_QUOTA_WARNING is not set
+# CONFIG_QUOTA_DEBUG is not set
+CONFIG_QUOTA_TREE=y
+# CONFIG_QFMT_V1 is not set
+CONFIG_QFMT_V2=y
+CONFIG_QUOTACTL=y
+CONFIG_AUTOFS4_FS=m
+CONFIG_FUSE_FS=y
+CONFIG_CUSE=y
+# CONFIG_OVERLAY_FS is not set
+
+#
+# Caches
+#
+CONFIG_FSCACHE=m
+CONFIG_FSCACHE_STATS=y
+# CONFIG_FSCACHE_HISTOGRAM is not set
+# CONFIG_FSCACHE_DEBUG is not set
+# CONFIG_FSCACHE_OBJECT_LIST is not set
+# CONFIG_CACHEFILES is not set
+
+#
+# CD-ROM/DVD Filesystems
+#
+CONFIG_ISO9660_FS=y
+CONFIG_JOLIET=y
+# CONFIG_ZISOFS is not set
+CONFIG_UDF_FS=y
+CONFIG_UDF_NLS=y
+
+#
+# DOS/FAT/NT Filesystems
+#
+CONFIG_FAT_FS=y
+# CONFIG_MSDOS_FS is not set
+CONFIG_VFAT_FS=y
+CONFIG_FAT_DEFAULT_CODEPAGE=437
+CONFIG_FAT_DEFAULT_IOCHARSET="iso8859-1"
+# CONFIG_FAT_DEFAULT_UTF8 is not set
+CONFIG_NTFS_FS=y
+# CONFIG_NTFS_DEBUG is not set
+# CONFIG_NTFS_RW is not set
+
+#
+# Pseudo filesystems
+#
+CONFIG_PROC_FS=y
+CONFIG_PROC_KCORE=y
+CONFIG_PROC_SYSCTL=y
+CONFIG_PROC_PAGE_MONITOR=y
+# CONFIG_PROC_CHILDREN is not set
+CONFIG_KERNFS=y
+CONFIG_SYSFS=y
+CONFIG_TMPFS=y
+CONFIG_TMPFS_POSIX_ACL=y
+CONFIG_TMPFS_XATTR=y
+CONFIG_HUGETLBFS=y
+CONFIG_HUGETLB_PAGE=y
+CONFIG_CONFIGFS_FS=m
+CONFIG_MISC_FILESYSTEMS=y
+# CONFIG_ORANGEFS_FS is not set
+# CONFIG_ADFS_FS is not set
+# CONFIG_AFFS_FS is not set
+CONFIG_ECRYPT_FS=y
+# CONFIG_ECRYPT_FS_MESSAGING is not set
+# CONFIG_HFS_FS is not set
+# CONFIG_HFSPLUS_FS is not set
+# CONFIG_BEFS_FS is not set
+# CONFIG_BFS_FS is not set
+# CONFIG_EFS_FS is not set
+# CONFIG_JFFS2_FS is not set
+CONFIG_UBIFS_FS=y
+# CONFIG_UBIFS_FS_ADVANCED_COMPR is not set
+CONFIG_UBIFS_FS_LZO=y
+CONFIG_UBIFS_FS_ZLIB=y
+# CONFIG_UBIFS_ATIME_SUPPORT is not set
+# CONFIG_UBIFS_FS_ENCRYPTION is not set
+# CONFIG_CRAMFS is not set
+# CONFIG_SQUASHFS is not set
+# CONFIG_VXFS_FS is not set
+# CONFIG_MINIX_FS is not set
+# CONFIG_OMFS_FS is not set
+# CONFIG_HPFS_FS is not set
+# CONFIG_QNX4FS_FS is not set
+# CONFIG_QNX6FS_FS is not set
+# CONFIG_ROMFS_FS is not set
+# CONFIG_PSTORE is not set
+# CONFIG_SYSV_FS is not set
+# CONFIG_UFS_FS is not set
+CONFIG_NETWORK_FILESYSTEMS=y
+CONFIG_NFS_FS=y
+CONFIG_NFS_V2=y
+CONFIG_NFS_V3=y
+CONFIG_NFS_V3_ACL=y
+CONFIG_NFS_V4=y
+# CONFIG_NFS_SWAP is not set
+CONFIG_NFS_V4_1=y
+CONFIG_NFS_V4_2=y
+CONFIG_PNFS_FILE_LAYOUT=y
+CONFIG_PNFS_BLOCK=y
+CONFIG_PNFS_FLEXFILE_LAYOUT=m
+CONFIG_NFS_V4_1_IMPLEMENTATION_ID_DOMAIN="kernel.org"
+# CONFIG_NFS_V4_1_MIGRATION is not set
+CONFIG_NFS_V4_SECURITY_LABEL=y
+# CONFIG_NFS_USE_LEGACY_DNS is not set
+CONFIG_NFS_USE_KERNEL_DNS=y
+CONFIG_NFSD=m
+CONFIG_NFSD_V2_ACL=y
+CONFIG_NFSD_V3=y
+CONFIG_NFSD_V3_ACL=y
+CONFIG_NFSD_V4=y
+# CONFIG_NFSD_BLOCKLAYOUT is not set
+# CONFIG_NFSD_SCSILAYOUT is not set
+# CONFIG_NFSD_FLEXFILELAYOUT is not set
+# CONFIG_NFSD_V4_SECURITY_LABEL is not set
+# CONFIG_NFSD_FAULT_INJECTION is not set
+CONFIG_GRACE_PERIOD=y
+CONFIG_LOCKD=y
+CONFIG_LOCKD_V4=y
+CONFIG_NFS_ACL_SUPPORT=y
+CONFIG_NFS_COMMON=y
+CONFIG_SUNRPC=y
+CONFIG_SUNRPC_GSS=y
+CONFIG_SUNRPC_BACKCHANNEL=y
+CONFIG_RPCSEC_GSS_KRB5=m
+# CONFIG_SUNRPC_DEBUG is not set
+# CONFIG_CEPH_FS is not set
+CONFIG_CIFS=m
+CONFIG_CIFS_STATS=y
+# CONFIG_CIFS_STATS2 is not set
+CONFIG_CIFS_WEAK_PW_HASH=y
+CONFIG_CIFS_UPCALL=y
+CONFIG_CIFS_XATTR=y
+CONFIG_CIFS_POSIX=y
+# CONFIG_CIFS_ACL is not set
+CONFIG_CIFS_DEBUG=y
+# CONFIG_CIFS_DEBUG2 is not set
+CONFIG_CIFS_DFS_UPCALL=y
+# CONFIG_CIFS_SMB2 is not set
+CONFIG_CIFS_FSCACHE=y
+# CONFIG_NCP_FS is not set
+# CONFIG_CODA_FS is not set
+# CONFIG_AFS_FS is not set
+CONFIG_NLS=y
+CONFIG_NLS_DEFAULT="utf8"
+CONFIG_NLS_CODEPAGE_437=y
+CONFIG_NLS_CODEPAGE_737=m
+CONFIG_NLS_CODEPAGE_775=m
+CONFIG_NLS_CODEPAGE_850=m
+CONFIG_NLS_CODEPAGE_852=m
+CONFIG_NLS_CODEPAGE_855=m
+CONFIG_NLS_CODEPAGE_857=m
+CONFIG_NLS_CODEPAGE_860=m
+CONFIG_NLS_CODEPAGE_861=m
+CONFIG_NLS_CODEPAGE_862=m
+CONFIG_NLS_CODEPAGE_863=m
+CONFIG_NLS_CODEPAGE_864=m
+CONFIG_NLS_CODEPAGE_865=m
+CONFIG_NLS_CODEPAGE_866=m
+CONFIG_NLS_CODEPAGE_869=m
+CONFIG_NLS_CODEPAGE_936=m
+CONFIG_NLS_CODEPAGE_950=m
+CONFIG_NLS_CODEPAGE_932=m
+CONFIG_NLS_CODEPAGE_949=m
+CONFIG_NLS_CODEPAGE_874=m
+CONFIG_NLS_ISO8859_8=m
+CONFIG_NLS_CODEPAGE_1250=m
+CONFIG_NLS_CODEPAGE_1251=m
+CONFIG_NLS_ASCII=y
+CONFIG_NLS_ISO8859_1=m
+CONFIG_NLS_ISO8859_2=m
+CONFIG_NLS_ISO8859_3=m
+CONFIG_NLS_ISO8859_4=m
+CONFIG_NLS_ISO8859_5=m
+CONFIG_NLS_ISO8859_6=m
+CONFIG_NLS_ISO8859_7=m
+CONFIG_NLS_ISO8859_9=m
+CONFIG_NLS_ISO8859_13=m
+CONFIG_NLS_ISO8859_14=m
+CONFIG_NLS_ISO8859_15=m
+CONFIG_NLS_KOI8_R=m
+CONFIG_NLS_KOI8_U=m
+# CONFIG_NLS_MAC_ROMAN is not set
+# CONFIG_NLS_MAC_CELTIC is not set
+# CONFIG_NLS_MAC_CENTEURO is not set
+# CONFIG_NLS_MAC_CROATIAN is not set
+# CONFIG_NLS_MAC_CYRILLIC is not set
+# CONFIG_NLS_MAC_GAELIC is not set
+# CONFIG_NLS_MAC_GREEK is not set
+# CONFIG_NLS_MAC_ICELAND is not set
+# CONFIG_NLS_MAC_INUIT is not set
+# CONFIG_NLS_MAC_ROMANIAN is not set
+# CONFIG_NLS_MAC_TURKISH is not set
+CONFIG_NLS_UTF8=m
+CONFIG_DLM=m
+CONFIG_DLM_DEBUG=y
+
+#
+# Kernel hacking
+#
+
+#
+# printk and dmesg options
+#
+# CONFIG_PRINTK_TIME is not set
+CONFIG_CONSOLE_LOGLEVEL_DEFAULT=8
+CONFIG_MESSAGE_LOGLEVEL_DEFAULT=4
+CONFIG_DYNAMIC_DEBUG=y
+
+#
+# Compile-time checks and compiler options
+#
+CONFIG_DEBUG_INFO=y
+# CONFIG_DEBUG_INFO_REDUCED is not set
+# CONFIG_DEBUG_INFO_SPLIT is not set
+# CONFIG_DEBUG_INFO_DWARF4 is not set
+# CONFIG_GDB_SCRIPTS is not set
+# CONFIG_ENABLE_WARN_DEPRECATED is not set
+CONFIG_ENABLE_MUST_CHECK=y
+CONFIG_FRAME_WARN=2048
+CONFIG_STRIP_ASM_SYMS=y
+# CONFIG_READABLE_ASM is not set
+CONFIG_UNUSED_SYMBOLS=y
+# CONFIG_PAGE_OWNER is not set
+CONFIG_DEBUG_FS=y
+CONFIG_HEADERS_CHECK=y
+# CONFIG_DEBUG_SECTION_MISMATCH is not set
+CONFIG_SECTION_MISMATCH_WARN_ONLY=y
+CONFIG_ARCH_WANT_FRAME_POINTERS=y
+CONFIG_FRAME_POINTER=y
+CONFIG_DEBUG_FORCE_WEAK_PER_CPU=y
+CONFIG_MAGIC_SYSRQ=y
+CONFIG_MAGIC_SYSRQ_DEFAULT_ENABLE=0x1
+CONFIG_DEBUG_KERNEL=y
+
+#
+# Memory Debugging
+#
+# CONFIG_PAGE_EXTENSION is not set
+# CONFIG_DEBUG_PAGEALLOC is not set
+# CONFIG_PAGE_POISONING is not set
+# CONFIG_DEBUG_OBJECTS is not set
+# CONFIG_SLUB_DEBUG_ON is not set
+# CONFIG_SLUB_STATS is not set
+CONFIG_HAVE_DEBUG_KMEMLEAK=y
+# CONFIG_DEBUG_KMEMLEAK is not set
+# CONFIG_DEBUG_STACK_USAGE is not set
+CONFIG_DEBUG_VM=y
+# CONFIG_DEBUG_VM_VMACACHE is not set
+# CONFIG_DEBUG_VM_RB is not set
+# CONFIG_DEBUG_VM_PGFLAGS is not set
+CONFIG_DEBUG_MEMORY_INIT=y
+# CONFIG_DEBUG_PER_CPU_MAPS is not set
+CONFIG_HAVE_DEBUG_STACKOVERFLOW=y
+CONFIG_DEBUG_STACKOVERFLOW=y
+# CONFIG_DEBUG_SHIRQ is not set
+
+#
+# Debug Lockups and Hangs
+#
+CONFIG_LOCKUP_DETECTOR=y
+# CONFIG_BOOTPARAM_SOFTLOCKUP_PANIC is not set
+CONFIG_BOOTPARAM_SOFTLOCKUP_PANIC_VALUE=0
+CONFIG_DETECT_HUNG_TASK=y
+CONFIG_DEFAULT_HUNG_TASK_TIMEOUT=120
+# CONFIG_BOOTPARAM_HUNG_TASK_PANIC is not set
+CONFIG_BOOTPARAM_HUNG_TASK_PANIC_VALUE=0
+# CONFIG_WQ_WATCHDOG is not set
+# CONFIG_PANIC_ON_OOPS is not set
+CONFIG_PANIC_ON_OOPS_VALUE=0
+CONFIG_PANIC_TIMEOUT=5
+CONFIG_SCHED_DEBUG=y
+CONFIG_SCHED_INFO=y
+CONFIG_SCHEDSTATS=y
+# CONFIG_SCHED_STACK_END_CHECK is not set
+# CONFIG_DEBUG_TIMEKEEPING is not set
+CONFIG_TIMER_STATS=y
+
+#
+# Lock Debugging (spinlocks, mutexes, etc...)
+#
+# CONFIG_DEBUG_RT_MUTEXES is not set
+# CONFIG_DEBUG_SPINLOCK is not set
+# CONFIG_DEBUG_MUTEXES is not set
+# CONFIG_DEBUG_WW_MUTEX_SLOWPATH is not set
+# CONFIG_DEBUG_LOCK_ALLOC is not set
+# CONFIG_PROVE_LOCKING is not set
+# CONFIG_LOCK_STAT is not set
+# CONFIG_DEBUG_ATOMIC_SLEEP is not set
+# CONFIG_DEBUG_LOCKING_API_SELFTESTS is not set
+# CONFIG_LOCK_TORTURE_TEST is not set
+CONFIG_STACKTRACE=y
+# CONFIG_DEBUG_KOBJECT is not set
+CONFIG_HAVE_DEBUG_BUGVERBOSE=y
+CONFIG_DEBUG_BUGVERBOSE=y
+CONFIG_DEBUG_LIST=y
+# CONFIG_DEBUG_PI_LIST is not set
+# CONFIG_DEBUG_SG is not set
+# CONFIG_DEBUG_NOTIFIERS is not set
+CONFIG_DEBUG_CREDENTIALS=y
+
+#
+# RCU Debugging
+#
+# CONFIG_PROVE_RCU is not set
+# CONFIG_SPARSE_RCU_POINTER is not set
+# CONFIG_TORTURE_TEST is not set
+# CONFIG_RCU_PERF_TEST is not set
+# CONFIG_RCU_TORTURE_TEST is not set
+CONFIG_RCU_CPU_STALL_TIMEOUT=60
+# CONFIG_RCU_TRACE is not set
+# CONFIG_RCU_EQS_DEBUG is not set
+# CONFIG_DEBUG_WQ_FORCE_RR_CPU is not set
+# CONFIG_DEBUG_BLOCK_EXT_DEVT is not set
+# CONFIG_NOTIFIER_ERROR_INJECTION is not set
+# CONFIG_FAULT_INJECTION is not set
+# CONFIG_LATENCYTOP is not set
+CONFIG_USER_STACKTRACE_SUPPORT=y
+CONFIG_HAVE_FUNCTION_TRACER=y
+CONFIG_HAVE_FUNCTION_GRAPH_TRACER=y
+CONFIG_HAVE_DYNAMIC_FTRACE=y
+CONFIG_HAVE_FTRACE_MCOUNT_RECORD=y
+CONFIG_HAVE_SYSCALL_TRACEPOINTS=y
+CONFIG_TRACING_SUPPORT=y
+CONFIG_FTRACE=y
+# CONFIG_FUNCTION_TRACER is not set
+# CONFIG_IRQSOFF_TRACER is not set
+# CONFIG_SCHED_TRACER is not set
+# CONFIG_HWLAT_TRACER is not set
+# CONFIG_ENABLE_DEFAULT_TRACERS is not set
+# CONFIG_FTRACE_SYSCALLS is not set
+# CONFIG_TRACER_SNAPSHOT is not set
+CONFIG_BRANCH_PROFILE_NONE=y
+# CONFIG_PROFILE_ANNOTATED_BRANCHES is not set
+# CONFIG_PROFILE_ALL_BRANCHES is not set
+# CONFIG_STACK_TRACER is not set
+# CONFIG_BLK_DEV_IO_TRACE is not set
+# CONFIG_PROBE_EVENTS is not set
+# CONFIG_HIST_TRIGGERS is not set
+# CONFIG_TRACEPOINT_BENCHMARK is not set
+CONFIG_TRACING_EVENTS_GPIO=y
+
+#
+# Runtime Testing
+#
+# CONFIG_LKDTM is not set
+# CONFIG_TEST_LIST_SORT is not set
+# CONFIG_KPROBES_SANITY_TEST is not set
+# CONFIG_BACKTRACE_SELF_TEST is not set
+# CONFIG_RBTREE_TEST is not set
+# CONFIG_INTERVAL_TREE_TEST is not set
+# CONFIG_PERCPU_TEST is not set
+# CONFIG_ATOMIC64_SELFTEST is not set
+# CONFIG_ASYNC_RAID6_TEST is not set
+# CONFIG_TEST_HEXDUMP is not set
+# CONFIG_TEST_STRING_HELPERS is not set
+# CONFIG_TEST_KSTRTOX is not set
+# CONFIG_TEST_PRINTF is not set
+# CONFIG_TEST_BITMAP is not set
+# CONFIG_TEST_UUID is not set
+# CONFIG_TEST_RHASHTABLE is not set
+# CONFIG_TEST_HASH is not set
+# CONFIG_DMA_API_DEBUG is not set
+# CONFIG_TEST_LKM is not set
+# CONFIG_TEST_USER_COPY is not set
+# CONFIG_TEST_BPF is not set
+# CONFIG_TEST_FIRMWARE is not set
+# CONFIG_TEST_UDELAY is not set
+# CONFIG_TEST_STATIC_KEYS is not set
+# CONFIG_BUG_ON_DATA_CORRUPTION is not set
+# CONFIG_SAMPLES is not set
+CONFIG_HAVE_ARCH_KGDB=y
+CONFIG_KGDB=y
+CONFIG_KGDB_SERIAL_CONSOLE=y
+# CONFIG_KGDB_TESTS is not set
+# CONFIG_KGDB_KDB is not set
+# CONFIG_ARCH_WANTS_UBSAN_NO_NULL is not set
+# CONFIG_UBSAN is not set
+CONFIG_ARCH_HAS_DEVMEM_IS_ALLOWED=y
+CONFIG_STRICT_DEVMEM=y
+# CONFIG_IO_STRICT_DEVMEM is not set
+CONFIG_EARLY_PRINTK=y
+CONFIG_TILE_HVGLUE_TRACE=y
+
+#
+# Security options
+#
+CONFIG_KEYS=y
+# CONFIG_PERSISTENT_KEYRINGS is not set
+# CONFIG_BIG_KEYS is not set
+# CONFIG_ENCRYPTED_KEYS is not set
+# CONFIG_KEY_DH_OPERATIONS is not set
+# CONFIG_SECURITY_DMESG_RESTRICT is not set
+CONFIG_SECURITY=y
+CONFIG_SECURITYFS=y
+CONFIG_SECURITY_NETWORK=y
+CONFIG_SECURITY_NETWORK_XFRM=y
+# CONFIG_SECURITY_PATH is not set
+CONFIG_LSM_MMAP_MIN_ADDR=65536
+CONFIG_HAVE_HARDENED_USERCOPY_ALLOCATOR=y
+CONFIG_SECURITY_SELINUX=y
+CONFIG_SECURITY_SELINUX_BOOTPARAM=y
+CONFIG_SECURITY_SELINUX_BOOTPARAM_VALUE=1
+CONFIG_SECURITY_SELINUX_DISABLE=y
+CONFIG_SECURITY_SELINUX_DEVELOP=y
+CONFIG_SECURITY_SELINUX_AVC_STATS=y
+CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE=0
+# CONFIG_SECURITY_SMACK is not set
+# CONFIG_SECURITY_TOMOYO is not set
+# CONFIG_SECURITY_APPARMOR is not set
+# CONFIG_SECURITY_LOADPIN is not set
+# CONFIG_SECURITY_YAMA is not set
+CONFIG_INTEGRITY=y
+# CONFIG_INTEGRITY_SIGNATURE is not set
+CONFIG_INTEGRITY_AUDIT=y
+# CONFIG_IMA is not set
+# CONFIG_EVM is not set
+CONFIG_DEFAULT_SECURITY_SELINUX=y
+# CONFIG_DEFAULT_SECURITY_DAC is not set
+CONFIG_DEFAULT_SECURITY="selinux"
+CONFIG_XOR_BLOCKS=y
+CONFIG_ASYNC_CORE=y
+CONFIG_ASYNC_MEMCPY=y
+CONFIG_ASYNC_XOR=y
+CONFIG_ASYNC_PQ=y
+CONFIG_ASYNC_RAID6_RECOV=y
+CONFIG_CRYPTO=y
+
+#
+# Crypto core or helper
+#
+CONFIG_CRYPTO_ALGAPI=y
+CONFIG_CRYPTO_ALGAPI2=y
+CONFIG_CRYPTO_AEAD=y
+CONFIG_CRYPTO_AEAD2=y
+CONFIG_CRYPTO_BLKCIPHER=y
+CONFIG_CRYPTO_BLKCIPHER2=y
+CONFIG_CRYPTO_HASH=y
+CONFIG_CRYPTO_HASH2=y
+CONFIG_CRYPTO_RNG=y
+CONFIG_CRYPTO_RNG2=y
+CONFIG_CRYPTO_RNG_DEFAULT=y
+CONFIG_CRYPTO_AKCIPHER2=y
+CONFIG_CRYPTO_KPP2=y
+CONFIG_CRYPTO_ACOMP2=y
+# CONFIG_CRYPTO_RSA is not set
+# CONFIG_CRYPTO_DH is not set
+# CONFIG_CRYPTO_ECDH is not set
+CONFIG_CRYPTO_MANAGER=y
+CONFIG_CRYPTO_MANAGER2=y
+# CONFIG_CRYPTO_USER is not set
+CONFIG_CRYPTO_MANAGER_DISABLE_TESTS=y
+CONFIG_CRYPTO_GF128MUL=y
+CONFIG_CRYPTO_NULL=y
+CONFIG_CRYPTO_NULL2=y
+CONFIG_CRYPTO_PCRYPT=m
+CONFIG_CRYPTO_WORKQUEUE=y
+CONFIG_CRYPTO_CRYPTD=m
+# CONFIG_CRYPTO_MCRYPTD is not set
+CONFIG_CRYPTO_AUTHENC=m
+CONFIG_CRYPTO_TEST=m
+
+#
+# Authenticated Encryption with Associated Data
+#
+CONFIG_CRYPTO_CCM=m
+CONFIG_CRYPTO_GCM=m
+# CONFIG_CRYPTO_CHACHA20POLY1305 is not set
+CONFIG_CRYPTO_SEQIV=y
+CONFIG_CRYPTO_ECHAINIV=m
+
+#
+# Block modes
+#
+CONFIG_CRYPTO_CBC=y
+CONFIG_CRYPTO_CTR=y
+CONFIG_CRYPTO_CTS=y
+CONFIG_CRYPTO_ECB=y
+CONFIG_CRYPTO_LRW=m
+CONFIG_CRYPTO_PCBC=m
+CONFIG_CRYPTO_XTS=y
+# CONFIG_CRYPTO_KEYWRAP is not set
+
+#
+# Hash modes
+#
+CONFIG_CRYPTO_CMAC=m
+CONFIG_CRYPTO_HMAC=y
+CONFIG_CRYPTO_XCBC=m
+CONFIG_CRYPTO_VMAC=m
+
+#
+# Digest
+#
+CONFIG_CRYPTO_CRC32C=y
+CONFIG_CRYPTO_CRC32=y
+CONFIG_CRYPTO_CRCT10DIF=y
+CONFIG_CRYPTO_GHASH=m
+# CONFIG_CRYPTO_POLY1305 is not set
+CONFIG_CRYPTO_MD4=m
+CONFIG_CRYPTO_MD5=y
+CONFIG_CRYPTO_MICHAEL_MIC=m
+CONFIG_CRYPTO_RMD128=m
+CONFIG_CRYPTO_RMD160=m
+CONFIG_CRYPTO_RMD256=m
+CONFIG_CRYPTO_RMD320=m
+CONFIG_CRYPTO_SHA1=y
+CONFIG_CRYPTO_SHA256=y
+CONFIG_CRYPTO_SHA512=m
+# CONFIG_CRYPTO_SHA3 is not set
+CONFIG_CRYPTO_TGR192=m
+CONFIG_CRYPTO_WP512=m
+
+#
+# Ciphers
+#
+CONFIG_CRYPTO_AES=y
+CONFIG_CRYPTO_ANUBIS=m
+CONFIG_CRYPTO_ARC4=m
+CONFIG_CRYPTO_BLOWFISH=m
+CONFIG_CRYPTO_BLOWFISH_COMMON=m
+CONFIG_CRYPTO_CAMELLIA=m
+CONFIG_CRYPTO_CAST_COMMON=m
+CONFIG_CRYPTO_CAST5=m
+CONFIG_CRYPTO_CAST6=m
+CONFIG_CRYPTO_DES=m
+CONFIG_CRYPTO_FCRYPT=m
+CONFIG_CRYPTO_KHAZAD=m
+# CONFIG_CRYPTO_SALSA20 is not set
+# CONFIG_CRYPTO_CHACHA20 is not set
+CONFIG_CRYPTO_SEED=m
+CONFIG_CRYPTO_SERPENT=m
+CONFIG_CRYPTO_TEA=m
+CONFIG_CRYPTO_TWOFISH=m
+CONFIG_CRYPTO_TWOFISH_COMMON=m
+
+#
+# Compression
+#
+CONFIG_CRYPTO_DEFLATE=y
+CONFIG_CRYPTO_LZO=y
+# CONFIG_CRYPTO_842 is not set
+# CONFIG_CRYPTO_LZ4 is not set
+# CONFIG_CRYPTO_LZ4HC is not set
+
+#
+# Random Number Generation
+#
+# CONFIG_CRYPTO_ANSI_CPRNG is not set
+CONFIG_CRYPTO_DRBG_MENU=y
+CONFIG_CRYPTO_DRBG_HMAC=y
+# CONFIG_CRYPTO_DRBG_HASH is not set
+# CONFIG_CRYPTO_DRBG_CTR is not set
+CONFIG_CRYPTO_DRBG=y
+CONFIG_CRYPTO_JITTERENTROPY=y
+# CONFIG_CRYPTO_USER_API_HASH is not set
+# CONFIG_CRYPTO_USER_API_SKCIPHER is not set
+# CONFIG_CRYPTO_USER_API_RNG is not set
+# CONFIG_CRYPTO_USER_API_AEAD is not set
+CONFIG_CRYPTO_HW=y
+# CONFIG_CRYPTO_DEV_FSL_CAAM_CRYPTO_API_DESC is not set
+# CONFIG_CRYPTO_DEV_CHELSIO is not set
+# CONFIG_ASYMMETRIC_KEY_TYPE is not set
+
+#
+# Certificates for signature checking
+#
+# CONFIG_BINARY_PRINTF is not set
+
+#
+# Library routines
+#
+CONFIG_RAID6_PQ=y
+CONFIG_BITREVERSE=y
+# CONFIG_HAVE_ARCH_BITREVERSE is not set
+CONFIG_GENERIC_STRNCPY_FROM_USER=y
+CONFIG_GENERIC_STRNLEN_USER=y
+CONFIG_GENERIC_NET_UTILS=y
+CONFIG_GENERIC_FIND_FIRST_BIT=y
+CONFIG_GENERIC_PCI_IOMAP=y
+CONFIG_GENERIC_IO=y
+CONFIG_CRC_CCITT=y
+CONFIG_CRC16=y
+CONFIG_CRC_T10DIF=y
+CONFIG_CRC_ITU_T=y
+CONFIG_CRC32=y
+# CONFIG_CRC32_SELFTEST is not set
+CONFIG_CRC32_SLICEBY8=y
+# CONFIG_CRC32_SLICEBY4 is not set
+# CONFIG_CRC32_SARWATE is not set
+# CONFIG_CRC32_BIT is not set
+CONFIG_CRC7=y
+CONFIG_LIBCRC32C=y
+# CONFIG_CRC8 is not set
+CONFIG_AUDIT_GENERIC=y
+# CONFIG_AUDIT_ARCH_COMPAT_GENERIC is not set
+# CONFIG_RANDOM32_SELFTEST is not set
+CONFIG_ZLIB_INFLATE=y
+CONFIG_ZLIB_DEFLATE=y
+CONFIG_LZO_COMPRESS=y
+CONFIG_LZO_DECOMPRESS=y
+CONFIG_LZ4_DECOMPRESS=y
+CONFIG_XZ_DEC=y
+CONFIG_XZ_DEC_X86=y
+CONFIG_XZ_DEC_POWERPC=y
+CONFIG_XZ_DEC_IA64=y
+CONFIG_XZ_DEC_ARM=y
+CONFIG_XZ_DEC_ARMTHUMB=y
+CONFIG_XZ_DEC_SPARC=y
+CONFIG_XZ_DEC_BCJ=y
+# CONFIG_XZ_DEC_TEST is not set
+CONFIG_DECOMPRESS_GZIP=y
+CONFIG_DECOMPRESS_BZIP2=y
+CONFIG_DECOMPRESS_LZMA=y
+CONFIG_DECOMPRESS_XZ=y
+CONFIG_DECOMPRESS_LZO=y
+CONFIG_DECOMPRESS_LZ4=y
+CONFIG_TEXTSEARCH=y
+CONFIG_TEXTSEARCH_KMP=m
+CONFIG_TEXTSEARCH_BM=m
+CONFIG_TEXTSEARCH_FSM=m
+CONFIG_ASSOCIATIVE_ARRAY=y
+CONFIG_HAS_IOMEM=y
+CONFIG_HAS_IOPORT_MAP=y
+CONFIG_HAS_DMA=y
+CONFIG_CPU_RMAP=y
+CONFIG_DQL=y
+CONFIG_NLATTR=y
+# CONFIG_CORDIC is not set
+# CONFIG_DDR is not set
+# CONFIG_IRQ_POLL is not set
+CONFIG_OID_REGISTRY=y
+# CONFIG_SG_SPLIT is not set
+CONFIG_SG_POOL=y
+# CONFIG_ARCH_HAS_SG_CHAIN is not set
+CONFIG_SBITMAP=y
+# CONFIG_VIRTUALIZATION is not set
diff -Naur linux-4.10.1-orig/.config.old linux-4.10.1/.config.old
--- linux-4.10.1-orig/.config.old	1969-12-31 19:00:00.000000000 -0500
+++ linux-4.10.1/.config.old	2018-11-28 05:54:17.822494993 -0500
@@ -0,0 +1,3207 @@
+#
+# Automatically generated file; DO NOT EDIT.
+# Linux/tile 4.10.1 Kernel Configuration
+#
+CONFIG_TILE=y
+CONFIG_MMU=y
+CONFIG_GENERIC_CSUM=y
+CONFIG_HAVE_ARCH_ALLOC_REMAP=y
+CONFIG_HAVE_SETUP_PER_CPU_AREA=y
+CONFIG_NEED_PER_CPU_PAGE_FIRST_CHUNK=y
+CONFIG_SYS_SUPPORTS_HUGETLBFS=y
+CONFIG_HUGETLB_SUPER_PAGES=y
+CONFIG_GENERIC_TIME_VSYSCALL=y
+CONFIG_USE_PMC=y
+CONFIG_RWSEM_GENERIC_SPINLOCK=y
+CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING=y
+CONFIG_ARCH_PHYS_ADDR_T_64BIT=y
+CONFIG_ARCH_DMA_ADDR_T_64BIT=y
+CONFIG_NEED_DMA_MAP_STATE=y
+CONFIG_ARCH_HAS_DMA_SET_COHERENT_MASK=y
+CONFIG_LOCKDEP_SUPPORT=y
+CONFIG_STACKTRACE_SUPPORT=y
+CONFIG_ARCH_DISCONTIGMEM_ENABLE=y
+CONFIG_ARCH_DISCONTIGMEM_DEFAULT=y
+CONFIG_TRACE_IRQFLAGS_SUPPORT=y
+CONFIG_SMP=y
+CONFIG_HVC_TILE=y
+CONFIG_TILEGX=y
+# CONFIG_TILEPRO is not set
+CONFIG_64BIT=y
+CONFIG_ARCH_DEFCONFIG="arch/tile/configs/tilegx_defconfig"
+CONFIG_PGTABLE_LEVELS=3
+CONFIG_DEFCONFIG_LIST="/lib/modules/$UNAME_RELEASE/.config"
+CONFIG_IRQ_WORK=y
+
+#
+# General setup
+#
+CONFIG_INIT_ENV_ARG_LIMIT=32
+CONFIG_CROSS_COMPILE=""
+# CONFIG_COMPILE_TEST is not set
+CONFIG_LOCALVERSION=""
+CONFIG_LOCALVERSION_AUTO=y
+CONFIG_DEFAULT_HOSTNAME="(none)"
+CONFIG_SWAP=y
+CONFIG_SYSVIPC=y
+CONFIG_SYSVIPC_SYSCTL=y
+CONFIG_POSIX_MQUEUE=y
+CONFIG_POSIX_MQUEUE_SYSCTL=y
+CONFIG_CROSS_MEMORY_ATTACH=y
+CONFIG_FHANDLE=y
+# CONFIG_USELIB is not set
+CONFIG_AUDIT=y
+
+#
+# IRQ subsystem
+#
+CONFIG_GENERIC_IRQ_PROBE=y
+CONFIG_GENERIC_IRQ_SHOW=y
+CONFIG_GENERIC_IRQ_LEGACY_ALLOC_HWIRQ=y
+CONFIG_GENERIC_PENDING_IRQ=y
+CONFIG_IRQ_DOMAIN=y
+CONFIG_GENERIC_MSI_IRQ=y
+# CONFIG_IRQ_DOMAIN_DEBUG is not set
+CONFIG_SPARSE_IRQ=y
+CONFIG_GENERIC_CLOCKEVENTS=y
+
+#
+# Timers subsystem
+#
+CONFIG_TICK_ONESHOT=y
+CONFIG_NO_HZ_COMMON=y
+# CONFIG_HZ_PERIODIC is not set
+CONFIG_NO_HZ_IDLE=y
+# CONFIG_NO_HZ_FULL is not set
+CONFIG_NO_HZ=y
+CONFIG_HIGH_RES_TIMERS=y
+
+#
+# CPU/Task time and stats accounting
+#
+CONFIG_TICK_CPU_ACCOUNTING=y
+# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set
+CONFIG_BSD_PROCESS_ACCT=y
+CONFIG_BSD_PROCESS_ACCT_V3=y
+CONFIG_TASKSTATS=y
+CONFIG_TASK_DELAY_ACCT=y
+CONFIG_TASK_XACCT=y
+CONFIG_TASK_IO_ACCOUNTING=y
+
+#
+# RCU Subsystem
+#
+CONFIG_TREE_RCU=y
+# CONFIG_RCU_EXPERT is not set
+CONFIG_SRCU=y
+# CONFIG_TASKS_RCU is not set
+CONFIG_RCU_STALL_COMMON=y
+# CONFIG_TREE_RCU_TRACE is not set
+# CONFIG_RCU_EXPEDITE_BOOT is not set
+CONFIG_BUILD_BIN2C=y
+CONFIG_IKCONFIG=y
+CONFIG_IKCONFIG_PROC=y
+CONFIG_LOG_BUF_SHIFT=19
+CONFIG_LOG_CPU_MAX_BUF_SHIFT=12
+CONFIG_NMI_LOG_BUF_SHIFT=13
+CONFIG_CGROUPS=y
+# CONFIG_MEMCG is not set
+# CONFIG_BLK_CGROUP is not set
+CONFIG_CGROUP_SCHED=y
+CONFIG_FAIR_GROUP_SCHED=y
+# CONFIG_CFS_BANDWIDTH is not set
+CONFIG_RT_GROUP_SCHED=y
+# CONFIG_CGROUP_PIDS is not set
+# CONFIG_CGROUP_FREEZER is not set
+# CONFIG_CGROUP_HUGETLB is not set
+CONFIG_CPUSETS=y
+CONFIG_PROC_PID_CPUSET=y
+CONFIG_CGROUP_DEVICE=y
+CONFIG_CGROUP_CPUACCT=y
+# CONFIG_CGROUP_PERF is not set
+CONFIG_CGROUP_DEBUG=y
+CONFIG_SOCK_CGROUP_DATA=y
+# CONFIG_CHECKPOINT_RESTORE is not set
+CONFIG_NAMESPACES=y
+CONFIG_UTS_NS=y
+CONFIG_IPC_NS=y
+# CONFIG_USER_NS is not set
+CONFIG_PID_NS=y
+CONFIG_NET_NS=y
+# CONFIG_SCHED_AUTOGROUP is not set
+CONFIG_SYSFS_DEPRECATED=y
+# CONFIG_SYSFS_DEPRECATED_V2 is not set
+CONFIG_RELAY=y
+CONFIG_BLK_DEV_INITRD=y
+CONFIG_INITRAMFS_SOURCE=""
+CONFIG_RD_GZIP=y
+CONFIG_RD_BZIP2=y
+CONFIG_RD_LZMA=y
+CONFIG_RD_XZ=y
+CONFIG_RD_LZO=y
+CONFIG_RD_LZ4=y
+CONFIG_INITRAMFS_COMPRESSION=".gz"
+CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y
+# CONFIG_CC_OPTIMIZE_FOR_SIZE is not set
+CONFIG_SYSCTL=y
+CONFIG_ANON_INODES=y
+CONFIG_SYSCTL_EXCEPTION_TRACE=y
+CONFIG_BPF=y
+CONFIG_EXPERT=y
+CONFIG_MULTIUSER=y
+# CONFIG_SGETMASK_SYSCALL is not set
+CONFIG_SYSFS_SYSCALL=y
+CONFIG_SYSCTL_SYSCALL=y
+CONFIG_POSIX_TIMERS=y
+CONFIG_KALLSYMS=y
+CONFIG_KALLSYMS_ALL=y
+# CONFIG_KALLSYMS_ABSOLUTE_PERCPU is not set
+# CONFIG_KALLSYMS_BASE_RELATIVE is not set
+CONFIG_PRINTK=y
+CONFIG_PRINTK_NMI=y
+CONFIG_BUG=y
+CONFIG_ELF_CORE=y
+CONFIG_BASE_FULL=y
+CONFIG_FUTEX=y
+CONFIG_EPOLL=y
+CONFIG_SIGNALFD=y
+CONFIG_TIMERFD=y
+CONFIG_EVENTFD=y
+# CONFIG_BPF_SYSCALL is not set
+CONFIG_SHMEM=y
+CONFIG_AIO=y
+CONFIG_ADVISE_SYSCALLS=y
+# CONFIG_USERFAULTFD is not set
+CONFIG_PCI_QUIRKS=y
+CONFIG_MEMBARRIER=y
+CONFIG_EMBEDDED=y
+CONFIG_HAVE_PERF_EVENTS=y
+
+#
+# Kernel Performance Events And Counters
+#
+CONFIG_PERF_EVENTS=y
+# CONFIG_DEBUG_PERF_USE_VMALLOC is not set
+CONFIG_VM_EVENT_COUNTERS=y
+CONFIG_SLUB_DEBUG=y
+# CONFIG_COMPAT_BRK is not set
+# CONFIG_SLAB is not set
+CONFIG_SLUB=y
+# CONFIG_SLOB is not set
+# CONFIG_SLAB_FREELIST_RANDOM is not set
+CONFIG_SLUB_CPU_PARTIAL=y
+# CONFIG_SYSTEM_DATA_VERIFICATION is not set
+CONFIG_PROFILING=y
+CONFIG_KPROBES=y
+# CONFIG_JUMP_LABEL is not set
+CONFIG_HAVE_64BIT_ALIGNED_ACCESS=y
+CONFIG_KRETPROBES=y
+CONFIG_HAVE_KPROBES=y
+CONFIG_HAVE_KRETPROBES=y
+CONFIG_HAVE_NMI=y
+CONFIG_HAVE_ARCH_TRACEHOOK=y
+CONFIG_HAVE_DMA_API_DEBUG=y
+CONFIG_HAVE_ARCH_JUMP_LABEL=y
+CONFIG_ARCH_HAVE_NMI_SAFE_CMPXCHG=y
+CONFIG_HAVE_ARCH_SECCOMP_FILTER=y
+# CONFIG_CC_STACKPROTECTOR is not set
+CONFIG_HAVE_CONTEXT_TRACKING=y
+CONFIG_HAVE_VIRT_CPU_ACCOUNTING_GEN=y
+CONFIG_MODULES_USE_ELF_RELA=y
+CONFIG_HAVE_EXIT_THREAD=y
+# CONFIG_HAVE_ARCH_HASH is not set
+# CONFIG_ISA_BUS_API is not set
+# CONFIG_CPU_NO_EFFICIENT_FFS is not set
+# CONFIG_HAVE_ARCH_VMAP_STACK is not set
+
+#
+# GCOV-based kernel profiling
+#
+# CONFIG_GCOV_KERNEL is not set
+# CONFIG_ARCH_HAS_GCOV_PROFILE_ALL is not set
+# CONFIG_HAVE_GENERIC_DMA_COHERENT is not set
+CONFIG_SLABINFO=y
+CONFIG_RT_MUTEXES=y
+CONFIG_BASE_SMALL=0
+CONFIG_MODULES=y
+CONFIG_MODULE_FORCE_LOAD=y
+CONFIG_MODULE_UNLOAD=y
+# CONFIG_MODULE_FORCE_UNLOAD is not set
+# CONFIG_MODVERSIONS is not set
+# CONFIG_MODULE_SRCVERSION_ALL is not set
+# CONFIG_MODULE_SIG is not set
+# CONFIG_MODULE_COMPRESS is not set
+CONFIG_MODULES_TREE_LOOKUP=y
+CONFIG_BLOCK=y
+CONFIG_BLK_DEV_BSG=y
+# CONFIG_BLK_DEV_BSGLIB is not set
+# CONFIG_BLK_DEV_INTEGRITY is not set
+# CONFIG_BLK_DEV_ZONED is not set
+CONFIG_BLK_CMDLINE_PARSER=y
+# CONFIG_BLK_WBT is not set
+
+#
+# Partition Types
+#
+CONFIG_PARTITION_ADVANCED=y
+# CONFIG_ACORN_PARTITION is not set
+# CONFIG_AIX_PARTITION is not set
+# CONFIG_OSF_PARTITION is not set
+# CONFIG_AMIGA_PARTITION is not set
+# CONFIG_ATARI_PARTITION is not set
+# CONFIG_MAC_PARTITION is not set
+CONFIG_MSDOS_PARTITION=y
+# CONFIG_BSD_DISKLABEL is not set
+# CONFIG_MINIX_SUBPARTITION is not set
+# CONFIG_SOLARIS_X86_PARTITION is not set
+# CONFIG_UNIXWARE_DISKLABEL is not set
+# CONFIG_LDM_PARTITION is not set
+# CONFIG_SGI_PARTITION is not set
+# CONFIG_ULTRIX_PARTITION is not set
+# CONFIG_SUN_PARTITION is not set
+# CONFIG_KARMA_PARTITION is not set
+CONFIG_EFI_PARTITION=y
+# CONFIG_SYSV68_PARTITION is not set
+# CONFIG_CMDLINE_PARTITION is not set
+CONFIG_BLOCK_COMPAT=y
+CONFIG_BLK_MQ_PCI=y
+
+#
+# IO Schedulers
+#
+CONFIG_IOSCHED_NOOP=y
+CONFIG_IOSCHED_DEADLINE=y
+CONFIG_IOSCHED_CFQ=y
+# CONFIG_DEFAULT_DEADLINE is not set
+CONFIG_DEFAULT_CFQ=y
+# CONFIG_DEFAULT_NOOP is not set
+CONFIG_DEFAULT_IOSCHED="cfq"
+CONFIG_PADATA=y
+CONFIG_INLINE_SPIN_UNLOCK_IRQ=y
+CONFIG_INLINE_READ_UNLOCK=y
+CONFIG_INLINE_READ_UNLOCK_IRQ=y
+CONFIG_INLINE_WRITE_UNLOCK=y
+CONFIG_INLINE_WRITE_UNLOCK_IRQ=y
+CONFIG_ARCH_SUPPORTS_ATOMIC_RMW=y
+CONFIG_MUTEX_SPIN_ON_OWNER=y
+CONFIG_LOCK_SPIN_ON_OWNER=y
+# CONFIG_FREEZER is not set
+
+#
+# Tilera-specific configuration
+#
+CONFIG_NR_CPUS=100
+# CONFIG_PAGE_SIZE_16KB is not set
+CONFIG_PAGE_SIZE_64KB=y
+CONFIG_HZ_100=y
+# CONFIG_HZ_250 is not set
+# CONFIG_HZ_300 is not set
+# CONFIG_HZ_1000 is not set
+CONFIG_HZ=100
+CONFIG_SCHED_HRTICK=y
+# CONFIG_KEXEC is not set
+CONFIG_COMPAT=y
+# CONFIG_SECCOMP is not set
+CONFIG_SYSVIPC_COMPAT=y
+# CONFIG_HIGHMEM is not set
+CONFIG_ZONE_DMA=y
+CONFIG_IOMMU_HELPER=y
+CONFIG_NEED_SG_DMA_LENGTH=y
+CONFIG_SWIOTLB=y
+CONFIG_NUMA=y
+CONFIG_NODES_SHIFT=2
+CONFIG_DISCONTIGMEM=y
+CONFIG_FLAT_NODE_MEM_MAP=y
+CONFIG_NEED_MULTIPLE_NODES=y
+# CONFIG_HAVE_BOOTMEM_INFO_NODE is not set
+CONFIG_SPLIT_PTLOCK_CPUS=4
+# CONFIG_COMPACTION is not set
+CONFIG_MIGRATION=y
+CONFIG_PHYS_ADDR_T_64BIT=y
+CONFIG_BOUNCE=y
+CONFIG_NEED_BOUNCE_POOL=y
+CONFIG_VIRT_TO_BUS=y
+# CONFIG_KSM is not set
+CONFIG_DEFAULT_MMAP_MIN_ADDR=4096
+# CONFIG_CLEANCACHE is not set
+# CONFIG_FRONTSWAP is not set
+# CONFIG_ZPOOL is not set
+# CONFIG_ZBUD is not set
+# CONFIG_ZSMALLOC is not set
+# CONFIG_IDLE_PAGE_TRACKING is not set
+# CONFIG_PREEMPT_NONE is not set
+CONFIG_PREEMPT_VOLUNTARY=y
+# CONFIG_PREEMPT is not set
+# CONFIG_CMDLINE_BOOL is not set
+CONFIG_VMALLOC_RESERVE=0x2000000
+CONFIG_HARDWALL=y
+CONFIG_KERNEL_PL=2
+CONFIG_TILE_GXIO=y
+CONFIG_TILE_GXIO_DMA=y
+CONFIG_TILE_GXIO_MPIPE=y
+CONFIG_TILE_GXIO_GPIO=y
+CONFIG_TILE_GXIO_TRIO=y
+CONFIG_TILE_GXIO_USB_HOST=y
+CONFIG_TILE_GXIO_UART=y
+
+#
+# Bus options
+#
+CONFIG_PCI=y
+CONFIG_PCI_DOMAINS=y
+# CONFIG_NO_IOMEM is not set
+# CONFIG_NO_IOPORT_MAP is not set
+CONFIG_TILE_PCI_IO=y
+# CONFIG_PCIEPORTBUS is not set
+CONFIG_PCI_BUS_ADDR_T_64BIT=y
+CONFIG_PCI_MSI=y
+# CONFIG_PCI_MSI_IRQ_DOMAIN is not set
+CONFIG_PCI_DEBUG=y
+# CONFIG_PCI_REALLOC_ENABLE_AUTO is not set
+# CONFIG_PCI_STUB is not set
+# CONFIG_PCI_IOV is not set
+# CONFIG_PCI_PRI is not set
+# CONFIG_PCI_PASID is not set
+# CONFIG_HOTPLUG_PCI is not set
+
+#
+# PCI host controller drivers
+#
+CONFIG_TILE_USB=y
+
+#
+# Executable file formats
+#
+CONFIG_BINFMT_ELF=y
+CONFIG_COMPAT_BINFMT_ELF=y
+CONFIG_ELFCORE=y
+# CONFIG_CORE_DUMP_DEFAULT_ELF_HEADERS is not set
+CONFIG_BINFMT_SCRIPT=y
+# CONFIG_HAVE_AOUT is not set
+CONFIG_BINFMT_MISC=y
+CONFIG_COREDUMP=y
+CONFIG_NET=y
+CONFIG_NET_INGRESS=y
+CONFIG_NET_EGRESS=y
+
+#
+# Networking options
+#
+CONFIG_PACKET=y
+CONFIG_PACKET_DIAG=y
+CONFIG_UNIX=y
+CONFIG_UNIX_DIAG=y
+CONFIG_XFRM=y
+CONFIG_XFRM_ALGO=y
+CONFIG_XFRM_USER=y
+CONFIG_XFRM_SUB_POLICY=y
+CONFIG_XFRM_MIGRATE=y
+CONFIG_XFRM_STATISTICS=y
+CONFIG_XFRM_IPCOMP=m
+# CONFIG_NET_KEY is not set
+CONFIG_INET=y
+CONFIG_IP_MULTICAST=y
+CONFIG_IP_ADVANCED_ROUTER=y
+# CONFIG_IP_FIB_TRIE_STATS is not set
+CONFIG_IP_MULTIPLE_TABLES=y
+CONFIG_IP_ROUTE_MULTIPATH=y
+CONFIG_IP_ROUTE_VERBOSE=y
+CONFIG_IP_ROUTE_CLASSID=y
+# CONFIG_IP_PNP is not set
+CONFIG_NET_IPIP=m
+# CONFIG_NET_IPGRE_DEMUX is not set
+CONFIG_NET_IP_TUNNEL=m
+CONFIG_IP_MROUTE=y
+# CONFIG_IP_MROUTE_MULTIPLE_TABLES is not set
+CONFIG_IP_PIMSM_V1=y
+CONFIG_IP_PIMSM_V2=y
+CONFIG_SYN_COOKIES=y
+# CONFIG_NET_IPVTI is not set
+# CONFIG_NET_UDP_TUNNEL is not set
+# CONFIG_NET_FOU is not set
+# CONFIG_NET_FOU_IP_TUNNELS is not set
+CONFIG_INET_AH=m
+CONFIG_INET_ESP=m
+CONFIG_INET_IPCOMP=m
+CONFIG_INET_XFRM_TUNNEL=m
+CONFIG_INET_TUNNEL=m
+CONFIG_INET_XFRM_MODE_TRANSPORT=m
+CONFIG_INET_XFRM_MODE_TUNNEL=m
+CONFIG_INET_XFRM_MODE_BEET=m
+CONFIG_INET_DIAG=y
+CONFIG_INET_TCP_DIAG=y
+CONFIG_INET_UDP_DIAG=y
+CONFIG_INET_RAW_DIAG=y
+# CONFIG_INET_DIAG_DESTROY is not set
+CONFIG_TCP_CONG_ADVANCED=y
+CONFIG_TCP_CONG_BIC=m
+CONFIG_TCP_CONG_CUBIC=y
+CONFIG_TCP_CONG_WESTWOOD=m
+CONFIG_TCP_CONG_HTCP=m
+CONFIG_TCP_CONG_HSTCP=m
+CONFIG_TCP_CONG_HYBLA=m
+CONFIG_TCP_CONG_VEGAS=m
+# CONFIG_TCP_CONG_NV is not set
+CONFIG_TCP_CONG_SCALABLE=m
+CONFIG_TCP_CONG_LP=m
+CONFIG_TCP_CONG_VENO=m
+CONFIG_TCP_CONG_YEAH=m
+CONFIG_TCP_CONG_ILLINOIS=m
+# CONFIG_TCP_CONG_DCTCP is not set
+# CONFIG_TCP_CONG_CDG is not set
+# CONFIG_TCP_CONG_BBR is not set
+CONFIG_DEFAULT_CUBIC=y
+# CONFIG_DEFAULT_RENO is not set
+CONFIG_DEFAULT_TCP_CONG="cubic"
+CONFIG_TCP_MD5SIG=y
+CONFIG_IPV6=y
+CONFIG_IPV6_ROUTER_PREF=y
+CONFIG_IPV6_ROUTE_INFO=y
+CONFIG_IPV6_OPTIMISTIC_DAD=y
+CONFIG_INET6_AH=m
+CONFIG_INET6_ESP=m
+CONFIG_INET6_IPCOMP=m
+CONFIG_IPV6_MIP6=m
+# CONFIG_IPV6_ILA is not set
+CONFIG_INET6_XFRM_TUNNEL=m
+CONFIG_INET6_TUNNEL=m
+CONFIG_INET6_XFRM_MODE_TRANSPORT=m
+CONFIG_INET6_XFRM_MODE_TUNNEL=m
+CONFIG_INET6_XFRM_MODE_BEET=m
+CONFIG_INET6_XFRM_MODE_ROUTEOPTIMIZATION=m
+# CONFIG_IPV6_VTI is not set
+CONFIG_IPV6_SIT=m
+# CONFIG_IPV6_SIT_6RD is not set
+CONFIG_IPV6_NDISC_NODETYPE=y
+CONFIG_IPV6_TUNNEL=m
+# CONFIG_IPV6_FOU is not set
+# CONFIG_IPV6_FOU_TUNNEL is not set
+CONFIG_IPV6_MULTIPLE_TABLES=y
+# CONFIG_IPV6_SUBTREES is not set
+CONFIG_IPV6_MROUTE=y
+# CONFIG_IPV6_MROUTE_MULTIPLE_TABLES is not set
+CONFIG_IPV6_PIMSM_V2=y
+# CONFIG_IPV6_SEG6_LWTUNNEL is not set
+# CONFIG_IPV6_SEG6_HMAC is not set
+CONFIG_NETLABEL=y
+CONFIG_NETWORK_SECMARK=y
+CONFIG_NET_PTP_CLASSIFY=y
+# CONFIG_NETWORK_PHY_TIMESTAMPING is not set
+CONFIG_NETFILTER=y
+# CONFIG_NETFILTER_DEBUG is not set
+CONFIG_NETFILTER_ADVANCED=y
+CONFIG_BRIDGE_NETFILTER=m
+
+#
+# Core Netfilter Configuration
+#
+CONFIG_NETFILTER_INGRESS=y
+# CONFIG_NETFILTER_NETLINK_ACCT is not set
+# CONFIG_NETFILTER_NETLINK_QUEUE is not set
+# CONFIG_NETFILTER_NETLINK_LOG is not set
+# CONFIG_NF_CONNTRACK is not set
+# CONFIG_NF_LOG_NETDEV is not set
+# CONFIG_NF_TABLES is not set
+# CONFIG_NETFILTER_XTABLES is not set
+# CONFIG_IP_SET is not set
+# CONFIG_IP_VS is not set
+
+#
+# IP: Netfilter Configuration
+#
+# CONFIG_NF_DEFRAG_IPV4 is not set
+# CONFIG_NF_SOCKET_IPV4 is not set
+# CONFIG_NF_DUP_IPV4 is not set
+# CONFIG_NF_LOG_ARP is not set
+# CONFIG_NF_LOG_IPV4 is not set
+# CONFIG_NF_REJECT_IPV4 is not set
+# CONFIG_IP_NF_IPTABLES is not set
+# CONFIG_IP_NF_ARPTABLES is not set
+
+#
+# IPv6: Netfilter Configuration
+#
+# CONFIG_NF_DEFRAG_IPV6 is not set
+# CONFIG_NF_SOCKET_IPV6 is not set
+# CONFIG_NF_DUP_IPV6 is not set
+# CONFIG_NF_REJECT_IPV6 is not set
+# CONFIG_NF_LOG_IPV6 is not set
+# CONFIG_IP6_NF_IPTABLES is not set
+# CONFIG_IP_DCCP is not set
+CONFIG_IP_SCTP=m
+# CONFIG_NET_SCTPPROBE is not set
+# CONFIG_SCTP_DBG_OBJCNT is not set
+CONFIG_SCTP_DEFAULT_COOKIE_HMAC_MD5=y
+# CONFIG_SCTP_DEFAULT_COOKIE_HMAC_SHA1 is not set
+# CONFIG_SCTP_DEFAULT_COOKIE_HMAC_NONE is not set
+CONFIG_SCTP_COOKIE_HMAC_MD5=y
+# CONFIG_SCTP_COOKIE_HMAC_SHA1 is not set
+CONFIG_INET_SCTP_DIAG=m
+CONFIG_RDS=m
+CONFIG_RDS_TCP=m
+# CONFIG_RDS_DEBUG is not set
+# CONFIG_TIPC is not set
+# CONFIG_ATM is not set
+# CONFIG_L2TP is not set
+CONFIG_STP=m
+CONFIG_GARP=m
+CONFIG_BRIDGE=m
+CONFIG_BRIDGE_IGMP_SNOOPING=y
+# CONFIG_BRIDGE_VLAN_FILTERING is not set
+CONFIG_HAVE_NET_DSA=y
+CONFIG_VLAN_8021Q=m
+CONFIG_VLAN_8021Q_GVRP=y
+# CONFIG_VLAN_8021Q_MVRP is not set
+# CONFIG_DECNET is not set
+CONFIG_LLC=m
+# CONFIG_LLC2 is not set
+# CONFIG_IPX is not set
+# CONFIG_ATALK is not set
+# CONFIG_X25 is not set
+# CONFIG_LAPB is not set
+CONFIG_PHONET=m
+# CONFIG_6LOWPAN is not set
+# CONFIG_IEEE802154 is not set
+CONFIG_NET_SCHED=y
+
+#
+# Queueing/Scheduling
+#
+CONFIG_NET_SCH_CBQ=m
+CONFIG_NET_SCH_HTB=m
+CONFIG_NET_SCH_HFSC=m
+CONFIG_NET_SCH_PRIO=m
+CONFIG_NET_SCH_MULTIQ=m
+CONFIG_NET_SCH_RED=m
+# CONFIG_NET_SCH_SFB is not set
+CONFIG_NET_SCH_SFQ=m
+CONFIG_NET_SCH_TEQL=m
+CONFIG_NET_SCH_TBF=m
+CONFIG_NET_SCH_GRED=m
+CONFIG_NET_SCH_DSMARK=m
+CONFIG_NET_SCH_NETEM=m
+CONFIG_NET_SCH_DRR=m
+# CONFIG_NET_SCH_MQPRIO is not set
+# CONFIG_NET_SCH_CHOKE is not set
+# CONFIG_NET_SCH_QFQ is not set
+# CONFIG_NET_SCH_CODEL is not set
+# CONFIG_NET_SCH_FQ_CODEL is not set
+# CONFIG_NET_SCH_FQ is not set
+# CONFIG_NET_SCH_HHF is not set
+# CONFIG_NET_SCH_PIE is not set
+CONFIG_NET_SCH_INGRESS=m
+# CONFIG_NET_SCH_PLUG is not set
+
+#
+# Classification
+#
+CONFIG_NET_CLS=y
+CONFIG_NET_CLS_BASIC=m
+CONFIG_NET_CLS_TCINDEX=m
+CONFIG_NET_CLS_ROUTE4=m
+CONFIG_NET_CLS_FW=m
+CONFIG_NET_CLS_U32=m
+CONFIG_CLS_U32_PERF=y
+CONFIG_CLS_U32_MARK=y
+CONFIG_NET_CLS_RSVP=m
+CONFIG_NET_CLS_RSVP6=m
+CONFIG_NET_CLS_FLOW=m
+CONFIG_NET_CLS_CGROUP=y
+# CONFIG_NET_CLS_BPF is not set
+# CONFIG_NET_CLS_FLOWER is not set
+# CONFIG_NET_CLS_MATCHALL is not set
+CONFIG_NET_EMATCH=y
+CONFIG_NET_EMATCH_STACK=32
+CONFIG_NET_EMATCH_CMP=m
+CONFIG_NET_EMATCH_NBYTE=m
+CONFIG_NET_EMATCH_U32=m
+CONFIG_NET_EMATCH_META=m
+CONFIG_NET_EMATCH_TEXT=m
+CONFIG_NET_CLS_ACT=y
+CONFIG_NET_ACT_POLICE=m
+CONFIG_NET_ACT_GACT=m
+CONFIG_GACT_PROB=y
+CONFIG_NET_ACT_MIRRED=m
+CONFIG_NET_ACT_NAT=m
+CONFIG_NET_ACT_PEDIT=m
+CONFIG_NET_ACT_SIMP=m
+CONFIG_NET_ACT_SKBEDIT=m
+# CONFIG_NET_ACT_CSUM is not set
+# CONFIG_NET_ACT_VLAN is not set
+# CONFIG_NET_ACT_BPF is not set
+# CONFIG_NET_ACT_SKBMOD is not set
+# CONFIG_NET_ACT_IFE is not set
+# CONFIG_NET_ACT_TUNNEL_KEY is not set
+CONFIG_NET_CLS_IND=y
+CONFIG_NET_SCH_FIFO=y
+CONFIG_DCB=y
+CONFIG_DNS_RESOLVER=y
+# CONFIG_BATMAN_ADV is not set
+# CONFIG_OPENVSWITCH is not set
+# CONFIG_VSOCKETS is not set
+# CONFIG_NETLINK_DIAG is not set
+# CONFIG_MPLS is not set
+# CONFIG_HSR is not set
+# CONFIG_NET_SWITCHDEV is not set
+# CONFIG_NET_L3_MASTER_DEV is not set
+# CONFIG_NET_NCSI is not set
+CONFIG_RPS=y
+CONFIG_RFS_ACCEL=y
+CONFIG_XPS=y
+# CONFIG_CGROUP_NET_PRIO is not set
+CONFIG_CGROUP_NET_CLASSID=y
+CONFIG_NET_RX_BUSY_POLL=y
+CONFIG_BQL=y
+CONFIG_NET_FLOW_LIMIT=y
+
+#
+# Network testing
+#
+# CONFIG_NET_PKTGEN is not set
+# CONFIG_NET_TCPPROBE is not set
+# CONFIG_HAMRADIO is not set
+# CONFIG_CAN is not set
+# CONFIG_IRDA is not set
+# CONFIG_BT is not set
+# CONFIG_AF_RXRPC is not set
+# CONFIG_AF_KCM is not set
+# CONFIG_STREAM_PARSER is not set
+CONFIG_FIB_RULES=y
+# CONFIG_WIRELESS is not set
+# CONFIG_WIMAX is not set
+# CONFIG_RFKILL is not set
+# CONFIG_NET_9P is not set
+# CONFIG_CAIF is not set
+# CONFIG_CEPH_LIB is not set
+# CONFIG_NFC is not set
+# CONFIG_LWTUNNEL is not set
+CONFIG_DST_CACHE=y
+# CONFIG_NET_DEVLINK is not set
+CONFIG_MAY_USE_DEVLINK=y
+
+#
+# Device Drivers
+#
+
+#
+# Generic Driver Options
+#
+CONFIG_UEVENT_HELPER=y
+CONFIG_UEVENT_HELPER_PATH="/sbin/hotplug"
+CONFIG_DEVTMPFS=y
+CONFIG_DEVTMPFS_MOUNT=y
+CONFIG_STANDALONE=y
+CONFIG_PREVENT_FIRMWARE_BUILD=y
+CONFIG_FW_LOADER=y
+# CONFIG_FIRMWARE_IN_KERNEL is not set
+CONFIG_EXTRA_FIRMWARE=""
+# CONFIG_FW_LOADER_USER_HELPER_FALLBACK is not set
+CONFIG_ALLOW_DEV_COREDUMP=y
+# CONFIG_DEBUG_DRIVER is not set
+# CONFIG_DEBUG_DEVRES is not set
+# CONFIG_DEBUG_TEST_DRIVER_REMOVE is not set
+# CONFIG_TEST_ASYNC_DRIVER_PROBE is not set
+CONFIG_SYS_HYPERVISOR=y
+# CONFIG_GENERIC_CPU_DEVICES is not set
+CONFIG_REGMAP=y
+CONFIG_REGMAP_I2C=y
+CONFIG_REGMAP_SPI=y
+CONFIG_DMA_SHARED_BUFFER=y
+# CONFIG_DMA_FENCE_TRACE is not set
+
+#
+# Bus devices
+#
+CONFIG_CONNECTOR=y
+CONFIG_PROC_EVENTS=y
+CONFIG_MTD=y
+# CONFIG_MTD_TESTS is not set
+# CONFIG_MTD_REDBOOT_PARTS is not set
+# CONFIG_MTD_CMDLINE_PARTS is not set
+# CONFIG_MTD_AR7_PARTS is not set
+
+#
+# User Modules And Translation Layers
+#
+# CONFIG_MTD_BLOCK is not set
+# CONFIG_MTD_BLOCK_RO is not set
+# CONFIG_FTL is not set
+# CONFIG_NFTL is not set
+# CONFIG_INFTL is not set
+# CONFIG_RFD_FTL is not set
+# CONFIG_SSFDC is not set
+# CONFIG_SM_FTL is not set
+# CONFIG_MTD_OOPS is not set
+# CONFIG_MTD_SWAP is not set
+# CONFIG_MTD_PARTITIONED_MASTER is not set
+
+#
+# RAM/ROM/Flash chip drivers
+#
+# CONFIG_MTD_CFI is not set
+# CONFIG_MTD_JEDECPROBE is not set
+CONFIG_MTD_MAP_BANK_WIDTH_1=y
+CONFIG_MTD_MAP_BANK_WIDTH_2=y
+CONFIG_MTD_MAP_BANK_WIDTH_4=y
+# CONFIG_MTD_MAP_BANK_WIDTH_8 is not set
+# CONFIG_MTD_MAP_BANK_WIDTH_16 is not set
+# CONFIG_MTD_MAP_BANK_WIDTH_32 is not set
+CONFIG_MTD_CFI_I1=y
+CONFIG_MTD_CFI_I2=y
+# CONFIG_MTD_CFI_I4 is not set
+# CONFIG_MTD_CFI_I8 is not set
+# CONFIG_MTD_RAM is not set
+# CONFIG_MTD_ROM is not set
+# CONFIG_MTD_ABSENT is not set
+
+#
+# Mapping drivers for chip access
+#
+# CONFIG_MTD_COMPLEX_MAPPINGS is not set
+# CONFIG_MTD_INTEL_VR_NOR is not set
+# CONFIG_MTD_PLATRAM is not set
+
+#
+# Self-contained MTD device drivers
+#
+# CONFIG_MTD_PMC551 is not set
+# CONFIG_MTD_DATAFLASH is not set
+# CONFIG_MTD_M25P80 is not set
+# CONFIG_MTD_SST25L is not set
+# CONFIG_MTD_SLRAM is not set
+# CONFIG_MTD_PHRAM is not set
+# CONFIG_MTD_MTDRAM is not set
+# CONFIG_MTD_BLOCK2MTD is not set
+
+#
+# Disk-On-Chip Device Drivers
+#
+# CONFIG_MTD_DOCG3 is not set
+CONFIG_MTD_NAND_ECC=y
+# CONFIG_MTD_NAND_ECC_SMC is not set
+CONFIG_MTD_NAND=y
+# CONFIG_MTD_NAND_ECC_BCH is not set
+# CONFIG_MTD_SM_COMMON is not set
+# CONFIG_MTD_NAND_DENALI_PCI is not set
+CONFIG_MTD_NAND_GPIO=y
+# CONFIG_MTD_NAND_OMAP_BCH_BUILD is not set
+CONFIG_MTD_NAND_IDS=y
+# CONFIG_MTD_NAND_RICOH is not set
+# CONFIG_MTD_NAND_DISKONCHIP is not set
+# CONFIG_MTD_NAND_DOCG4 is not set
+# CONFIG_MTD_NAND_CAFE is not set
+# CONFIG_MTD_NAND_NANDSIM is not set
+# CONFIG_MTD_NAND_PLATFORM is not set
+# CONFIG_MTD_NAND_OXNAS is not set
+# CONFIG_MTD_NAND_HISI504 is not set
+# CONFIG_MTD_NAND_MTK is not set
+# CONFIG_MTD_ONENAND is not set
+
+#
+# LPDDR & LPDDR2 PCM memory drivers
+#
+# CONFIG_MTD_LPDDR is not set
+CONFIG_MTD_SPI_NOR=y
+# CONFIG_MTD_MT81xx_NOR is not set
+CONFIG_MTD_SPI_NOR_USE_4K_SECTORS=y
+CONFIG_MTD_UBI=y
+CONFIG_MTD_UBI_WL_THRESHOLD=4096
+CONFIG_MTD_UBI_BEB_LIMIT=20
+# CONFIG_MTD_UBI_FASTMAP is not set
+CONFIG_MTD_UBI_GLUEBI=y
+CONFIG_MTD_UBI_BLOCK=y
+# CONFIG_OF is not set
+# CONFIG_PARPORT is not set
+CONFIG_BLK_DEV=y
+# CONFIG_BLK_DEV_NULL_BLK is not set
+# CONFIG_BLK_DEV_PCIESSD_MTIP32XX is not set
+# CONFIG_BLK_CPQ_CISS_DA is not set
+# CONFIG_BLK_DEV_DAC960 is not set
+# CONFIG_BLK_DEV_UMEM is not set
+# CONFIG_BLK_DEV_COW_COMMON is not set
+# CONFIG_BLK_DEV_LOOP is not set
+# CONFIG_BLK_DEV_DRBD is not set
+# CONFIG_BLK_DEV_NBD is not set
+# CONFIG_BLK_DEV_SKD is not set
+# CONFIG_BLK_DEV_SX8 is not set
+# CONFIG_BLK_DEV_RAM is not set
+# CONFIG_CDROM_PKTCDVD is not set
+# CONFIG_ATA_OVER_ETH is not set
+# CONFIG_BLK_DEV_RBD is not set
+# CONFIG_BLK_DEV_RSXX is not set
+# CONFIG_BLK_DEV_NVME is not set
+# CONFIG_NVME_FC is not set
+# CONFIG_NVME_TARGET is not set
+
+#
+# Misc devices
+#
+# CONFIG_SENSORS_LIS3LV02D is not set
+# CONFIG_AD525X_DPOT is not set
+# CONFIG_DUMMY_IRQ is not set
+# CONFIG_PHANTOM is not set
+# CONFIG_SGI_IOC4 is not set
+# CONFIG_TIFM_CORE is not set
+# CONFIG_ICS932S401 is not set
+# CONFIG_ENCLOSURE_SERVICES is not set
+# CONFIG_HP_ILO is not set
+# CONFIG_APDS9802ALS is not set
+# CONFIG_ISL29003 is not set
+# CONFIG_ISL29020 is not set
+# CONFIG_SENSORS_TSL2550 is not set
+# CONFIG_SENSORS_BH1770 is not set
+# CONFIG_SENSORS_APDS990X is not set
+# CONFIG_HMC6352 is not set
+# CONFIG_DS1682 is not set
+# CONFIG_TI_DAC7512 is not set
+# CONFIG_USB_SWITCH_FSA9480 is not set
+# CONFIG_LATTICE_ECP3_CONFIG is not set
+# CONFIG_SRAM is not set
+# CONFIG_C2PORT is not set
+
+#
+# EEPROM support
+#
+CONFIG_EEPROM_AT24=y
+CONFIG_EEPROM_AT25=y
+# CONFIG_EEPROM_LEGACY is not set
+# CONFIG_EEPROM_MAX6875 is not set
+# CONFIG_EEPROM_93CX6 is not set
+# CONFIG_EEPROM_93XX46 is not set
+# CONFIG_CB710_CORE is not set
+
+#
+# Texas Instruments shared transport line discipline
+#
+# CONFIG_TI_ST is not set
+# CONFIG_SENSORS_LIS3_SPI is not set
+# CONFIG_SENSORS_LIS3_I2C is not set
+
+#
+# Altera FPGA firmware download module
+#
+# CONFIG_ALTERA_STAPL is not set
+
+#
+# Intel MIC Bus Driver
+#
+
+#
+# SCIF Bus Driver
+#
+
+#
+# VOP Bus Driver
+#
+
+#
+# Intel MIC Host Driver
+#
+
+#
+# Intel MIC Card Driver
+#
+
+#
+# SCIF Driver
+#
+
+#
+# Intel MIC Coprocessor State Management (COSM) Drivers
+#
+
+#
+# VOP Driver
+#
+# CONFIG_GENWQE is not set
+# CONFIG_ECHO is not set
+# CONFIG_CXL_BASE is not set
+# CONFIG_CXL_AFU_DRIVER_OPS is not set
+
+#
+# SCSI device support
+#
+CONFIG_SCSI_MOD=y
+# CONFIG_RAID_ATTRS is not set
+CONFIG_SCSI=y
+CONFIG_SCSI_DMA=y
+# CONFIG_SCSI_NETLINK is not set
+# CONFIG_SCSI_MQ_DEFAULT is not set
+CONFIG_SCSI_PROC_FS=y
+
+#
+# SCSI support type (disk, tape, CD-ROM)
+#
+CONFIG_BLK_DEV_SD=y
+# CONFIG_CHR_DEV_ST is not set
+# CONFIG_CHR_DEV_OSST is not set
+# CONFIG_BLK_DEV_SR is not set
+# CONFIG_CHR_DEV_SG is not set
+# CONFIG_CHR_DEV_SCH is not set
+# CONFIG_SCSI_CONSTANTS is not set
+# CONFIG_SCSI_LOGGING is not set
+# CONFIG_SCSI_SCAN_ASYNC is not set
+
+#
+# SCSI Transports
+#
+# CONFIG_SCSI_SPI_ATTRS is not set
+# CONFIG_SCSI_FC_ATTRS is not set
+# CONFIG_SCSI_ISCSI_ATTRS is not set
+# CONFIG_SCSI_SAS_ATTRS is not set
+# CONFIG_SCSI_SAS_LIBSAS is not set
+# CONFIG_SCSI_SRP_ATTRS is not set
+CONFIG_SCSI_LOWLEVEL=y
+# CONFIG_ISCSI_TCP is not set
+# CONFIG_ISCSI_BOOT_SYSFS is not set
+# CONFIG_SCSI_CXGB3_ISCSI is not set
+# CONFIG_SCSI_CXGB4_ISCSI is not set
+# CONFIG_SCSI_BNX2_ISCSI is not set
+# CONFIG_BE2ISCSI is not set
+# CONFIG_BLK_DEV_3W_XXXX_RAID is not set
+# CONFIG_SCSI_HPSA is not set
+# CONFIG_SCSI_3W_9XXX is not set
+# CONFIG_SCSI_3W_SAS is not set
+# CONFIG_SCSI_ACARD is not set
+# CONFIG_SCSI_AACRAID is not set
+# CONFIG_SCSI_AIC7XXX is not set
+# CONFIG_SCSI_AIC79XX is not set
+# CONFIG_SCSI_AIC94XX is not set
+# CONFIG_SCSI_MVSAS is not set
+# CONFIG_SCSI_MVUMI is not set
+# CONFIG_SCSI_DPT_I2O is not set
+# CONFIG_SCSI_ADVANSYS is not set
+# CONFIG_SCSI_ARCMSR is not set
+# CONFIG_SCSI_ESAS2R is not set
+# CONFIG_MEGARAID_NEWGEN is not set
+# CONFIG_MEGARAID_LEGACY is not set
+# CONFIG_MEGARAID_SAS is not set
+# CONFIG_SCSI_MPT3SAS is not set
+# CONFIG_SCSI_MPT2SAS is not set
+# CONFIG_SCSI_SMARTPQI is not set
+# CONFIG_SCSI_UFSHCD is not set
+# CONFIG_SCSI_HPTIOP is not set
+# CONFIG_SCSI_SNIC is not set
+# CONFIG_SCSI_DMX3191D is not set
+# CONFIG_SCSI_FUTURE_DOMAIN is not set
+# CONFIG_SCSI_IPS is not set
+# CONFIG_SCSI_INITIO is not set
+# CONFIG_SCSI_INIA100 is not set
+# CONFIG_SCSI_STEX is not set
+# CONFIG_SCSI_SYM53C8XX_2 is not set
+# CONFIG_SCSI_QLOGIC_1280 is not set
+# CONFIG_SCSI_QLA_ISCSI is not set
+# CONFIG_QEDI is not set
+# CONFIG_SCSI_DC395x is not set
+# CONFIG_SCSI_AM53C974 is not set
+# CONFIG_SCSI_WD719X is not set
+# CONFIG_SCSI_DEBUG is not set
+# CONFIG_SCSI_PMCRAID is not set
+# CONFIG_SCSI_PM8001 is not set
+# CONFIG_SCSI_LOWLEVEL_PCMCIA is not set
+# CONFIG_SCSI_DH is not set
+# CONFIG_SCSI_OSD_INITIATOR is not set
+# CONFIG_ATA is not set
+# CONFIG_MD is not set
+# CONFIG_TARGET_CORE is not set
+CONFIG_FUSION=y
+# CONFIG_FUSION_SPI is not set
+# CONFIG_FUSION_SAS is not set
+CONFIG_FUSION_MAX_SGE=128
+# CONFIG_FUSION_LOGGING is not set
+
+#
+# IEEE 1394 (FireWire) support
+#
+# CONFIG_FIREWIRE is not set
+# CONFIG_FIREWIRE_NOSY is not set
+CONFIG_NETDEVICES=y
+CONFIG_MII=y
+CONFIG_NET_CORE=y
+CONFIG_BONDING=m
+CONFIG_DUMMY=m
+# CONFIG_EQUALIZER is not set
+# CONFIG_NET_FC is not set
+CONFIG_IFB=m
+# CONFIG_NET_TEAM is not set
+CONFIG_MACVLAN=m
+CONFIG_MACVTAP=m
+# CONFIG_VXLAN is not set
+# CONFIG_MACSEC is not set
+CONFIG_NETCONSOLE=y
+CONFIG_NETPOLL=y
+CONFIG_NET_POLL_CONTROLLER=y
+CONFIG_TUN=y
+# CONFIG_TUN_VNET_CROSS_LE is not set
+CONFIG_VETH=m
+# CONFIG_NLMON is not set
+# CONFIG_ARCNET is not set
+
+#
+# CAIF transport drivers
+#
+
+#
+# Distributed Switch Architecture drivers
+#
+CONFIG_ETHERNET=y
+CONFIG_MDIO=y
+CONFIG_NET_VENDOR_3COM=y
+# CONFIG_VORTEX is not set
+# CONFIG_TYPHOON is not set
+CONFIG_NET_VENDOR_ADAPTEC=y
+# CONFIG_ADAPTEC_STARFIRE is not set
+CONFIG_NET_VENDOR_AGERE=y
+# CONFIG_ET131X is not set
+CONFIG_NET_VENDOR_ALACRITECH=y
+# CONFIG_SLICOSS is not set
+CONFIG_NET_VENDOR_ALTEON=y
+# CONFIG_ACENIC is not set
+# CONFIG_ALTERA_TSE is not set
+CONFIG_NET_VENDOR_AMAZON=y
+CONFIG_NET_VENDOR_AMD=y
+# CONFIG_AMD8111_ETH is not set
+# CONFIG_PCNET32 is not set
+# CONFIG_AMD_XGBE_HAVE_ECC is not set
+CONFIG_NET_VENDOR_ARC=y
+CONFIG_NET_VENDOR_ATHEROS=y
+# CONFIG_ATL2 is not set
+# CONFIG_ATL1 is not set
+# CONFIG_ATL1E is not set
+# CONFIG_ATL1C is not set
+# CONFIG_ALX is not set
+# CONFIG_NET_VENDOR_AURORA is not set
+CONFIG_NET_CADENCE=y
+# CONFIG_MACB is not set
+CONFIG_NET_VENDOR_BROADCOM=y
+CONFIG_B44=y
+CONFIG_B44_PCI_AUTOSELECT=y
+CONFIG_B44_PCICORE_AUTOSELECT=y
+CONFIG_B44_PCI=y
+CONFIG_BCMGENET=y
+CONFIG_BNX2=y
+CONFIG_CNIC=y
+CONFIG_TIGON3=y
+CONFIG_BNX2X=y
+CONFIG_BNXT=y
+# CONFIG_BNXT_DCB is not set
+CONFIG_NET_VENDOR_BROCADE=y
+CONFIG_BNA=y
+CONFIG_NET_VENDOR_CAVIUM=y
+CONFIG_THUNDER_NIC_PF=y
+CONFIG_THUNDER_NIC_VF=y
+CONFIG_THUNDER_NIC_BGX=y
+CONFIG_THUNDER_NIC_RGX=y
+CONFIG_LIQUIDIO=y
+CONFIG_LIQUIDIO_VF=y
+CONFIG_NET_VENDOR_CHELSIO=y
+CONFIG_CHELSIO_T1=y
+CONFIG_CHELSIO_T1_1G=y
+CONFIG_CHELSIO_T3=y
+CONFIG_CHELSIO_T4=y
+CONFIG_CHELSIO_T4_DCB=y
+CONFIG_CHELSIO_T4VF=y
+CONFIG_NET_VENDOR_CISCO=y
+# CONFIG_ENIC is not set
+# CONFIG_DNET is not set
+CONFIG_NET_VENDOR_DEC=y
+# CONFIG_NET_TULIP is not set
+CONFIG_NET_VENDOR_DLINK=y
+# CONFIG_DL2K is not set
+# CONFIG_SUNDANCE is not set
+CONFIG_NET_VENDOR_EMULEX=y
+# CONFIG_BE2NET is not set
+CONFIG_NET_VENDOR_EZCHIP=y
+CONFIG_NET_VENDOR_EXAR=y
+# CONFIG_S2IO is not set
+# CONFIG_VXGE is not set
+CONFIG_NET_VENDOR_HP=y
+# CONFIG_HP100 is not set
+CONFIG_NET_VENDOR_INTEL=y
+# CONFIG_E100 is not set
+# CONFIG_E1000 is not set
+# CONFIG_E1000E is not set
+# CONFIG_IGB is not set
+# CONFIG_IGBVF is not set
+# CONFIG_IXGB is not set
+# CONFIG_IXGBE is not set
+# CONFIG_IXGBEVF is not set
+# CONFIG_I40E is not set
+# CONFIG_I40EVF is not set
+# CONFIG_FM10K is not set
+CONFIG_NET_VENDOR_I825XX=y
+# CONFIG_JME is not set
+CONFIG_NET_VENDOR_MARVELL=y
+# CONFIG_MVMDIO is not set
+# CONFIG_SKGE is not set
+CONFIG_SKY2=y
+# CONFIG_SKY2_DEBUG is not set
+CONFIG_NET_VENDOR_MELLANOX=y
+# CONFIG_MLX4_EN is not set
+# CONFIG_MLX4_CORE is not set
+# CONFIG_MLX5_CORE is not set
+# CONFIG_MLXSW_CORE is not set
+CONFIG_NET_VENDOR_MICREL=y
+# CONFIG_KS8851 is not set
+# CONFIG_KS8851_MLL is not set
+# CONFIG_KSZ884X_PCI is not set
+CONFIG_NET_VENDOR_MICROCHIP=y
+# CONFIG_ENC28J60 is not set
+# CONFIG_ENCX24J600 is not set
+CONFIG_NET_VENDOR_MYRI=y
+# CONFIG_MYRI10GE is not set
+# CONFIG_FEALNX is not set
+CONFIG_NET_VENDOR_NATSEMI=y
+# CONFIG_NATSEMI is not set
+# CONFIG_NS83820 is not set
+CONFIG_NET_VENDOR_NETRONOME=y
+# CONFIG_NFP_NETVF is not set
+CONFIG_NET_VENDOR_8390=y
+# CONFIG_NE2K_PCI is not set
+CONFIG_NET_VENDOR_NVIDIA=y
+# CONFIG_FORCEDETH is not set
+CONFIG_NET_VENDOR_OKI=y
+# CONFIG_ETHOC is not set
+CONFIG_NET_PACKET_ENGINE=y
+# CONFIG_HAMACHI is not set
+# CONFIG_YELLOWFIN is not set
+CONFIG_NET_VENDOR_QLOGIC=y
+CONFIG_QLA3XXX=y
+CONFIG_QLCNIC=y
+CONFIG_QLCNIC_DCB=y
+CONFIG_QLCNIC_HWMON=y
+CONFIG_QLGE=y
+CONFIG_NETXEN_NIC=y
+CONFIG_QED=y
+CONFIG_QEDE=y
+CONFIG_NET_VENDOR_QUALCOMM=y
+# CONFIG_QCOM_EMAC is not set
+CONFIG_NET_VENDOR_REALTEK=y
+# CONFIG_8139CP is not set
+# CONFIG_8139TOO is not set
+# CONFIG_R8169 is not set
+CONFIG_NET_VENDOR_RENESAS=y
+CONFIG_NET_VENDOR_RDC=y
+# CONFIG_R6040 is not set
+CONFIG_NET_VENDOR_ROCKER=y
+CONFIG_NET_VENDOR_SAMSUNG=y
+# CONFIG_SXGBE_ETH is not set
+CONFIG_NET_VENDOR_SEEQ=y
+CONFIG_NET_VENDOR_SILAN=y
+# CONFIG_SC92031 is not set
+CONFIG_NET_VENDOR_SIS=y
+# CONFIG_SIS900 is not set
+# CONFIG_SIS190 is not set
+CONFIG_NET_VENDOR_SOLARFLARE=y
+# CONFIG_SFC is not set
+# CONFIG_SFC_FALCON is not set
+CONFIG_NET_VENDOR_SMSC=y
+# CONFIG_EPIC100 is not set
+# CONFIG_SMSC911X is not set
+# CONFIG_SMSC9420 is not set
+CONFIG_NET_VENDOR_STMICRO=y
+# CONFIG_STMMAC_ETH is not set
+CONFIG_NET_VENDOR_SUN=y
+# CONFIG_HAPPYMEAL is not set
+# CONFIG_SUNGEM is not set
+# CONFIG_CASSINI is not set
+# CONFIG_NIU is not set
+CONFIG_NET_VENDOR_SYNOPSYS=y
+CONFIG_NET_VENDOR_TEHUTI=y
+# CONFIG_TEHUTI is not set
+CONFIG_NET_VENDOR_TI=y
+# CONFIG_TI_CPSW_ALE is not set
+# CONFIG_TLAN is not set
+CONFIG_TILE_NET=y
+CONFIG_NET_VENDOR_VIA=y
+# CONFIG_VIA_RHINE is not set
+# CONFIG_VIA_VELOCITY is not set
+CONFIG_NET_VENDOR_WIZNET=y
+# CONFIG_WIZNET_W5100 is not set
+# CONFIG_WIZNET_W5300 is not set
+# CONFIG_FDDI is not set
+# CONFIG_HIPPI is not set
+CONFIG_PHYLIB=y
+CONFIG_SWPHY=y
+
+#
+# MDIO bus device drivers
+#
+CONFIG_MDIO_BCM_UNIMAC=y
+CONFIG_MDIO_BITBANG=y
+CONFIG_MDIO_CAVIUM=y
+CONFIG_MDIO_GPIO=y
+CONFIG_MDIO_OCTEON=y
+CONFIG_MDIO_THUNDER=y
+
+#
+# MII PHY device drivers
+#
+CONFIG_AMD_PHY=y
+CONFIG_AQUANTIA_PHY=y
+CONFIG_AT803X_PHY=y
+CONFIG_BCM7XXX_PHY=y
+CONFIG_BCM87XX_PHY=y
+CONFIG_BCM_NET_PHYLIB=y
+CONFIG_BROADCOM_PHY=y
+CONFIG_CICADA_PHY=y
+CONFIG_DAVICOM_PHY=y
+CONFIG_DP83848_PHY=y
+CONFIG_DP83867_PHY=y
+CONFIG_FIXED_PHY=y
+CONFIG_ICPLUS_PHY=y
+CONFIG_INTEL_XWAY_PHY=y
+CONFIG_LSI_ET1011C_PHY=y
+CONFIG_LXT_PHY=y
+CONFIG_MARVELL_PHY=y
+CONFIG_MICREL_PHY=y
+CONFIG_MICROCHIP_PHY=y
+CONFIG_MICROSEMI_PHY=y
+CONFIG_NATIONAL_PHY=y
+CONFIG_QSEMI_PHY=y
+CONFIG_REALTEK_PHY=y
+CONFIG_SMSC_PHY=y
+CONFIG_STE10XP=y
+CONFIG_TERANETICS_PHY=y
+CONFIG_VITESSE_PHY=y
+CONFIG_XILINX_GMII2RGMII=y
+# CONFIG_MICREL_KS8995MA is not set
+# CONFIG_PPP is not set
+# CONFIG_SLIP is not set
+CONFIG_USB_NET_DRIVERS=y
+# CONFIG_USB_CATC is not set
+# CONFIG_USB_KAWETH is not set
+# CONFIG_USB_PEGASUS is not set
+# CONFIG_USB_RTL8150 is not set
+# CONFIG_USB_RTL8152 is not set
+# CONFIG_USB_LAN78XX is not set
+# CONFIG_USB_USBNET is not set
+# CONFIG_USB_IPHETH is not set
+# CONFIG_WLAN is not set
+
+#
+# Enable WiMAX (Networking options) to see the WiMAX drivers
+#
+# CONFIG_WAN is not set
+# CONFIG_VMXNET3 is not set
+# CONFIG_ISDN is not set
+# CONFIG_NVM is not set
+
+#
+# Input device support
+#
+CONFIG_INPUT=y
+CONFIG_INPUT_LEDS=y
+# CONFIG_INPUT_FF_MEMLESS is not set
+# CONFIG_INPUT_POLLDEV is not set
+# CONFIG_INPUT_SPARSEKMAP is not set
+# CONFIG_INPUT_MATRIXKMAP is not set
+
+#
+# Userland interfaces
+#
+# CONFIG_INPUT_MOUSEDEV is not set
+# CONFIG_INPUT_JOYDEV is not set
+# CONFIG_INPUT_EVDEV is not set
+# CONFIG_INPUT_EVBUG is not set
+
+#
+# Input Device Drivers
+#
+# CONFIG_INPUT_KEYBOARD is not set
+# CONFIG_INPUT_MOUSE is not set
+# CONFIG_INPUT_JOYSTICK is not set
+# CONFIG_INPUT_TABLET is not set
+# CONFIG_INPUT_TOUCHSCREEN is not set
+# CONFIG_INPUT_MISC is not set
+# CONFIG_RMI4_CORE is not set
+
+#
+# Hardware I/O ports
+#
+# CONFIG_SERIO is not set
+# CONFIG_GAMEPORT is not set
+
+#
+# Character devices
+#
+CONFIG_TTY=y
+# CONFIG_VT is not set
+CONFIG_UNIX98_PTYS=y
+# CONFIG_LEGACY_PTYS is not set
+CONFIG_SERIAL_NONSTANDARD=y
+# CONFIG_ROCKETPORT is not set
+# CONFIG_CYCLADES is not set
+# CONFIG_MOXA_INTELLIO is not set
+# CONFIG_MOXA_SMARTIO is not set
+# CONFIG_SYNCLINKMP is not set
+# CONFIG_SYNCLINK_GT is not set
+# CONFIG_NOZOMI is not set
+# CONFIG_ISI is not set
+# CONFIG_N_HDLC is not set
+# CONFIG_N_GSM is not set
+# CONFIG_TRACE_SINK is not set
+CONFIG_DEVMEM=y
+# CONFIG_DEVKMEM is not set
+
+#
+# Serial drivers
+#
+# CONFIG_SERIAL_8250 is not set
+
+#
+# Non-8250 serial port support
+#
+# CONFIG_SERIAL_MAX3100 is not set
+# CONFIG_SERIAL_MAX310X is not set
+# CONFIG_SERIAL_UARTLITE is not set
+CONFIG_SERIAL_CORE=y
+# CONFIG_SERIAL_JSM is not set
+# CONFIG_SERIAL_SCCNXP is not set
+# CONFIG_SERIAL_SC16IS7XX is not set
+# CONFIG_SERIAL_ALTERA_JTAGUART is not set
+# CONFIG_SERIAL_ALTERA_UART is not set
+# CONFIG_SERIAL_IFX6X60 is not set
+CONFIG_SERIAL_TILEGX=y
+# CONFIG_SERIAL_ARC is not set
+# CONFIG_SERIAL_RP2 is not set
+# CONFIG_SERIAL_FSL_LPUART is not set
+# CONFIG_TTY_PRINTK is not set
+CONFIG_HVC_DRIVER=y
+CONFIG_HVC_IRQ=y
+# CONFIG_IPMI_HANDLER is not set
+CONFIG_HW_RANDOM=y
+CONFIG_HW_RANDOM_TIMERIOMEM=m
+# CONFIG_R3964 is not set
+# CONFIG_APPLICOM is not set
+
+#
+# PCMCIA character devices
+#
+# CONFIG_RAW_DRIVER is not set
+# CONFIG_TCG_TPM is not set
+CONFIG_DEVPORT=y
+CONFIG_TILE_SROM=y
+# CONFIG_XILLYBUS is not set
+
+#
+# I2C support
+#
+CONFIG_I2C=y
+CONFIG_I2C_BOARDINFO=y
+CONFIG_I2C_COMPAT=y
+CONFIG_I2C_CHARDEV=y
+CONFIG_I2C_MUX=y
+
+#
+# Multiplexer I2C Chip support
+#
+# CONFIG_I2C_MUX_GPIO is not set
+CONFIG_I2C_MUX_PCA9541=y
+# CONFIG_I2C_MUX_PCA954x is not set
+CONFIG_I2C_MUX_REG=y
+CONFIG_I2C_MUX_MLXCPLD=m
+CONFIG_I2C_HELPER_AUTO=y
+CONFIG_I2C_ALGOBIT=y
+CONFIG_I2C_ALGOPCA=y
+
+#
+# I2C Hardware Bus support
+#
+
+#
+# PC SMBus host controller drivers
+#
+# CONFIG_I2C_ALI1535 is not set
+# CONFIG_I2C_ALI1563 is not set
+# CONFIG_I2C_ALI15X3 is not set
+# CONFIG_I2C_AMD756 is not set
+# CONFIG_I2C_AMD8111 is not set
+# CONFIG_I2C_I801 is not set
+# CONFIG_I2C_ISCH is not set
+# CONFIG_I2C_PIIX4 is not set
+# CONFIG_I2C_NFORCE2 is not set
+# CONFIG_I2C_SIS5595 is not set
+# CONFIG_I2C_SIS630 is not set
+# CONFIG_I2C_SIS96X is not set
+# CONFIG_I2C_VIA is not set
+# CONFIG_I2C_VIAPRO is not set
+
+#
+# I2C system bus drivers (mostly embedded / system-on-chip)
+#
+# CONFIG_I2C_CBUS_GPIO is not set
+# CONFIG_I2C_DESIGNWARE_PLATFORM is not set
+# CONFIG_I2C_DESIGNWARE_PCI is not set
+CONFIG_I2C_GPIO=y
+# CONFIG_I2C_OCORES is not set
+CONFIG_I2C_PCA_PLATFORM=y
+# CONFIG_I2C_PXA_PCI is not set
+# CONFIG_I2C_SIMTEC is not set
+CONFIG_I2C_TILE=y
+# CONFIG_I2C_XILINX is not set
+
+#
+# External I2C/SMBus adapter drivers
+#
+# CONFIG_I2C_DIOLAN_U2C is not set
+# CONFIG_I2C_PARPORT_LIGHT is not set
+# CONFIG_I2C_ROBOTFUZZ_OSIF is not set
+# CONFIG_I2C_TAOS_EVM is not set
+# CONFIG_I2C_TINY_USB is not set
+
+#
+# Other I2C/SMBus bus drivers
+#
+# CONFIG_I2C_STUB is not set
+# CONFIG_I2C_SLAVE is not set
+# CONFIG_I2C_DEBUG_CORE is not set
+# CONFIG_I2C_DEBUG_ALGO is not set
+CONFIG_I2C_DEBUG_BUS=y
+CONFIG_SPI=y
+# CONFIG_SPI_DEBUG is not set
+CONFIG_SPI_MASTER=y
+
+#
+# SPI Master Controller Drivers
+#
+# CONFIG_SPI_ALTERA is not set
+# CONFIG_SPI_AXI_SPI_ENGINE is not set
+CONFIG_SPI_BITBANG=y
+# CONFIG_SPI_CADENCE is not set
+# CONFIG_SPI_DESIGNWARE is not set
+CONFIG_SPI_GPIO=y
+# CONFIG_SPI_OC_TINY is not set
+CONFIG_SPI_PXA2XX=y
+# CONFIG_SPI_PXA2XX_PCI is not set
+# CONFIG_SPI_ROCKCHIP is not set
+# CONFIG_SPI_SC18IS602 is not set
+# CONFIG_SPI_XCOMM is not set
+# CONFIG_SPI_XILINX is not set
+# CONFIG_SPI_ZYNQMP_GQSPI is not set
+
+#
+# SPI Protocol Masters
+#
+# CONFIG_SPI_SPIDEV is not set
+# CONFIG_SPI_LOOPBACK_TEST is not set
+# CONFIG_SPI_TLE62X0 is not set
+# CONFIG_SPMI is not set
+# CONFIG_HSI is not set
+
+#
+# PPS support
+#
+CONFIG_PPS=y
+# CONFIG_PPS_DEBUG is not set
+
+#
+# PPS clients support
+#
+# CONFIG_PPS_CLIENT_KTIMER is not set
+# CONFIG_PPS_CLIENT_LDISC is not set
+# CONFIG_PPS_CLIENT_GPIO is not set
+
+#
+# PPS generators support
+#
+
+#
+# PTP clock support
+#
+CONFIG_PTP_1588_CLOCK=y
+
+#
+# Enable PHYLIB and NETWORK_PHY_TIMESTAMPING to see the additional clocks.
+#
+CONFIG_GPIOLIB=y
+CONFIG_GPIOLIB_IRQCHIP=y
+# CONFIG_DEBUG_GPIO is not set
+CONFIG_GPIO_SYSFS=y
+
+#
+# Memory mapped GPIO drivers
+#
+# CONFIG_GPIO_DWAPB is not set
+# CONFIG_GPIO_GENERIC_PLATFORM is not set
+# CONFIG_GPIO_MOCKUP is not set
+
+#
+# I2C GPIO expanders
+#
+# CONFIG_GPIO_ADP5588 is not set
+# CONFIG_GPIO_MAX7300 is not set
+# CONFIG_GPIO_MAX732X is not set
+CONFIG_GPIO_PCA953X=y
+CONFIG_GPIO_PCA953X_IRQ=y
+CONFIG_GPIO_PCF857X=y
+# CONFIG_GPIO_TPIC2810 is not set
+
+#
+# MFD GPIO expanders
+#
+
+#
+# PCI GPIO expanders
+#
+# CONFIG_GPIO_BT8XX is not set
+# CONFIG_GPIO_RDC321X is not set
+
+#
+# SPI GPIO expanders
+#
+# CONFIG_GPIO_MAX7301 is not set
+# CONFIG_GPIO_MC33880 is not set
+# CONFIG_GPIO_PISOSR is not set
+
+#
+# SPI or I2C GPIO expanders
+#
+
+#
+# USB GPIO expanders
+#
+# CONFIG_W1 is not set
+# CONFIG_POWER_AVS is not set
+# CONFIG_POWER_RESET is not set
+# CONFIG_POWER_SUPPLY is not set
+CONFIG_HWMON=y
+CONFIG_HWMON_VID=y
+CONFIG_HWMON_DEBUG_CHIP=y
+
+#
+# Native drivers
+#
+# CONFIG_SENSORS_AD7314 is not set
+# CONFIG_SENSORS_AD7414 is not set
+# CONFIG_SENSORS_AD7418 is not set
+# CONFIG_SENSORS_ADM1021 is not set
+# CONFIG_SENSORS_ADM1025 is not set
+# CONFIG_SENSORS_ADM1026 is not set
+# CONFIG_SENSORS_ADM1029 is not set
+# CONFIG_SENSORS_ADM1031 is not set
+# CONFIG_SENSORS_ADM9240 is not set
+# CONFIG_SENSORS_ADT7310 is not set
+# CONFIG_SENSORS_ADT7410 is not set
+# CONFIG_SENSORS_ADT7411 is not set
+# CONFIG_SENSORS_ADT7462 is not set
+# CONFIG_SENSORS_ADT7470 is not set
+# CONFIG_SENSORS_ADT7475 is not set
+# CONFIG_SENSORS_ASC7621 is not set
+# CONFIG_SENSORS_ATXP1 is not set
+# CONFIG_SENSORS_DS620 is not set
+# CONFIG_SENSORS_DS1621 is not set
+# CONFIG_SENSORS_I5K_AMB is not set
+# CONFIG_SENSORS_F71805F is not set
+# CONFIG_SENSORS_F71882FG is not set
+# CONFIG_SENSORS_F75375S is not set
+# CONFIG_SENSORS_FTSTEUTATES is not set
+# CONFIG_SENSORS_GL518SM is not set
+# CONFIG_SENSORS_GL520SM is not set
+# CONFIG_SENSORS_G760A is not set
+# CONFIG_SENSORS_G762 is not set
+# CONFIG_SENSORS_GPIO_FAN is not set
+# CONFIG_SENSORS_HIH6130 is not set
+# CONFIG_SENSORS_IT87 is not set
+# CONFIG_SENSORS_JC42 is not set
+# CONFIG_SENSORS_POWR1220 is not set
+# CONFIG_SENSORS_LINEAGE is not set
+# CONFIG_SENSORS_LTC2945 is not set
+# CONFIG_SENSORS_LTC2990 is not set
+# CONFIG_SENSORS_LTC4151 is not set
+# CONFIG_SENSORS_LTC4215 is not set
+# CONFIG_SENSORS_LTC4222 is not set
+# CONFIG_SENSORS_LTC4245 is not set
+# CONFIG_SENSORS_LTC4260 is not set
+# CONFIG_SENSORS_LTC4261 is not set
+# CONFIG_SENSORS_MAX1111 is not set
+# CONFIG_SENSORS_MAX16065 is not set
+# CONFIG_SENSORS_MAX1619 is not set
+# CONFIG_SENSORS_MAX1668 is not set
+# CONFIG_SENSORS_MAX197 is not set
+# CONFIG_SENSORS_MAX31722 is not set
+CONFIG_SENSORS_MAX6639=y
+# CONFIG_SENSORS_MAX6642 is not set
+# CONFIG_SENSORS_MAX6650 is not set
+# CONFIG_SENSORS_MAX6697 is not set
+# CONFIG_SENSORS_MAX31790 is not set
+# CONFIG_SENSORS_MCP3021 is not set
+# CONFIG_SENSORS_TC654 is not set
+# CONFIG_SENSORS_ADCXX is not set
+CONFIG_SENSORS_LM63=y
+CONFIG_SENSORS_LM70=y
+CONFIG_SENSORS_LM73=y
+CONFIG_SENSORS_LM75=y
+CONFIG_SENSORS_LM77=y
+CONFIG_SENSORS_LM78=y
+CONFIG_SENSORS_LM80=y
+CONFIG_SENSORS_LM83=y
+CONFIG_SENSORS_LM85=y
+CONFIG_SENSORS_LM87=y
+CONFIG_SENSORS_LM90=y
+CONFIG_SENSORS_LM92=y
+CONFIG_SENSORS_LM93=y
+CONFIG_SENSORS_LM95234=y
+CONFIG_SENSORS_LM95241=y
+CONFIG_SENSORS_LM95245=y
+# CONFIG_SENSORS_PC87360 is not set
+# CONFIG_SENSORS_PC87427 is not set
+# CONFIG_SENSORS_NTC_THERMISTOR is not set
+# CONFIG_SENSORS_NCT6683 is not set
+# CONFIG_SENSORS_NCT6775 is not set
+# CONFIG_SENSORS_NCT7802 is not set
+# CONFIG_SENSORS_NCT7904 is not set
+# CONFIG_SENSORS_PCF8591 is not set
+# CONFIG_PMBUS is not set
+# CONFIG_SENSORS_SHT15 is not set
+# CONFIG_SENSORS_SHT21 is not set
+# CONFIG_SENSORS_SHT3x is not set
+# CONFIG_SENSORS_SHTC1 is not set
+# CONFIG_SENSORS_SIS5595 is not set
+# CONFIG_SENSORS_DME1737 is not set
+# CONFIG_SENSORS_EMC1403 is not set
+# CONFIG_SENSORS_EMC2103 is not set
+# CONFIG_SENSORS_EMC6W201 is not set
+# CONFIG_SENSORS_SMSC47M1 is not set
+# CONFIG_SENSORS_SMSC47M192 is not set
+# CONFIG_SENSORS_SMSC47B397 is not set
+# CONFIG_SENSORS_SCH56XX_COMMON is not set
+# CONFIG_SENSORS_SCH5627 is not set
+# CONFIG_SENSORS_SCH5636 is not set
+# CONFIG_SENSORS_SMM665 is not set
+# CONFIG_SENSORS_ADC128D818 is not set
+# CONFIG_SENSORS_ADS1015 is not set
+# CONFIG_SENSORS_ADS7828 is not set
+# CONFIG_SENSORS_ADS7871 is not set
+# CONFIG_SENSORS_AMC6821 is not set
+# CONFIG_SENSORS_INA209 is not set
+# CONFIG_SENSORS_INA2XX is not set
+# CONFIG_SENSORS_INA3221 is not set
+# CONFIG_SENSORS_TC74 is not set
+# CONFIG_SENSORS_THMC50 is not set
+# CONFIG_SENSORS_TMP102 is not set
+# CONFIG_SENSORS_TMP103 is not set
+# CONFIG_SENSORS_TMP108 is not set
+# CONFIG_SENSORS_TMP401 is not set
+# CONFIG_SENSORS_TMP421 is not set
+# CONFIG_SENSORS_VIA686A is not set
+# CONFIG_SENSORS_VT1211 is not set
+# CONFIG_SENSORS_VT8231 is not set
+# CONFIG_SENSORS_W83781D is not set
+# CONFIG_SENSORS_W83791D is not set
+# CONFIG_SENSORS_W83792D is not set
+# CONFIG_SENSORS_W83793 is not set
+# CONFIG_SENSORS_W83795 is not set
+# CONFIG_SENSORS_W83L785TS is not set
+# CONFIG_SENSORS_W83L786NG is not set
+# CONFIG_SENSORS_W83627HF is not set
+# CONFIG_SENSORS_W83627EHF is not set
+CONFIG_THERMAL=y
+CONFIG_THERMAL_HWMON=y
+# CONFIG_THERMAL_WRITABLE_TRIPS is not set
+CONFIG_THERMAL_DEFAULT_GOV_STEP_WISE=y
+# CONFIG_THERMAL_DEFAULT_GOV_FAIR_SHARE is not set
+# CONFIG_THERMAL_DEFAULT_GOV_USER_SPACE is not set
+# CONFIG_THERMAL_DEFAULT_GOV_POWER_ALLOCATOR is not set
+# CONFIG_THERMAL_GOV_FAIR_SHARE is not set
+CONFIG_THERMAL_GOV_STEP_WISE=y
+# CONFIG_THERMAL_GOV_BANG_BANG is not set
+# CONFIG_THERMAL_GOV_USER_SPACE is not set
+# CONFIG_THERMAL_GOV_POWER_ALLOCATOR is not set
+# CONFIG_THERMAL_EMULATION is not set
+
+#
+# ACPI INT340X thermal drivers
+#
+CONFIG_WATCHDOG=y
+# CONFIG_WATCHDOG_CORE is not set
+CONFIG_WATCHDOG_NOWAYOUT=y
+# CONFIG_WATCHDOG_SYSFS is not set
+
+#
+# Watchdog Device Drivers
+#
+# CONFIG_SOFT_WATCHDOG is not set
+# CONFIG_XILINX_WATCHDOG is not set
+# CONFIG_ZIIRAVE_WATCHDOG is not set
+# CONFIG_CADENCE_WATCHDOG is not set
+# CONFIG_DW_WATCHDOG is not set
+# CONFIG_MAX63XX_WATCHDOG is not set
+# CONFIG_ALIM7101_WDT is not set
+# CONFIG_I6300ESB_WDT is not set
+# CONFIG_MEN_A21_WDT is not set
+
+#
+# PCI-based Watchdog Cards
+#
+# CONFIG_PCIPCWATCHDOG is not set
+# CONFIG_WDTPCI is not set
+
+#
+# USB-based Watchdog Cards
+#
+# CONFIG_USBPCWATCHDOG is not set
+
+#
+# Watchdog Pretimeout Governors
+#
+# CONFIG_WATCHDOG_PRETIMEOUT_GOV is not set
+CONFIG_SSB_POSSIBLE=y
+
+#
+# Sonics Silicon Backplane
+#
+CONFIG_SSB=y
+CONFIG_SSB_SPROM=y
+CONFIG_SSB_PCIHOST_POSSIBLE=y
+CONFIG_SSB_PCIHOST=y
+# CONFIG_SSB_B43_PCI_BRIDGE is not set
+CONFIG_SSB_SDIOHOST_POSSIBLE=y
+# CONFIG_SSB_SDIOHOST is not set
+# CONFIG_SSB_SILENT is not set
+# CONFIG_SSB_DEBUG is not set
+CONFIG_SSB_DRIVER_PCICORE_POSSIBLE=y
+CONFIG_SSB_DRIVER_PCICORE=y
+# CONFIG_SSB_DRIVER_GPIO is not set
+CONFIG_BCMA_POSSIBLE=y
+
+#
+# Broadcom specific AMBA
+#
+# CONFIG_BCMA is not set
+
+#
+# Multifunction device drivers
+#
+# CONFIG_MFD_CORE is not set
+# CONFIG_MFD_AS3711 is not set
+# CONFIG_PMIC_ADP5520 is not set
+# CONFIG_MFD_AAT2870_CORE is not set
+# CONFIG_MFD_BCM590XX is not set
+# CONFIG_MFD_AXP20X_I2C is not set
+# CONFIG_PMIC_DA903X is not set
+# CONFIG_MFD_DA9052_SPI is not set
+# CONFIG_MFD_DA9052_I2C is not set
+# CONFIG_MFD_DA9055 is not set
+# CONFIG_MFD_DA9062 is not set
+# CONFIG_MFD_DA9063 is not set
+# CONFIG_MFD_DA9150 is not set
+# CONFIG_MFD_DLN2 is not set
+# CONFIG_MFD_MC13XXX_SPI is not set
+# CONFIG_MFD_MC13XXX_I2C is not set
+# CONFIG_HTC_PASIC3 is not set
+# CONFIG_HTC_I2CPLD is not set
+# CONFIG_LPC_ICH is not set
+# CONFIG_LPC_SCH is not set
+# CONFIG_INTEL_SOC_PMIC is not set
+# CONFIG_MFD_JANZ_CMODIO is not set
+# CONFIG_MFD_KEMPLD is not set
+# CONFIG_MFD_88PM800 is not set
+# CONFIG_MFD_88PM805 is not set
+# CONFIG_MFD_88PM860X is not set
+# CONFIG_MFD_MAX14577 is not set
+# CONFIG_MFD_MAX77693 is not set
+# CONFIG_MFD_MAX77843 is not set
+# CONFIG_MFD_MAX8907 is not set
+# CONFIG_MFD_MAX8925 is not set
+# CONFIG_MFD_MAX8997 is not set
+# CONFIG_MFD_MAX8998 is not set
+# CONFIG_MFD_MT6397 is not set
+# CONFIG_MFD_MENF21BMC is not set
+# CONFIG_EZX_PCAP is not set
+# CONFIG_MFD_VIPERBOARD is not set
+# CONFIG_MFD_RETU is not set
+# CONFIG_MFD_PCF50633 is not set
+# CONFIG_MFD_RDC321X is not set
+# CONFIG_MFD_RTSX_PCI is not set
+# CONFIG_MFD_RT5033 is not set
+# CONFIG_MFD_RTSX_USB is not set
+# CONFIG_MFD_RC5T583 is not set
+# CONFIG_MFD_SEC_CORE is not set
+# CONFIG_MFD_SI476X_CORE is not set
+# CONFIG_MFD_SM501 is not set
+# CONFIG_MFD_SKY81452 is not set
+# CONFIG_MFD_SMSC is not set
+# CONFIG_ABX500_CORE is not set
+# CONFIG_MFD_SYSCON is not set
+# CONFIG_MFD_TI_AM335X_TSCADC is not set
+# CONFIG_MFD_LP3943 is not set
+# CONFIG_MFD_LP8788 is not set
+# CONFIG_MFD_PALMAS is not set
+# CONFIG_TPS6105X is not set
+# CONFIG_TPS65010 is not set
+# CONFIG_TPS6507X is not set
+# CONFIG_MFD_TPS65086 is not set
+# CONFIG_MFD_TPS65090 is not set
+# CONFIG_MFD_TPS65217 is not set
+# CONFIG_MFD_TI_LP873X is not set
+# CONFIG_MFD_TPS65218 is not set
+# CONFIG_MFD_TPS6586X is not set
+# CONFIG_MFD_TPS65910 is not set
+# CONFIG_MFD_TPS65912_I2C is not set
+# CONFIG_MFD_TPS65912_SPI is not set
+# CONFIG_MFD_TPS80031 is not set
+# CONFIG_TWL4030_CORE is not set
+# CONFIG_TWL6040_CORE is not set
+# CONFIG_MFD_WL1273_CORE is not set
+# CONFIG_MFD_LM3533 is not set
+# CONFIG_MFD_TMIO is not set
+# CONFIG_MFD_VX855 is not set
+# CONFIG_MFD_ARIZONA_I2C is not set
+# CONFIG_MFD_ARIZONA_SPI is not set
+# CONFIG_MFD_WM8400 is not set
+# CONFIG_MFD_WM831X_I2C is not set
+# CONFIG_MFD_WM831X_SPI is not set
+# CONFIG_MFD_WM8350_I2C is not set
+# CONFIG_MFD_WM8994 is not set
+# CONFIG_REGULATOR is not set
+# CONFIG_MEDIA_SUPPORT is not set
+
+#
+# Graphics support
+#
+# CONFIG_VGA_ARB is not set
+CONFIG_DRM=m
+# CONFIG_DRM_DP_AUX_CHARDEV is not set
+CONFIG_DRM_KMS_HELPER=m
+CONFIG_DRM_KMS_FB_HELPER=y
+CONFIG_DRM_FBDEV_EMULATION=y
+# CONFIG_DRM_LOAD_EDID_FIRMWARE is not set
+
+#
+# I2C encoder or helper chips
+#
+# CONFIG_DRM_I2C_CH7006 is not set
+# CONFIG_DRM_I2C_SIL164 is not set
+# CONFIG_DRM_I2C_NXP_TDA998X is not set
+# CONFIG_DRM_RADEON is not set
+# CONFIG_DRM_AMDGPU is not set
+
+#
+# ACP (Audio CoProcessor) Configuration
+#
+# CONFIG_DRM_NOUVEAU is not set
+# CONFIG_DRM_VGEM is not set
+# CONFIG_DRM_UDL is not set
+# CONFIG_DRM_AST is not set
+# CONFIG_DRM_MGAG200 is not set
+# CONFIG_DRM_CIRRUS_QEMU is not set
+# CONFIG_DRM_QXL is not set
+# CONFIG_DRM_BOCHS is not set
+CONFIG_DRM_BRIDGE=y
+
+#
+# Display Interface Bridges
+#
+# CONFIG_DRM_ANALOGIX_ANX78XX is not set
+# CONFIG_DRM_HISI_HIBMC is not set
+# CONFIG_DRM_LEGACY is not set
+
+#
+# Frame buffer Devices
+#
+CONFIG_FB=y
+# CONFIG_FIRMWARE_EDID is not set
+CONFIG_FB_CMDLINE=y
+CONFIG_FB_NOTIFY=y
+# CONFIG_FB_DDC is not set
+# CONFIG_FB_BOOT_VESA_SUPPORT is not set
+CONFIG_FB_CFB_FILLRECT=y
+CONFIG_FB_CFB_COPYAREA=y
+CONFIG_FB_CFB_IMAGEBLIT=y
+# CONFIG_FB_CFB_REV_PIXELS_IN_BYTE is not set
+CONFIG_FB_SYS_FILLRECT=y
+CONFIG_FB_SYS_COPYAREA=y
+CONFIG_FB_SYS_IMAGEBLIT=y
+# CONFIG_FB_FOREIGN_ENDIAN is not set
+CONFIG_FB_SYS_FOPS=y
+CONFIG_FB_DEFERRED_IO=y
+# CONFIG_FB_SVGALIB is not set
+# CONFIG_FB_MACMODES is not set
+CONFIG_FB_BACKLIGHT=y
+CONFIG_FB_MODE_HELPERS=y
+# CONFIG_FB_TILEBLITTING is not set
+
+#
+# Frame buffer hardware drivers
+#
+# CONFIG_FB_CIRRUS is not set
+# CONFIG_FB_PM2 is not set
+# CONFIG_FB_CYBER2000 is not set
+# CONFIG_FB_ASILIANT is not set
+# CONFIG_FB_IMSTT is not set
+CONFIG_FB_UVESA=y
+# CONFIG_FB_OPENCORES is not set
+# CONFIG_FB_S1D13XXX is not set
+# CONFIG_FB_NVIDIA is not set
+# CONFIG_FB_RIVA is not set
+# CONFIG_FB_I740 is not set
+# CONFIG_FB_MATROX is not set
+# CONFIG_FB_RADEON is not set
+# CONFIG_FB_ATY128 is not set
+# CONFIG_FB_ATY is not set
+# CONFIG_FB_S3 is not set
+# CONFIG_FB_SAVAGE is not set
+# CONFIG_FB_SIS is not set
+# CONFIG_FB_NEOMAGIC is not set
+# CONFIG_FB_KYRO is not set
+# CONFIG_FB_3DFX is not set
+# CONFIG_FB_VOODOO1 is not set
+# CONFIG_FB_VT8623 is not set
+# CONFIG_FB_TRIDENT is not set
+# CONFIG_FB_ARK is not set
+# CONFIG_FB_PM3 is not set
+# CONFIG_FB_CARMINE is not set
+# CONFIG_FB_SMSCUFX is not set
+CONFIG_FB_UDL=y
+# CONFIG_FB_IBM_GXT4500 is not set
+# CONFIG_FB_VIRTUAL is not set
+# CONFIG_FB_METRONOME is not set
+# CONFIG_FB_MB862XX is not set
+# CONFIG_FB_BROADSHEET is not set
+# CONFIG_FB_AUO_K190X is not set
+CONFIG_FB_SIMPLE=y
+# CONFIG_FB_SM712 is not set
+CONFIG_BACKLIGHT_LCD_SUPPORT=y
+CONFIG_LCD_CLASS_DEVICE=y
+# CONFIG_LCD_L4F00242T03 is not set
+# CONFIG_LCD_LMS283GF05 is not set
+# CONFIG_LCD_LTV350QV is not set
+# CONFIG_LCD_ILI922X is not set
+# CONFIG_LCD_ILI9320 is not set
+# CONFIG_LCD_TDO24M is not set
+# CONFIG_LCD_VGG2432A4 is not set
+# CONFIG_LCD_PLATFORM is not set
+# CONFIG_LCD_S6E63M0 is not set
+# CONFIG_LCD_LD9040 is not set
+# CONFIG_LCD_AMS369FG06 is not set
+# CONFIG_LCD_LMS501KF03 is not set
+# CONFIG_LCD_HX8357 is not set
+CONFIG_BACKLIGHT_CLASS_DEVICE=y
+CONFIG_BACKLIGHT_GENERIC=y
+# CONFIG_BACKLIGHT_PWM is not set
+# CONFIG_BACKLIGHT_PM8941_WLED is not set
+# CONFIG_BACKLIGHT_ADP8860 is not set
+# CONFIG_BACKLIGHT_ADP8870 is not set
+# CONFIG_BACKLIGHT_LM3630A is not set
+# CONFIG_BACKLIGHT_LM3639 is not set
+# CONFIG_BACKLIGHT_LP855X is not set
+CONFIG_BACKLIGHT_GPIO=y
+# CONFIG_BACKLIGHT_LV5207LP is not set
+# CONFIG_BACKLIGHT_BD6107 is not set
+# CONFIG_VGASTATE is not set
+CONFIG_HDMI=y
+CONFIG_LOGO=y
+CONFIG_LOGO_LINUX_MONO=y
+CONFIG_LOGO_LINUX_VGA16=y
+CONFIG_LOGO_LINUX_CLUT224=y
+# CONFIG_SOUND is not set
+
+#
+# HID support
+#
+CONFIG_HID=y
+# CONFIG_HID_BATTERY_STRENGTH is not set
+# CONFIG_HIDRAW is not set
+# CONFIG_UHID is not set
+CONFIG_HID_GENERIC=y
+
+#
+# Special HID drivers
+#
+# CONFIG_HID_A4TECH is not set
+# CONFIG_HID_ACRUX is not set
+# CONFIG_HID_APPLE is not set
+# CONFIG_HID_APPLEIR is not set
+# CONFIG_HID_AUREAL is not set
+# CONFIG_HID_BELKIN is not set
+# CONFIG_HID_BETOP_FF is not set
+# CONFIG_HID_CHERRY is not set
+# CONFIG_HID_CHICONY is not set
+# CONFIG_HID_CORSAIR is not set
+# CONFIG_HID_CMEDIA is not set
+# CONFIG_HID_CP2112 is not set
+# CONFIG_HID_CYPRESS is not set
+# CONFIG_HID_DRAGONRISE is not set
+# CONFIG_HID_EMS_FF is not set
+# CONFIG_HID_ELECOM is not set
+# CONFIG_HID_ELO is not set
+# CONFIG_HID_EZKEY is not set
+# CONFIG_HID_GEMBIRD is not set
+# CONFIG_HID_GFRM is not set
+# CONFIG_HID_HOLTEK is not set
+# CONFIG_HID_GT683R is not set
+# CONFIG_HID_KEYTOUCH is not set
+# CONFIG_HID_KYE is not set
+# CONFIG_HID_UCLOGIC is not set
+# CONFIG_HID_WALTOP is not set
+# CONFIG_HID_GYRATION is not set
+# CONFIG_HID_ICADE is not set
+# CONFIG_HID_TWINHAN is not set
+# CONFIG_HID_KENSINGTON is not set
+# CONFIG_HID_LCPOWER is not set
+# CONFIG_HID_LED is not set
+# CONFIG_HID_LENOVO is not set
+# CONFIG_HID_LOGITECH is not set
+# CONFIG_HID_MAGICMOUSE is not set
+# CONFIG_HID_MAYFLASH is not set
+# CONFIG_HID_MICROSOFT is not set
+# CONFIG_HID_MONTEREY is not set
+# CONFIG_HID_MULTITOUCH is not set
+# CONFIG_HID_NTRIG is not set
+# CONFIG_HID_ORTEK is not set
+# CONFIG_HID_PANTHERLORD is not set
+# CONFIG_HID_PENMOUNT is not set
+# CONFIG_HID_PETALYNX is not set
+# CONFIG_HID_PICOLCD is not set
+# CONFIG_HID_PLANTRONICS is not set
+# CONFIG_HID_PRIMAX is not set
+# CONFIG_HID_ROCCAT is not set
+# CONFIG_HID_SAITEK is not set
+# CONFIG_HID_SAMSUNG is not set
+# CONFIG_HID_SONY is not set
+# CONFIG_HID_SPEEDLINK is not set
+# CONFIG_HID_STEELSERIES is not set
+# CONFIG_HID_SUNPLUS is not set
+# CONFIG_HID_RMI is not set
+# CONFIG_HID_GREENASIA is not set
+# CONFIG_HID_SMARTJOYPLUS is not set
+# CONFIG_HID_TIVO is not set
+# CONFIG_HID_TOPSEED is not set
+# CONFIG_HID_THINGM is not set
+# CONFIG_HID_THRUSTMASTER is not set
+# CONFIG_HID_UDRAW_PS3 is not set
+# CONFIG_HID_WACOM is not set
+# CONFIG_HID_WIIMOTE is not set
+# CONFIG_HID_XINMO is not set
+# CONFIG_HID_ZEROPLUS is not set
+# CONFIG_HID_ZYDACRON is not set
+# CONFIG_HID_SENSOR_HUB is not set
+# CONFIG_HID_ALPS is not set
+
+#
+# USB HID support
+#
+CONFIG_USB_HID=y
+# CONFIG_HID_PID is not set
+# CONFIG_USB_HIDDEV is not set
+
+#
+# I2C HID support
+#
+# CONFIG_I2C_HID is not set
+CONFIG_USB_OHCI_LITTLE_ENDIAN=y
+CONFIG_USB_SUPPORT=y
+CONFIG_USB_COMMON=y
+CONFIG_USB_ARCH_HAS_HCD=y
+CONFIG_USB=y
+CONFIG_USB_ANNOUNCE_NEW_DEVICES=y
+
+#
+# Miscellaneous USB options
+#
+CONFIG_USB_DEFAULT_PERSIST=y
+# CONFIG_USB_DYNAMIC_MINORS is not set
+# CONFIG_USB_OTG_WHITELIST is not set
+# CONFIG_USB_OTG_BLACKLIST_HUB is not set
+CONFIG_USB_MON=y
+# CONFIG_USB_WUSB_CBAF is not set
+
+#
+# USB Host Controller Drivers
+#
+# CONFIG_USB_C67X00_HCD is not set
+# CONFIG_USB_XHCI_HCD is not set
+CONFIG_USB_EHCI_HCD=y
+# CONFIG_USB_EHCI_ROOT_HUB_TT is not set
+CONFIG_USB_EHCI_TT_NEWSCHED=y
+CONFIG_USB_EHCI_PCI=y
+CONFIG_USB_EHCI_HCD_PLATFORM=y
+# CONFIG_USB_OXU210HP_HCD is not set
+# CONFIG_USB_ISP116X_HCD is not set
+# CONFIG_USB_ISP1362_HCD is not set
+# CONFIG_USB_FOTG210_HCD is not set
+CONFIG_USB_MAX3421_HCD=y
+CONFIG_USB_OHCI_HCD=y
+CONFIG_USB_OHCI_HCD_PCI=y
+# CONFIG_USB_OHCI_HCD_SSB is not set
+# CONFIG_USB_OHCI_HCD_PLATFORM is not set
+# CONFIG_USB_UHCI_HCD is not set
+# CONFIG_USB_SL811_HCD is not set
+# CONFIG_USB_R8A66597_HCD is not set
+# CONFIG_USB_HCD_SSB is not set
+# CONFIG_USB_HCD_TEST_MODE is not set
+
+#
+# USB Device Class drivers
+#
+# CONFIG_USB_ACM is not set
+# CONFIG_USB_PRINTER is not set
+# CONFIG_USB_WDM is not set
+# CONFIG_USB_TMC is not set
+
+#
+# NOTE: USB_STORAGE depends on SCSI but BLK_DEV_SD may
+#
+
+#
+# also be needed; see USB_STORAGE Help for more info
+#
+CONFIG_USB_STORAGE=y
+# CONFIG_USB_STORAGE_DEBUG is not set
+# CONFIG_USB_STORAGE_REALTEK is not set
+# CONFIG_USB_STORAGE_DATAFAB is not set
+# CONFIG_USB_STORAGE_FREECOM is not set
+# CONFIG_USB_STORAGE_ISD200 is not set
+# CONFIG_USB_STORAGE_USBAT is not set
+# CONFIG_USB_STORAGE_SDDR09 is not set
+# CONFIG_USB_STORAGE_SDDR55 is not set
+# CONFIG_USB_STORAGE_JUMPSHOT is not set
+# CONFIG_USB_STORAGE_ALAUDA is not set
+# CONFIG_USB_STORAGE_ONETOUCH is not set
+# CONFIG_USB_STORAGE_KARMA is not set
+# CONFIG_USB_STORAGE_CYPRESS_ATACB is not set
+# CONFIG_USB_STORAGE_ENE_UB6250 is not set
+CONFIG_USB_UAS=y
+
+#
+# USB Imaging devices
+#
+# CONFIG_USB_MDC800 is not set
+# CONFIG_USB_MICROTEK is not set
+# CONFIG_USBIP_CORE is not set
+# CONFIG_USB_MUSB_HDRC is not set
+# CONFIG_USB_DWC3 is not set
+# CONFIG_USB_DWC2 is not set
+# CONFIG_USB_CHIPIDEA is not set
+# CONFIG_USB_ISP1760 is not set
+
+#
+# USB port drivers
+#
+# CONFIG_USB_SERIAL is not set
+
+#
+# USB Miscellaneous drivers
+#
+# CONFIG_USB_EMI62 is not set
+# CONFIG_USB_EMI26 is not set
+# CONFIG_USB_ADUTUX is not set
+# CONFIG_USB_SEVSEG is not set
+# CONFIG_USB_RIO500 is not set
+# CONFIG_USB_LEGOTOWER is not set
+# CONFIG_USB_LCD is not set
+# CONFIG_USB_CYPRESS_CY7C63 is not set
+# CONFIG_USB_CYTHERM is not set
+# CONFIG_USB_IDMOUSE is not set
+# CONFIG_USB_FTDI_ELAN is not set
+# CONFIG_USB_APPLEDISPLAY is not set
+# CONFIG_USB_SISUSBVGA is not set
+# CONFIG_USB_LD is not set
+# CONFIG_USB_TRANCEVIBRATOR is not set
+# CONFIG_USB_IOWARRIOR is not set
+# CONFIG_USB_TEST is not set
+# CONFIG_USB_EHSET_TEST_FIXTURE is not set
+# CONFIG_USB_ISIGHTFW is not set
+# CONFIG_USB_YUREX is not set
+# CONFIG_USB_EZUSB_FX2 is not set
+# CONFIG_USB_HSIC_USB3503 is not set
+# CONFIG_USB_HSIC_USB4604 is not set
+# CONFIG_USB_LINK_LAYER_TEST is not set
+# CONFIG_USB_CHAOSKEY is not set
+
+#
+# USB Physical Layer drivers
+#
+CONFIG_USB_PHY=y
+# CONFIG_NOP_USB_XCEIV is not set
+CONFIG_USB_GPIO_VBUS=y
+# CONFIG_USB_ISP1301 is not set
+# CONFIG_USB_GADGET is not set
+# CONFIG_USB_ULPI_BUS is not set
+# CONFIG_UWB is not set
+CONFIG_MMC=y
+# CONFIG_MMC_DEBUG is not set
+CONFIG_MMC_BLOCK=y
+CONFIG_MMC_BLOCK_MINORS=8
+CONFIG_MMC_BLOCK_BOUNCE=y
+# CONFIG_SDIO_UART is not set
+# CONFIG_MMC_TEST is not set
+
+#
+# MMC/SD/SDIO Host Controller Drivers
+#
+# CONFIG_MMC_SDHCI is not set
+# CONFIG_MMC_TIFM_SD is not set
+CONFIG_MMC_SPI=y
+# CONFIG_MMC_CB710 is not set
+# CONFIG_MMC_VIA_SDMMC is not set
+# CONFIG_MMC_VUB300 is not set
+# CONFIG_MMC_USHC is not set
+# CONFIG_MMC_USDHI6ROL0 is not set
+# CONFIG_MMC_TOSHIBA_PCI is not set
+# CONFIG_MMC_MTK is not set
+# CONFIG_MEMSTICK is not set
+CONFIG_NEW_LEDS=y
+CONFIG_LEDS_CLASS=y
+# CONFIG_LEDS_CLASS_FLASH is not set
+
+#
+# LED drivers
+#
+# CONFIG_LEDS_LM3530 is not set
+# CONFIG_LEDS_LM3642 is not set
+# CONFIG_LEDS_PCA9532 is not set
+# CONFIG_LEDS_GPIO is not set
+# CONFIG_LEDS_LP3944 is not set
+# CONFIG_LEDS_LP5521 is not set
+# CONFIG_LEDS_LP5523 is not set
+# CONFIG_LEDS_LP5562 is not set
+# CONFIG_LEDS_LP8501 is not set
+# CONFIG_LEDS_LP8860 is not set
+CONFIG_LEDS_PCA955X=y
+CONFIG_LEDS_PCA963X=y
+# CONFIG_LEDS_DAC124S085 is not set
+# CONFIG_LEDS_PWM is not set
+# CONFIG_LEDS_BD2802 is not set
+# CONFIG_LEDS_LT3593 is not set
+# CONFIG_LEDS_TCA6507 is not set
+# CONFIG_LEDS_TLC591XX is not set
+# CONFIG_LEDS_LM355x is not set
+
+#
+# LED driver for blink(1) USB RGB LED is under Special HID drivers (HID_THINGM)
+#
+# CONFIG_LEDS_BLINKM is not set
+CONFIG_LEDS_USER=y
+
+#
+# LED Triggers
+#
+# CONFIG_LEDS_TRIGGERS is not set
+# CONFIG_ACCESSIBILITY is not set
+# CONFIG_INFINIBAND is not set
+CONFIG_EDAC_SUPPORT=y
+CONFIG_EDAC=y
+CONFIG_EDAC_LEGACY_SYSFS=y
+# CONFIG_EDAC_DEBUG is not set
+CONFIG_EDAC_MM_EDAC=y
+CONFIG_EDAC_TILE=y
+CONFIG_RTC_LIB=y
+CONFIG_RTC_CLASS=y
+CONFIG_RTC_HCTOSYS=y
+CONFIG_RTC_HCTOSYS_DEVICE="rtc0"
+CONFIG_RTC_SYSTOHC=y
+CONFIG_RTC_SYSTOHC_DEVICE="rtc0"
+# CONFIG_RTC_DEBUG is not set
+
+#
+# RTC interfaces
+#
+CONFIG_RTC_INTF_SYSFS=y
+CONFIG_RTC_INTF_PROC=y
+CONFIG_RTC_INTF_DEV=y
+# CONFIG_RTC_INTF_DEV_UIE_EMUL is not set
+# CONFIG_RTC_DRV_TEST is not set
+
+#
+# I2C RTC drivers
+#
+# CONFIG_RTC_DRV_ABB5ZES3 is not set
+# CONFIG_RTC_DRV_ABX80X is not set
+# CONFIG_RTC_DRV_DS1307 is not set
+# CONFIG_RTC_DRV_DS1374 is not set
+# CONFIG_RTC_DRV_DS1672 is not set
+# CONFIG_RTC_DRV_MAX6900 is not set
+# CONFIG_RTC_DRV_RS5C372 is not set
+# CONFIG_RTC_DRV_ISL1208 is not set
+# CONFIG_RTC_DRV_ISL12022 is not set
+# CONFIG_RTC_DRV_X1205 is not set
+# CONFIG_RTC_DRV_PCF8523 is not set
+# CONFIG_RTC_DRV_PCF85063 is not set
+# CONFIG_RTC_DRV_PCF8563 is not set
+# CONFIG_RTC_DRV_PCF8583 is not set
+# CONFIG_RTC_DRV_M41T80 is not set
+# CONFIG_RTC_DRV_BQ32K is not set
+# CONFIG_RTC_DRV_S35390A is not set
+# CONFIG_RTC_DRV_FM3130 is not set
+# CONFIG_RTC_DRV_RX8010 is not set
+# CONFIG_RTC_DRV_RX8581 is not set
+# CONFIG_RTC_DRV_RX8025 is not set
+# CONFIG_RTC_DRV_EM3027 is not set
+# CONFIG_RTC_DRV_RV8803 is not set
+
+#
+# SPI RTC drivers
+#
+# CONFIG_RTC_DRV_M41T93 is not set
+# CONFIG_RTC_DRV_M41T94 is not set
+# CONFIG_RTC_DRV_DS1302 is not set
+# CONFIG_RTC_DRV_DS1305 is not set
+# CONFIG_RTC_DRV_DS1343 is not set
+# CONFIG_RTC_DRV_DS1347 is not set
+# CONFIG_RTC_DRV_DS1390 is not set
+# CONFIG_RTC_DRV_MAX6916 is not set
+# CONFIG_RTC_DRV_R9701 is not set
+# CONFIG_RTC_DRV_RX4581 is not set
+# CONFIG_RTC_DRV_RX6110 is not set
+# CONFIG_RTC_DRV_RS5C348 is not set
+# CONFIG_RTC_DRV_MAX6902 is not set
+# CONFIG_RTC_DRV_PCF2123 is not set
+# CONFIG_RTC_DRV_MCP795 is not set
+CONFIG_RTC_I2C_AND_SPI=y
+
+#
+# SPI and I2C RTC drivers
+#
+# CONFIG_RTC_DRV_DS3232 is not set
+# CONFIG_RTC_DRV_PCF2127 is not set
+# CONFIG_RTC_DRV_RV3029C2 is not set
+
+#
+# Platform RTC drivers
+#
+# CONFIG_RTC_DRV_DS1286 is not set
+# CONFIG_RTC_DRV_DS1511 is not set
+# CONFIG_RTC_DRV_DS1553 is not set
+# CONFIG_RTC_DRV_DS1685_FAMILY is not set
+# CONFIG_RTC_DRV_DS1742 is not set
+# CONFIG_RTC_DRV_DS2404 is not set
+# CONFIG_RTC_DRV_STK17TA8 is not set
+# CONFIG_RTC_DRV_M48T86 is not set
+# CONFIG_RTC_DRV_M48T35 is not set
+# CONFIG_RTC_DRV_M48T59 is not set
+# CONFIG_RTC_DRV_MSM6242 is not set
+# CONFIG_RTC_DRV_BQ4802 is not set
+# CONFIG_RTC_DRV_RP5C01 is not set
+# CONFIG_RTC_DRV_V3020 is not set
+
+#
+# on-CPU RTC drivers
+#
+CONFIG_RTC_DRV_TILE=y
+
+#
+# HID Sensor RTC drivers
+#
+# CONFIG_RTC_DRV_HID_SENSOR_TIME is not set
+# CONFIG_DMADEVICES is not set
+
+#
+# DMABUF options
+#
+CONFIG_SYNC_FILE=y
+# CONFIG_SW_SYNC is not set
+# CONFIG_AUXDISPLAY is not set
+CONFIG_UIO=y
+# CONFIG_UIO_CIF is not set
+# CONFIG_UIO_PDRV_GENIRQ is not set
+# CONFIG_UIO_DMEM_GENIRQ is not set
+# CONFIG_UIO_AEC is not set
+# CONFIG_UIO_SERCOS3 is not set
+# CONFIG_UIO_PCI_GENERIC is not set
+# CONFIG_UIO_NETX is not set
+# CONFIG_UIO_PRUSS is not set
+# CONFIG_UIO_MF624 is not set
+# CONFIG_VIRT_DRIVERS is not set
+
+#
+# Virtio drivers
+#
+# CONFIG_VIRTIO_PCI is not set
+# CONFIG_VIRTIO_MMIO is not set
+
+#
+# Microsoft Hyper-V guest support
+#
+CONFIG_STAGING=y
+# CONFIG_COMEDI is not set
+# CONFIG_RTS5208 is not set
+# CONFIG_FB_SM750 is not set
+# CONFIG_FB_XGI is not set
+
+#
+# Speakup console speech
+#
+# CONFIG_STAGING_MEDIA is not set
+
+#
+# Android
+#
+# CONFIG_LTE_GDM724X is not set
+# CONFIG_MTD_SPINAND_MT29F is not set
+# CONFIG_LNET is not set
+# CONFIG_DGNC is not set
+# CONFIG_GS_FPGABOOT is not set
+CONFIG_FB_TFT=y
+# CONFIG_FB_TFT_AGM1264K_FL is not set
+# CONFIG_FB_TFT_BD663474 is not set
+# CONFIG_FB_TFT_HX8340BN is not set
+# CONFIG_FB_TFT_HX8347D is not set
+# CONFIG_FB_TFT_HX8353D is not set
+# CONFIG_FB_TFT_HX8357D is not set
+# CONFIG_FB_TFT_ILI9163 is not set
+# CONFIG_FB_TFT_ILI9320 is not set
+# CONFIG_FB_TFT_ILI9325 is not set
+# CONFIG_FB_TFT_ILI9340 is not set
+# CONFIG_FB_TFT_ILI9341 is not set
+# CONFIG_FB_TFT_ILI9481 is not set
+# CONFIG_FB_TFT_ILI9486 is not set
+# CONFIG_FB_TFT_PCD8544 is not set
+# CONFIG_FB_TFT_RA8875 is not set
+# CONFIG_FB_TFT_S6D02A1 is not set
+# CONFIG_FB_TFT_S6D1121 is not set
+# CONFIG_FB_TFT_SSD1289 is not set
+# CONFIG_FB_TFT_SSD1305 is not set
+# CONFIG_FB_TFT_SSD1306 is not set
+# CONFIG_FB_TFT_SSD1325 is not set
+# CONFIG_FB_TFT_SSD1331 is not set
+# CONFIG_FB_TFT_SSD1351 is not set
+# CONFIG_FB_TFT_ST7735R is not set
+# CONFIG_FB_TFT_ST7789V is not set
+# CONFIG_FB_TFT_TINYLCD is not set
+# CONFIG_FB_TFT_TLS8204 is not set
+# CONFIG_FB_TFT_UC1611 is not set
+# CONFIG_FB_TFT_UC1701 is not set
+# CONFIG_FB_TFT_UPD161704 is not set
+# CONFIG_FB_TFT_WATTEROTT is not set
+# CONFIG_FB_FLEX is not set
+# CONFIG_FB_TFT_FBTFT_DEVICE is not set
+# CONFIG_MOST is not set
+# CONFIG_GREYBUS is not set
+
+#
+# Hardware Spinlock drivers
+#
+
+#
+# Clock Source drivers
+#
+# CONFIG_ATMEL_PIT is not set
+# CONFIG_SH_TIMER_CMT is not set
+# CONFIG_SH_TIMER_MTU2 is not set
+# CONFIG_SH_TIMER_TMU is not set
+# CONFIG_EM_TIMER_STI is not set
+# CONFIG_MAILBOX is not set
+CONFIG_IOMMU_SUPPORT=y
+
+#
+# Generic IOMMU Pagetable Support
+#
+
+#
+# Remoteproc drivers
+#
+# CONFIG_REMOTEPROC is not set
+
+#
+# Rpmsg drivers
+#
+
+#
+# SOC (System On Chip) specific Drivers
+#
+
+#
+# Broadcom SoC drivers
+#
+# CONFIG_SUNXI_SRAM is not set
+# CONFIG_SOC_TI is not set
+# CONFIG_PM_DEVFREQ is not set
+# CONFIG_EXTCON is not set
+CONFIG_MEMORY=y
+# CONFIG_IIO is not set
+# CONFIG_NTB is not set
+# CONFIG_VME_BUS is not set
+CONFIG_PWM=y
+CONFIG_PWM_SYSFS=y
+# CONFIG_PWM_PCA9685 is not set
+CONFIG_ARM_GIC_MAX_NR=1
+# CONFIG_IPACK_BUS is not set
+# CONFIG_RESET_CONTROLLER is not set
+# CONFIG_FMC is not set
+
+#
+# PHY Subsystem
+#
+CONFIG_GENERIC_PHY=y
+# CONFIG_PHY_PXA_28NM_HSIC is not set
+# CONFIG_PHY_PXA_28NM_USB2 is not set
+# CONFIG_BCM_KONA_USB2_PHY is not set
+# CONFIG_POWERCAP is not set
+# CONFIG_MCB is not set
+
+#
+# Performance monitor support
+#
+CONFIG_RAS=y
+
+#
+# Android
+#
+# CONFIG_ANDROID is not set
+# CONFIG_LIBNVDIMM is not set
+CONFIG_NVMEM=y
+# CONFIG_STM is not set
+# CONFIG_INTEL_TH is not set
+
+#
+# FPGA Configuration Support
+#
+# CONFIG_FPGA is not set
+
+#
+# File systems
+#
+CONFIG_EXT2_FS=y
+# CONFIG_EXT2_FS_XATTR is not set
+CONFIG_EXT3_FS=y
+# CONFIG_EXT3_FS_POSIX_ACL is not set
+# CONFIG_EXT3_FS_SECURITY is not set
+CONFIG_EXT4_FS=y
+# CONFIG_EXT4_FS_POSIX_ACL is not set
+# CONFIG_EXT4_FS_SECURITY is not set
+# CONFIG_EXT4_ENCRYPTION is not set
+# CONFIG_EXT4_DEBUG is not set
+CONFIG_JBD2=y
+# CONFIG_JBD2_DEBUG is not set
+CONFIG_FS_MBCACHE=y
+# CONFIG_REISERFS_FS is not set
+# CONFIG_JFS_FS is not set
+# CONFIG_XFS_FS is not set
+# CONFIG_GFS2_FS is not set
+# CONFIG_OCFS2_FS is not set
+# CONFIG_BTRFS_FS is not set
+# CONFIG_NILFS2_FS is not set
+# CONFIG_F2FS_FS is not set
+# CONFIG_FS_DAX is not set
+CONFIG_FS_POSIX_ACL=y
+CONFIG_EXPORTFS=y
+# CONFIG_EXPORTFS_BLOCK_OPS is not set
+CONFIG_FILE_LOCKING=y
+CONFIG_MANDATORY_FILE_LOCKING=y
+# CONFIG_FS_ENCRYPTION is not set
+CONFIG_FSNOTIFY=y
+CONFIG_DNOTIFY=y
+CONFIG_INOTIFY_USER=y
+# CONFIG_FANOTIFY is not set
+CONFIG_QUOTA=y
+CONFIG_QUOTA_NETLINK_INTERFACE=y
+# CONFIG_PRINT_QUOTA_WARNING is not set
+# CONFIG_QUOTA_DEBUG is not set
+CONFIG_QUOTA_TREE=y
+# CONFIG_QFMT_V1 is not set
+CONFIG_QFMT_V2=y
+CONFIG_QUOTACTL=y
+CONFIG_AUTOFS4_FS=m
+CONFIG_FUSE_FS=y
+CONFIG_CUSE=m
+# CONFIG_OVERLAY_FS is not set
+
+#
+# Caches
+#
+CONFIG_FSCACHE=m
+CONFIG_FSCACHE_STATS=y
+# CONFIG_FSCACHE_HISTOGRAM is not set
+# CONFIG_FSCACHE_DEBUG is not set
+# CONFIG_FSCACHE_OBJECT_LIST is not set
+# CONFIG_CACHEFILES is not set
+
+#
+# CD-ROM/DVD Filesystems
+#
+# CONFIG_ISO9660_FS is not set
+# CONFIG_UDF_FS is not set
+
+#
+# DOS/FAT/NT Filesystems
+#
+CONFIG_FAT_FS=y
+# CONFIG_MSDOS_FS is not set
+CONFIG_VFAT_FS=y
+CONFIG_FAT_DEFAULT_CODEPAGE=437
+CONFIG_FAT_DEFAULT_IOCHARSET="iso8859-1"
+# CONFIG_FAT_DEFAULT_UTF8 is not set
+CONFIG_NTFS_FS=y
+# CONFIG_NTFS_DEBUG is not set
+# CONFIG_NTFS_RW is not set
+
+#
+# Pseudo filesystems
+#
+CONFIG_PROC_FS=y
+CONFIG_PROC_KCORE=y
+CONFIG_PROC_SYSCTL=y
+CONFIG_PROC_PAGE_MONITOR=y
+# CONFIG_PROC_CHILDREN is not set
+CONFIG_KERNFS=y
+CONFIG_SYSFS=y
+CONFIG_TMPFS=y
+CONFIG_TMPFS_POSIX_ACL=y
+CONFIG_TMPFS_XATTR=y
+CONFIG_HUGETLBFS=y
+CONFIG_HUGETLB_PAGE=y
+CONFIG_CONFIGFS_FS=m
+CONFIG_MISC_FILESYSTEMS=y
+# CONFIG_ORANGEFS_FS is not set
+# CONFIG_ADFS_FS is not set
+# CONFIG_AFFS_FS is not set
+CONFIG_ECRYPT_FS=m
+# CONFIG_ECRYPT_FS_MESSAGING is not set
+# CONFIG_HFS_FS is not set
+# CONFIG_HFSPLUS_FS is not set
+# CONFIG_BEFS_FS is not set
+# CONFIG_BFS_FS is not set
+# CONFIG_EFS_FS is not set
+# CONFIG_JFFS2_FS is not set
+# CONFIG_UBIFS_FS is not set
+# CONFIG_CRAMFS is not set
+# CONFIG_SQUASHFS is not set
+# CONFIG_VXFS_FS is not set
+# CONFIG_MINIX_FS is not set
+# CONFIG_OMFS_FS is not set
+# CONFIG_HPFS_FS is not set
+# CONFIG_QNX4FS_FS is not set
+# CONFIG_QNX6FS_FS is not set
+# CONFIG_ROMFS_FS is not set
+# CONFIG_PSTORE is not set
+# CONFIG_SYSV_FS is not set
+# CONFIG_UFS_FS is not set
+CONFIG_NETWORK_FILESYSTEMS=y
+CONFIG_NFS_FS=y
+CONFIG_NFS_V2=y
+CONFIG_NFS_V3=y
+CONFIG_NFS_V3_ACL=y
+CONFIG_NFS_V4=y
+# CONFIG_NFS_SWAP is not set
+CONFIG_NFS_V4_1=y
+CONFIG_NFS_V4_2=y
+CONFIG_PNFS_FILE_LAYOUT=y
+CONFIG_PNFS_FLEXFILE_LAYOUT=m
+CONFIG_NFS_V4_1_IMPLEMENTATION_ID_DOMAIN="kernel.org"
+# CONFIG_NFS_V4_1_MIGRATION is not set
+CONFIG_NFS_V4_SECURITY_LABEL=y
+# CONFIG_NFS_USE_LEGACY_DNS is not set
+CONFIG_NFS_USE_KERNEL_DNS=y
+CONFIG_NFSD=m
+CONFIG_NFSD_V2_ACL=y
+CONFIG_NFSD_V3=y
+CONFIG_NFSD_V3_ACL=y
+CONFIG_NFSD_V4=y
+# CONFIG_NFSD_BLOCKLAYOUT is not set
+# CONFIG_NFSD_SCSILAYOUT is not set
+# CONFIG_NFSD_FLEXFILELAYOUT is not set
+# CONFIG_NFSD_V4_SECURITY_LABEL is not set
+# CONFIG_NFSD_FAULT_INJECTION is not set
+CONFIG_GRACE_PERIOD=y
+CONFIG_LOCKD=y
+CONFIG_LOCKD_V4=y
+CONFIG_NFS_ACL_SUPPORT=y
+CONFIG_NFS_COMMON=y
+CONFIG_SUNRPC=y
+CONFIG_SUNRPC_GSS=y
+CONFIG_SUNRPC_BACKCHANNEL=y
+CONFIG_RPCSEC_GSS_KRB5=m
+# CONFIG_SUNRPC_DEBUG is not set
+# CONFIG_CEPH_FS is not set
+CONFIG_CIFS=m
+CONFIG_CIFS_STATS=y
+# CONFIG_CIFS_STATS2 is not set
+CONFIG_CIFS_WEAK_PW_HASH=y
+CONFIG_CIFS_UPCALL=y
+CONFIG_CIFS_XATTR=y
+CONFIG_CIFS_POSIX=y
+# CONFIG_CIFS_ACL is not set
+CONFIG_CIFS_DEBUG=y
+# CONFIG_CIFS_DEBUG2 is not set
+CONFIG_CIFS_DFS_UPCALL=y
+# CONFIG_CIFS_SMB2 is not set
+CONFIG_CIFS_FSCACHE=y
+# CONFIG_NCP_FS is not set
+# CONFIG_CODA_FS is not set
+# CONFIG_AFS_FS is not set
+CONFIG_NLS=y
+CONFIG_NLS_DEFAULT="utf8"
+CONFIG_NLS_CODEPAGE_437=y
+CONFIG_NLS_CODEPAGE_737=m
+CONFIG_NLS_CODEPAGE_775=m
+CONFIG_NLS_CODEPAGE_850=m
+CONFIG_NLS_CODEPAGE_852=m
+CONFIG_NLS_CODEPAGE_855=m
+CONFIG_NLS_CODEPAGE_857=m
+CONFIG_NLS_CODEPAGE_860=m
+CONFIG_NLS_CODEPAGE_861=m
+CONFIG_NLS_CODEPAGE_862=m
+CONFIG_NLS_CODEPAGE_863=m
+CONFIG_NLS_CODEPAGE_864=m
+CONFIG_NLS_CODEPAGE_865=m
+CONFIG_NLS_CODEPAGE_866=m
+CONFIG_NLS_CODEPAGE_869=m
+CONFIG_NLS_CODEPAGE_936=m
+CONFIG_NLS_CODEPAGE_950=m
+CONFIG_NLS_CODEPAGE_932=m
+CONFIG_NLS_CODEPAGE_949=m
+CONFIG_NLS_CODEPAGE_874=m
+CONFIG_NLS_ISO8859_8=m
+CONFIG_NLS_CODEPAGE_1250=m
+CONFIG_NLS_CODEPAGE_1251=m
+CONFIG_NLS_ASCII=y
+CONFIG_NLS_ISO8859_1=m
+CONFIG_NLS_ISO8859_2=m
+CONFIG_NLS_ISO8859_3=m
+CONFIG_NLS_ISO8859_4=m
+CONFIG_NLS_ISO8859_5=m
+CONFIG_NLS_ISO8859_6=m
+CONFIG_NLS_ISO8859_7=m
+CONFIG_NLS_ISO8859_9=m
+CONFIG_NLS_ISO8859_13=m
+CONFIG_NLS_ISO8859_14=m
+CONFIG_NLS_ISO8859_15=m
+CONFIG_NLS_KOI8_R=m
+CONFIG_NLS_KOI8_U=m
+# CONFIG_NLS_MAC_ROMAN is not set
+# CONFIG_NLS_MAC_CELTIC is not set
+# CONFIG_NLS_MAC_CENTEURO is not set
+# CONFIG_NLS_MAC_CROATIAN is not set
+# CONFIG_NLS_MAC_CYRILLIC is not set
+# CONFIG_NLS_MAC_GAELIC is not set
+# CONFIG_NLS_MAC_GREEK is not set
+# CONFIG_NLS_MAC_ICELAND is not set
+# CONFIG_NLS_MAC_INUIT is not set
+# CONFIG_NLS_MAC_ROMANIAN is not set
+# CONFIG_NLS_MAC_TURKISH is not set
+CONFIG_NLS_UTF8=m
+CONFIG_DLM=m
+CONFIG_DLM_DEBUG=y
+
+#
+# Kernel hacking
+#
+
+#
+# printk and dmesg options
+#
+# CONFIG_PRINTK_TIME is not set
+CONFIG_CONSOLE_LOGLEVEL_DEFAULT=8
+CONFIG_MESSAGE_LOGLEVEL_DEFAULT=4
+CONFIG_DYNAMIC_DEBUG=y
+
+#
+# Compile-time checks and compiler options
+#
+CONFIG_DEBUG_INFO=y
+# CONFIG_DEBUG_INFO_REDUCED is not set
+# CONFIG_DEBUG_INFO_SPLIT is not set
+# CONFIG_DEBUG_INFO_DWARF4 is not set
+# CONFIG_GDB_SCRIPTS is not set
+# CONFIG_ENABLE_WARN_DEPRECATED is not set
+CONFIG_ENABLE_MUST_CHECK=y
+CONFIG_FRAME_WARN=2048
+CONFIG_STRIP_ASM_SYMS=y
+# CONFIG_READABLE_ASM is not set
+CONFIG_UNUSED_SYMBOLS=y
+# CONFIG_PAGE_OWNER is not set
+CONFIG_DEBUG_FS=y
+CONFIG_HEADERS_CHECK=y
+# CONFIG_DEBUG_SECTION_MISMATCH is not set
+CONFIG_SECTION_MISMATCH_WARN_ONLY=y
+CONFIG_ARCH_WANT_FRAME_POINTERS=y
+CONFIG_FRAME_POINTER=y
+CONFIG_DEBUG_FORCE_WEAK_PER_CPU=y
+CONFIG_MAGIC_SYSRQ=y
+CONFIG_MAGIC_SYSRQ_DEFAULT_ENABLE=0x1
+CONFIG_DEBUG_KERNEL=y
+
+#
+# Memory Debugging
+#
+# CONFIG_PAGE_EXTENSION is not set
+# CONFIG_DEBUG_PAGEALLOC is not set
+# CONFIG_PAGE_POISONING is not set
+# CONFIG_DEBUG_OBJECTS is not set
+# CONFIG_SLUB_DEBUG_ON is not set
+# CONFIG_SLUB_STATS is not set
+CONFIG_HAVE_DEBUG_KMEMLEAK=y
+# CONFIG_DEBUG_KMEMLEAK is not set
+# CONFIG_DEBUG_STACK_USAGE is not set
+CONFIG_DEBUG_VM=y
+# CONFIG_DEBUG_VM_VMACACHE is not set
+# CONFIG_DEBUG_VM_RB is not set
+# CONFIG_DEBUG_VM_PGFLAGS is not set
+CONFIG_DEBUG_MEMORY_INIT=y
+# CONFIG_DEBUG_PER_CPU_MAPS is not set
+CONFIG_HAVE_DEBUG_STACKOVERFLOW=y
+CONFIG_DEBUG_STACKOVERFLOW=y
+# CONFIG_DEBUG_SHIRQ is not set
+
+#
+# Debug Lockups and Hangs
+#
+CONFIG_LOCKUP_DETECTOR=y
+# CONFIG_BOOTPARAM_SOFTLOCKUP_PANIC is not set
+CONFIG_BOOTPARAM_SOFTLOCKUP_PANIC_VALUE=0
+CONFIG_DETECT_HUNG_TASK=y
+CONFIG_DEFAULT_HUNG_TASK_TIMEOUT=120
+# CONFIG_BOOTPARAM_HUNG_TASK_PANIC is not set
+CONFIG_BOOTPARAM_HUNG_TASK_PANIC_VALUE=0
+# CONFIG_WQ_WATCHDOG is not set
+# CONFIG_PANIC_ON_OOPS is not set
+CONFIG_PANIC_ON_OOPS_VALUE=0
+CONFIG_PANIC_TIMEOUT=5
+CONFIG_SCHED_DEBUG=y
+CONFIG_SCHED_INFO=y
+CONFIG_SCHEDSTATS=y
+# CONFIG_SCHED_STACK_END_CHECK is not set
+# CONFIG_DEBUG_TIMEKEEPING is not set
+CONFIG_TIMER_STATS=y
+
+#
+# Lock Debugging (spinlocks, mutexes, etc...)
+#
+# CONFIG_DEBUG_RT_MUTEXES is not set
+# CONFIG_DEBUG_SPINLOCK is not set
+# CONFIG_DEBUG_MUTEXES is not set
+# CONFIG_DEBUG_WW_MUTEX_SLOWPATH is not set
+# CONFIG_DEBUG_LOCK_ALLOC is not set
+# CONFIG_PROVE_LOCKING is not set
+# CONFIG_LOCK_STAT is not set
+# CONFIG_DEBUG_ATOMIC_SLEEP is not set
+# CONFIG_DEBUG_LOCKING_API_SELFTESTS is not set
+# CONFIG_LOCK_TORTURE_TEST is not set
+CONFIG_STACKTRACE=y
+# CONFIG_DEBUG_KOBJECT is not set
+CONFIG_HAVE_DEBUG_BUGVERBOSE=y
+CONFIG_DEBUG_BUGVERBOSE=y
+CONFIG_DEBUG_LIST=y
+# CONFIG_DEBUG_PI_LIST is not set
+# CONFIG_DEBUG_SG is not set
+# CONFIG_DEBUG_NOTIFIERS is not set
+CONFIG_DEBUG_CREDENTIALS=y
+
+#
+# RCU Debugging
+#
+# CONFIG_PROVE_RCU is not set
+# CONFIG_SPARSE_RCU_POINTER is not set
+# CONFIG_TORTURE_TEST is not set
+# CONFIG_RCU_PERF_TEST is not set
+# CONFIG_RCU_TORTURE_TEST is not set
+CONFIG_RCU_CPU_STALL_TIMEOUT=60
+# CONFIG_RCU_TRACE is not set
+# CONFIG_RCU_EQS_DEBUG is not set
+# CONFIG_DEBUG_WQ_FORCE_RR_CPU is not set
+# CONFIG_DEBUG_BLOCK_EXT_DEVT is not set
+# CONFIG_NOTIFIER_ERROR_INJECTION is not set
+# CONFIG_FAULT_INJECTION is not set
+# CONFIG_LATENCYTOP is not set
+CONFIG_USER_STACKTRACE_SUPPORT=y
+CONFIG_HAVE_FUNCTION_TRACER=y
+CONFIG_HAVE_FUNCTION_GRAPH_TRACER=y
+CONFIG_HAVE_DYNAMIC_FTRACE=y
+CONFIG_HAVE_FTRACE_MCOUNT_RECORD=y
+CONFIG_HAVE_SYSCALL_TRACEPOINTS=y
+CONFIG_TRACING_SUPPORT=y
+CONFIG_FTRACE=y
+# CONFIG_FUNCTION_TRACER is not set
+# CONFIG_IRQSOFF_TRACER is not set
+# CONFIG_SCHED_TRACER is not set
+# CONFIG_HWLAT_TRACER is not set
+# CONFIG_ENABLE_DEFAULT_TRACERS is not set
+# CONFIG_FTRACE_SYSCALLS is not set
+# CONFIG_TRACER_SNAPSHOT is not set
+CONFIG_BRANCH_PROFILE_NONE=y
+# CONFIG_PROFILE_ANNOTATED_BRANCHES is not set
+# CONFIG_PROFILE_ALL_BRANCHES is not set
+# CONFIG_STACK_TRACER is not set
+# CONFIG_BLK_DEV_IO_TRACE is not set
+# CONFIG_PROBE_EVENTS is not set
+# CONFIG_HIST_TRIGGERS is not set
+# CONFIG_TRACEPOINT_BENCHMARK is not set
+CONFIG_TRACING_EVENTS_GPIO=y
+
+#
+# Runtime Testing
+#
+# CONFIG_LKDTM is not set
+# CONFIG_TEST_LIST_SORT is not set
+# CONFIG_KPROBES_SANITY_TEST is not set
+# CONFIG_BACKTRACE_SELF_TEST is not set
+# CONFIG_RBTREE_TEST is not set
+# CONFIG_INTERVAL_TREE_TEST is not set
+# CONFIG_PERCPU_TEST is not set
+# CONFIG_ATOMIC64_SELFTEST is not set
+# CONFIG_TEST_HEXDUMP is not set
+# CONFIG_TEST_STRING_HELPERS is not set
+# CONFIG_TEST_KSTRTOX is not set
+# CONFIG_TEST_PRINTF is not set
+# CONFIG_TEST_BITMAP is not set
+# CONFIG_TEST_UUID is not set
+# CONFIG_TEST_RHASHTABLE is not set
+# CONFIG_TEST_HASH is not set
+# CONFIG_DMA_API_DEBUG is not set
+# CONFIG_TEST_LKM is not set
+# CONFIG_TEST_USER_COPY is not set
+# CONFIG_TEST_BPF is not set
+# CONFIG_TEST_FIRMWARE is not set
+# CONFIG_TEST_UDELAY is not set
+# CONFIG_TEST_STATIC_KEYS is not set
+# CONFIG_BUG_ON_DATA_CORRUPTION is not set
+# CONFIG_SAMPLES is not set
+CONFIG_HAVE_ARCH_KGDB=y
+CONFIG_KGDB=y
+# CONFIG_KGDB_TESTS is not set
+# CONFIG_KGDB_KDB is not set
+# CONFIG_ARCH_WANTS_UBSAN_NO_NULL is not set
+# CONFIG_UBSAN is not set
+CONFIG_ARCH_HAS_DEVMEM_IS_ALLOWED=y
+CONFIG_STRICT_DEVMEM=y
+# CONFIG_IO_STRICT_DEVMEM is not set
+CONFIG_EARLY_PRINTK=y
+CONFIG_TILE_HVGLUE_TRACE=y
+
+#
+# Security options
+#
+CONFIG_KEYS=y
+# CONFIG_PERSISTENT_KEYRINGS is not set
+# CONFIG_ENCRYPTED_KEYS is not set
+# CONFIG_KEY_DH_OPERATIONS is not set
+# CONFIG_SECURITY_DMESG_RESTRICT is not set
+CONFIG_SECURITY=y
+CONFIG_SECURITYFS=y
+CONFIG_SECURITY_NETWORK=y
+CONFIG_SECURITY_NETWORK_XFRM=y
+# CONFIG_SECURITY_PATH is not set
+CONFIG_LSM_MMAP_MIN_ADDR=65536
+CONFIG_HAVE_HARDENED_USERCOPY_ALLOCATOR=y
+CONFIG_SECURITY_SELINUX=y
+CONFIG_SECURITY_SELINUX_BOOTPARAM=y
+CONFIG_SECURITY_SELINUX_BOOTPARAM_VALUE=1
+CONFIG_SECURITY_SELINUX_DISABLE=y
+CONFIG_SECURITY_SELINUX_DEVELOP=y
+CONFIG_SECURITY_SELINUX_AVC_STATS=y
+CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE=0
+# CONFIG_SECURITY_SMACK is not set
+# CONFIG_SECURITY_TOMOYO is not set
+# CONFIG_SECURITY_APPARMOR is not set
+# CONFIG_SECURITY_LOADPIN is not set
+# CONFIG_SECURITY_YAMA is not set
+CONFIG_INTEGRITY=y
+# CONFIG_INTEGRITY_SIGNATURE is not set
+CONFIG_INTEGRITY_AUDIT=y
+# CONFIG_IMA is not set
+# CONFIG_EVM is not set
+CONFIG_DEFAULT_SECURITY_SELINUX=y
+# CONFIG_DEFAULT_SECURITY_DAC is not set
+CONFIG_DEFAULT_SECURITY="selinux"
+CONFIG_CRYPTO=y
+
+#
+# Crypto core or helper
+#
+CONFIG_CRYPTO_ALGAPI=y
+CONFIG_CRYPTO_ALGAPI2=y
+CONFIG_CRYPTO_AEAD=m
+CONFIG_CRYPTO_AEAD2=y
+CONFIG_CRYPTO_BLKCIPHER=m
+CONFIG_CRYPTO_BLKCIPHER2=y
+CONFIG_CRYPTO_HASH=y
+CONFIG_CRYPTO_HASH2=y
+CONFIG_CRYPTO_RNG=m
+CONFIG_CRYPTO_RNG2=y
+CONFIG_CRYPTO_RNG_DEFAULT=m
+CONFIG_CRYPTO_AKCIPHER2=y
+CONFIG_CRYPTO_KPP2=y
+CONFIG_CRYPTO_ACOMP2=y
+# CONFIG_CRYPTO_RSA is not set
+# CONFIG_CRYPTO_DH is not set
+# CONFIG_CRYPTO_ECDH is not set
+CONFIG_CRYPTO_MANAGER=y
+CONFIG_CRYPTO_MANAGER2=y
+# CONFIG_CRYPTO_USER is not set
+CONFIG_CRYPTO_MANAGER_DISABLE_TESTS=y
+CONFIG_CRYPTO_GF128MUL=m
+CONFIG_CRYPTO_NULL=m
+CONFIG_CRYPTO_NULL2=y
+CONFIG_CRYPTO_PCRYPT=m
+CONFIG_CRYPTO_WORKQUEUE=y
+CONFIG_CRYPTO_CRYPTD=m
+# CONFIG_CRYPTO_MCRYPTD is not set
+CONFIG_CRYPTO_AUTHENC=m
+CONFIG_CRYPTO_TEST=m
+
+#
+# Authenticated Encryption with Associated Data
+#
+CONFIG_CRYPTO_CCM=m
+CONFIG_CRYPTO_GCM=m
+# CONFIG_CRYPTO_CHACHA20POLY1305 is not set
+CONFIG_CRYPTO_SEQIV=m
+CONFIG_CRYPTO_ECHAINIV=m
+
+#
+# Block modes
+#
+CONFIG_CRYPTO_CBC=m
+CONFIG_CRYPTO_CTR=m
+CONFIG_CRYPTO_CTS=m
+CONFIG_CRYPTO_ECB=m
+CONFIG_CRYPTO_LRW=m
+CONFIG_CRYPTO_PCBC=m
+CONFIG_CRYPTO_XTS=m
+# CONFIG_CRYPTO_KEYWRAP is not set
+
+#
+# Hash modes
+#
+CONFIG_CRYPTO_CMAC=m
+CONFIG_CRYPTO_HMAC=y
+CONFIG_CRYPTO_XCBC=m
+CONFIG_CRYPTO_VMAC=m
+
+#
+# Digest
+#
+CONFIG_CRYPTO_CRC32C=y
+# CONFIG_CRYPTO_CRC32 is not set
+CONFIG_CRYPTO_CRCT10DIF=y
+CONFIG_CRYPTO_GHASH=m
+# CONFIG_CRYPTO_POLY1305 is not set
+CONFIG_CRYPTO_MD4=m
+CONFIG_CRYPTO_MD5=y
+CONFIG_CRYPTO_MICHAEL_MIC=m
+CONFIG_CRYPTO_RMD128=m
+CONFIG_CRYPTO_RMD160=m
+CONFIG_CRYPTO_RMD256=m
+CONFIG_CRYPTO_RMD320=m
+CONFIG_CRYPTO_SHA1=y
+CONFIG_CRYPTO_SHA256=m
+CONFIG_CRYPTO_SHA512=m
+# CONFIG_CRYPTO_SHA3 is not set
+CONFIG_CRYPTO_TGR192=m
+CONFIG_CRYPTO_WP512=m
+
+#
+# Ciphers
+#
+CONFIG_CRYPTO_AES=y
+CONFIG_CRYPTO_ANUBIS=m
+CONFIG_CRYPTO_ARC4=m
+CONFIG_CRYPTO_BLOWFISH=m
+CONFIG_CRYPTO_BLOWFISH_COMMON=m
+CONFIG_CRYPTO_CAMELLIA=m
+CONFIG_CRYPTO_CAST_COMMON=m
+CONFIG_CRYPTO_CAST5=m
+CONFIG_CRYPTO_CAST6=m
+CONFIG_CRYPTO_DES=m
+CONFIG_CRYPTO_FCRYPT=m
+CONFIG_CRYPTO_KHAZAD=m
+# CONFIG_CRYPTO_SALSA20 is not set
+# CONFIG_CRYPTO_CHACHA20 is not set
+CONFIG_CRYPTO_SEED=m
+CONFIG_CRYPTO_SERPENT=m
+CONFIG_CRYPTO_TEA=m
+CONFIG_CRYPTO_TWOFISH=m
+CONFIG_CRYPTO_TWOFISH_COMMON=m
+
+#
+# Compression
+#
+CONFIG_CRYPTO_DEFLATE=m
+CONFIG_CRYPTO_LZO=m
+# CONFIG_CRYPTO_842 is not set
+# CONFIG_CRYPTO_LZ4 is not set
+# CONFIG_CRYPTO_LZ4HC is not set
+
+#
+# Random Number Generation
+#
+# CONFIG_CRYPTO_ANSI_CPRNG is not set
+CONFIG_CRYPTO_DRBG_MENU=m
+CONFIG_CRYPTO_DRBG_HMAC=y
+# CONFIG_CRYPTO_DRBG_HASH is not set
+# CONFIG_CRYPTO_DRBG_CTR is not set
+CONFIG_CRYPTO_DRBG=m
+CONFIG_CRYPTO_JITTERENTROPY=m
+# CONFIG_CRYPTO_USER_API_HASH is not set
+# CONFIG_CRYPTO_USER_API_SKCIPHER is not set
+# CONFIG_CRYPTO_USER_API_RNG is not set
+# CONFIG_CRYPTO_USER_API_AEAD is not set
+CONFIG_CRYPTO_HW=y
+# CONFIG_CRYPTO_DEV_FSL_CAAM_CRYPTO_API_DESC is not set
+# CONFIG_CRYPTO_DEV_CHELSIO is not set
+# CONFIG_ASYMMETRIC_KEY_TYPE is not set
+
+#
+# Certificates for signature checking
+#
+# CONFIG_BINARY_PRINTF is not set
+
+#
+# Library routines
+#
+CONFIG_BITREVERSE=y
+# CONFIG_HAVE_ARCH_BITREVERSE is not set
+CONFIG_GENERIC_STRNCPY_FROM_USER=y
+CONFIG_GENERIC_STRNLEN_USER=y
+CONFIG_GENERIC_NET_UTILS=y
+CONFIG_GENERIC_FIND_FIRST_BIT=y
+CONFIG_GENERIC_PCI_IOMAP=y
+CONFIG_GENERIC_IO=y
+CONFIG_CRC_CCITT=y
+CONFIG_CRC16=y
+CONFIG_CRC_T10DIF=y
+CONFIG_CRC_ITU_T=y
+CONFIG_CRC32=y
+# CONFIG_CRC32_SELFTEST is not set
+CONFIG_CRC32_SLICEBY8=y
+# CONFIG_CRC32_SLICEBY4 is not set
+# CONFIG_CRC32_SARWATE is not set
+# CONFIG_CRC32_BIT is not set
+CONFIG_CRC7=y
+CONFIG_LIBCRC32C=y
+# CONFIG_CRC8 is not set
+CONFIG_AUDIT_GENERIC=y
+# CONFIG_AUDIT_ARCH_COMPAT_GENERIC is not set
+# CONFIG_RANDOM32_SELFTEST is not set
+CONFIG_ZLIB_INFLATE=y
+CONFIG_ZLIB_DEFLATE=m
+CONFIG_LZO_COMPRESS=y
+CONFIG_LZO_DECOMPRESS=y
+CONFIG_LZ4_DECOMPRESS=y
+CONFIG_XZ_DEC=y
+CONFIG_XZ_DEC_X86=y
+CONFIG_XZ_DEC_POWERPC=y
+CONFIG_XZ_DEC_IA64=y
+CONFIG_XZ_DEC_ARM=y
+CONFIG_XZ_DEC_ARMTHUMB=y
+CONFIG_XZ_DEC_SPARC=y
+CONFIG_XZ_DEC_BCJ=y
+# CONFIG_XZ_DEC_TEST is not set
+CONFIG_DECOMPRESS_GZIP=y
+CONFIG_DECOMPRESS_BZIP2=y
+CONFIG_DECOMPRESS_LZMA=y
+CONFIG_DECOMPRESS_XZ=y
+CONFIG_DECOMPRESS_LZO=y
+CONFIG_DECOMPRESS_LZ4=y
+CONFIG_TEXTSEARCH=y
+CONFIG_TEXTSEARCH_KMP=m
+CONFIG_TEXTSEARCH_BM=m
+CONFIG_TEXTSEARCH_FSM=m
+CONFIG_ASSOCIATIVE_ARRAY=y
+CONFIG_HAS_IOMEM=y
+CONFIG_HAS_IOPORT_MAP=y
+CONFIG_HAS_DMA=y
+CONFIG_CPU_RMAP=y
+CONFIG_DQL=y
+CONFIG_NLATTR=y
+# CONFIG_CORDIC is not set
+# CONFIG_DDR is not set
+# CONFIG_IRQ_POLL is not set
+CONFIG_OID_REGISTRY=y
+# CONFIG_SG_SPLIT is not set
+CONFIG_SG_POOL=y
+# CONFIG_ARCH_HAS_SG_CHAIN is not set
+CONFIG_SBITMAP=y
+# CONFIG_VIRTUALIZATION is not set
diff -Naur linux-4.10.1-orig/drivers/i2c/busses/i2c-tile.c linux-4.10.1/drivers/i2c/busses/i2c-tile.c
--- linux-4.10.1-orig/drivers/i2c/busses/i2c-tile.c	1969-12-31 19:00:00.000000000 -0500
+++ linux-4.10.1/drivers/i2c/busses/i2c-tile.c	2017-09-22 10:31:59.000000000 -0400
@@ -0,0 +1,381 @@
+/*
+ * Copyright 2011 Tilera Corporation. All Rights Reserved.
+ *
+ *   This program is free software; you can redistribute it and/or
+ *   modify it under the terms of the GNU General Public License
+ *   as published by the Free Software Foundation, version 2.
+ *
+ *   This program is distributed in the hope that it will be useful, but
+ *   WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, GOOD TITLE or
+ *   NON INFRINGEMENT.  See the GNU General Public License for
+ *   more details.
+ *
+ * Tilera-specific I2C driver.
+ *
+ * This source code is derived from the following driver:
+ *
+ * i2c Support for Atmel's AT91 Two-Wire Interface (TWI)
+ *
+ * Copyright (C) 2004 Rick Bronson
+ * Converted to 2.6 by Andrew Victor <andrew@sanpeople.com>
+ *
+ * Borrowed heavily from original work by:
+ * Copyright (C) 2000 Philip Edelbrock <phil@stimpy.netroedge.com>
+ */
+
+#include <linux/kernel.h>
+#include <linux/slab.h>
+#include <linux/module.h>
+#include <linux/err.h>
+#include <linux/i2c.h>
+#include <linux/errno.h>
+#include <linux/platform_device.h>
+#include <linux/uaccess.h>
+#include <linux/i2c/pca954x.h>
+#include <hv/hypervisor.h>
+#include <hv/drv_i2cm_intf.h>
+
+#define DRV_NAME	"i2c-tile"
+
+/* Handle for hypervisor device. */
+static int i2cm_hv_devhdl[HV_I2CM_MAX_MASTERS];
+
+static int xfer_msg(struct i2c_adapter *adap, struct i2c_msg *pmsg)
+{
+	int retval = 0;
+	int data_offset = 0;
+	int addr = pmsg->addr;
+	int length = pmsg->len;
+	char *buf = pmsg->buf;
+
+	/* The hypervisor uses 8-bit slave addresses. */
+	//addr <<= 1;
+
+	while (length) {
+		int hv_retval;
+		tile_i2c_addr_desc_t hv_offset = {{
+			.addr = addr,
+			.data_offset = data_offset,
+		}};
+
+		int bytes_this_pass = length;
+		if (bytes_this_pass > HV_I2CM_CHUNK_SIZE)
+			bytes_this_pass = HV_I2CM_CHUNK_SIZE;
+
+		if (pmsg->flags & I2C_M_RD)
+			hv_retval = hv_dev_pread(i2cm_hv_devhdl[adap->nr], 0,
+					(HV_VirtAddr) buf,
+					bytes_this_pass,
+					hv_offset.word);
+		else
+			hv_retval = hv_dev_pwrite(i2cm_hv_devhdl[adap->nr], 0,
+					(HV_VirtAddr) buf,
+					bytes_this_pass,
+					hv_offset.word);
+		if (hv_retval < 0) {
+			if (hv_retval == HV_ENODEV) {
+				pr_err(DRV_NAME "%d: %s failed, invalid I2C"
+					" address or access denied.\n",
+					adap->nr,
+					(pmsg->flags & I2C_M_RD) ?
+					"hv_dev_pread" : "hv_dev_pwrite");
+				retval = -ENODEV;
+			} else {
+				printk("hv_retval: %d\n", hv_retval);
+				retval = -EIO;
+			}
+			break;
+		}
+
+		buf += hv_retval;
+		data_offset += hv_retval;
+		length -= hv_retval;
+	}
+
+	return retval;
+}
+
+/*
+ * Generic I2C master transfer routine.
+ */
+static int tile_i2c_xfer(struct i2c_adapter *adap, struct i2c_msg *pmsg,
+			 int num)
+{
+	int ret, i;
+
+	for (i = 0; i < num; i++) {
+		if (pmsg->len && pmsg->buf) {
+
+			/* We don't support ten bit chip address. */
+			if (pmsg->flags & I2C_M_TEN)
+				return -EINVAL;
+
+			ret = xfer_msg(adap, pmsg);
+			if (ret)
+				return ret;
+
+			pmsg++;
+		} else
+			return -EINVAL;
+	}
+
+	return i;
+}
+
+/*
+ * Return list of supported functionality.
+ */
+static u32 tile_i2c_functionality(struct i2c_adapter *adap)
+{
+	return I2C_FUNC_I2C | I2C_FUNC_SMBUS_EMUL;
+}
+
+static const struct i2c_algorithm tile_i2c_algorithm = {
+	.master_xfer	= tile_i2c_xfer,
+	.functionality	= tile_i2c_functionality,
+};
+
+static struct pca954x_platform_mode tile_i2c_plat_modes[4] = {
+	{
+		.adap_id = 0,
+		.deselect_on_exit = 1,
+	},
+	{
+		.adap_id = 0,
+		.deselect_on_exit = 1,
+	},
+	{
+		.adap_id = 0,
+		.deselect_on_exit = 1,
+	},
+	{
+		.adap_id = 0,
+		.deselect_on_exit = 1,
+	}
+};
+
+static struct pca954x_platform_data tile_i2c_plat_data = {
+	.modes = tile_i2c_plat_modes,
+	.num_modes = 4,
+};
+
+
+/*
+ * This routine is called to register all I2C devices that are connected to
+ * the I2C bus. This should be done at arch_initcall time, before declaring
+ * the I2C adapter. This function does the following:
+ *
+ * 1. Retrieve the I2C device lists from the hypervisor, which describe
+ *    the sets of available I2C devices for each controller, and build
+ *    arrays of struct i2c_board_info.
+ *
+ * 2. Statically declare these I2C devices by calling
+ *    i2c_register_board_info().
+ */
+static int __init tile_i2c_dev_init(void)
+{
+	struct i2c_board_info *tile_i2c_devices;
+	tile_i2c_desc_t *tile_i2c_desc;
+	int i2c_desc_size;
+	int i2c_devs = 0;
+	int ret;
+	int i;
+	int instance;
+
+	/*
+	 * Later on we'll use a negative device handle as a sign to
+	 * not instantiate that controller, so make them all negative
+	 * up front in case we return early.
+	 */
+	for (instance = 0; instance < HV_I2CM_MAX_MASTERS; instance++)
+		i2cm_hv_devhdl[instance] = -1;
+
+	/*
+	 * Now get the device list for each controller from the hypervisor,
+	 * and register them all.
+	 */
+	for (instance = 0; instance < HV_I2CM_MAX_MASTERS; instance++) {
+		char i2cm_device[32];
+
+		/* Open the hypervisor's i2cm device. */
+		sprintf(i2cm_device, "i2cm/%d", instance);
+		i2cm_hv_devhdl[instance] =
+			hv_dev_open((HV_VirtAddr)i2cm_device, 0);
+		if (i2cm_hv_devhdl[instance] < 0) {
+			if (i2cm_hv_devhdl[instance] == HV_ENODEV)
+				printk(KERN_DEBUG DRV_NAME "%d: hypervisor "
+				       "device %s not configured\n", instance,
+				       i2cm_device);
+			else
+				printk(KERN_WARNING DRV_NAME "%d: failed to "
+				       "open %s: error %d\n", instance,
+				       i2cm_device, i2cm_hv_devhdl[instance]);
+			continue;
+		}
+
+		ret = hv_dev_pread(i2cm_hv_devhdl[instance], 0,
+				   (HV_VirtAddr)&i2c_devs, sizeof(i2c_devs),
+				   I2C_GET_NUM_DEVS_OFF);
+		if (ret <= 0) {
+			pr_err(DRV_NAME "%d: hv_dev_pread(I2C_GET_NUM_DEVS_OFF)"
+			       " failed, error %d\n", instance, ret);
+			return -EIO;
+		}
+
+		if (i2c_devs <= 0) {
+			/* If no devices, no point in creating the adapter. */
+			i2cm_hv_devhdl[instance] = -1;
+			continue;
+		}
+
+		pr_info(DRV_NAME "%d: detected %d I2C devices.\n",
+			instance, i2c_devs);
+
+		i2c_desc_size = i2c_devs * sizeof(tile_i2c_desc_t);
+		tile_i2c_desc = kzalloc(i2c_desc_size, GFP_KERNEL);
+		if (!tile_i2c_desc)
+			return -ENOMEM;
+
+		ret = hv_dev_pread(i2cm_hv_devhdl[instance], 0,
+				   (HV_VirtAddr)tile_i2c_desc,
+				   i2c_desc_size, I2C_GET_DEV_INFO_OFF);
+		if (ret <= 0) {
+			pr_err(DRV_NAME ": hv_dev_pread(I2C_GET_DEV_INFO_OFF)"
+			       " failed, error %d\n", ret);
+			return -EIO;
+		}
+
+		i2c_desc_size = i2c_devs * sizeof(struct i2c_board_info);
+		tile_i2c_devices = kzalloc(i2c_desc_size, GFP_KERNEL);
+		if (!tile_i2c_devices)
+			return -ENOMEM;
+
+		for (i = 0; i < i2c_devs; i++) {
+			strncpy(tile_i2c_devices[i].type,
+				tile_i2c_desc[i].name, I2C_NAME_SIZE);
+			/*
+			 * The hypervisor uses 8-bit slave addresses,
+			 * convert to 7-bit for Linux.
+			 */
+			tile_i2c_devices[i].addr = tile_i2c_desc[i].addr >> 1;
+			if (!strcmp(tile_i2c_devices[i].type, "pca9546")) {
+				tile_i2c_devices[i].platform_data = &tile_i2c_plat_data;
+			}
+		}
+
+		ret = i2c_register_board_info(instance, tile_i2c_devices,
+					      i2c_devs);
+
+		kfree(tile_i2c_desc);
+		kfree(tile_i2c_devices);
+
+		if (ret)
+			return ret;
+	}
+
+	return 0;
+}
+arch_initcall(tile_i2c_dev_init);
+
+/*
+ * I2C adapter probe routine which registers the I2C adapter with the I2C core.
+ */
+static int tile_i2c_probe(struct platform_device *dev)
+{
+	struct i2c_adapter *adapter;
+	int ret;
+
+	adapter = kzalloc(sizeof(struct i2c_adapter), GFP_KERNEL);
+	if (adapter == NULL) {
+		ret = -ENOMEM;
+		goto malloc_err;
+	}
+
+	adapter->owner = THIS_MODULE;
+	adapter->nr = dev->id;
+	snprintf(adapter->name, sizeof(adapter->name), "%s.%u",
+		 dev_name(&dev->dev), adapter->nr);
+
+	adapter->algo = &tile_i2c_algorithm;
+	adapter->class = I2C_CLASS_HWMON;
+	adapter->dev.parent = &dev->dev;
+
+	ret = i2c_add_numbered_adapter(adapter);
+	if (ret < 0) {
+		dev_err(&dev->dev, "registration failed\n");
+		goto add_adapter_err;
+	}
+
+	platform_set_drvdata(dev, adapter);
+
+	return 0;
+
+add_adapter_err:
+	kfree(adapter);
+malloc_err:
+	return ret;
+}
+
+/*
+ * I2C adapter cleanup routine.
+ */
+static void tile_i2c_remove(struct platform_device *dev)
+{
+	struct i2c_adapter *adapter = platform_get_drvdata(dev);
+	int rc;
+
+	i2c_del_adapter(adapter);
+	platform_set_drvdata(dev, NULL);
+
+	kfree(adapter);
+}
+
+static struct platform_driver tile_i2c_driver = {
+	.driver		= {
+		.name	= DRV_NAME,
+		.owner	= THIS_MODULE,
+	},
+	.probe		= tile_i2c_probe,
+	.remove		= tile_i2c_remove,
+};
+
+/*
+ * Driver init routine.
+ */
+static int __init tile_i2c_init(void)
+{
+	struct platform_device *dev;
+	int err;
+	int instance;
+
+	err = platform_driver_register(&tile_i2c_driver);
+	if (err)
+		return err;
+
+	for (instance = 0; instance < HV_I2CM_MAX_MASTERS; instance++) {
+		if (i2cm_hv_devhdl[instance] >= 0) {
+			dev = platform_device_register_simple(DRV_NAME,
+							      instance,
+							      NULL, 0);
+			if (IS_ERR(dev)) {
+				err = PTR_ERR(dev);
+				pr_warning("i2c-tile%d init failed: %d\n",
+					   instance, err);
+			}
+		}
+	}
+
+	return 0;
+}
+
+/*
+ * Driver cleanup routine.
+ */
+static void __exit tile_i2c_exit(void)
+{
+	platform_driver_unregister(&tile_i2c_driver);
+}
+
+module_init(tile_i2c_init);
+module_exit(tile_i2c_exit);
diff -Naur linux-4.10.1-orig/drivers/i2c/busses/Kconfig linux-4.10.1/drivers/i2c/busses/Kconfig
--- linux-4.10.1-orig/drivers/i2c/busses/Kconfig	2017-02-26 05:09:33.000000000 -0500
+++ linux-4.10.1/drivers/i2c/busses/Kconfig	2017-09-22 10:31:59.000000000 -0400
@@ -919,6 +919,16 @@
 	  If you say yes to this option, support will be included for the
 	  I2C controller embedded in NVIDIA Tegra SOCs
 
+config I2C_TILE
+        tristate "Tilera I2C hypervisor interface"
+        depends on TILE
+        help
+          This supports the Tilera hypervisor interface for
+          communicating with I2C devices attached to the chip.
+
+          This driver can also be built as a module. If so, the module
+          will be called i2c-tile.
+
 config I2C_UNIPHIER
 	tristate "UniPhier FIFO-less I2C controller"
 	depends on ARCH_UNIPHIER || COMPILE_TEST
diff -Naur linux-4.10.1-orig/drivers/i2c/busses/Makefile linux-4.10.1/drivers/i2c/busses/Makefile
--- linux-4.10.1-orig/drivers/i2c/busses/Makefile	2017-02-26 05:09:33.000000000 -0500
+++ linux-4.10.1/drivers/i2c/busses/Makefile	2017-09-22 10:31:59.000000000 -0400
@@ -90,6 +90,7 @@
 obj-$(CONFIG_I2C_TEGRA)		+= i2c-tegra.o
 obj-$(CONFIG_I2C_UNIPHIER)	+= i2c-uniphier.o
 obj-$(CONFIG_I2C_UNIPHIER_F)	+= i2c-uniphier-f.o
+obj-$(CONFIG_I2C_TILE)          += i2c-tile.o
 obj-$(CONFIG_I2C_VERSATILE)	+= i2c-versatile.o
 obj-$(CONFIG_I2C_WMT)		+= i2c-wmt.o
 i2c-octeon-objs := i2c-octeon-core.o i2c-octeon-platdrv.o
diff -Naur linux-4.10.1-orig/drivers/net/ethernet/tile/tilegx.c linux-4.10.1/drivers/net/ethernet/tile/tilegx.c
--- linux-4.10.1-orig/drivers/net/ethernet/tile/tilegx.c	2017-02-26 05:09:33.000000000 -0500
+++ linux-4.10.1/drivers/net/ethernet/tile/tilegx.c	2017-09-22 10:32:37.000000000 -0400
@@ -41,9 +41,12 @@
 #include <linux/net_tstamp.h>
 #include <linux/ptp_clock_kernel.h>
 #include <linux/tick.h>
+#include <linux/platform_device.h>
 
+#include <gxio/gpio.h>
 #include <asm/checksum.h>
 #include <asm/homecache.h>
+#include <gxio/iorpc_mpipe.h>
 #include <gxio/mpipe.h>
 #include <arch/sim.h>
 
@@ -193,6 +196,10 @@
 	int instance;
 	/* The timestamp config. */
 	struct hwtstamp_config stamp_cfg;
+	/* the PHY bus */
+	struct mii_bus *mii_bus;
+
+	int phy_mac;
 };
 
 static struct mpipe_data {
@@ -238,12 +245,15 @@
 	/* Lock for ptp accessors. */
 	struct mutex ptp_lock;
 
+	int initalized;
+
 } mpipe_data[NR_MPIPE_MAX] = {
 	[0 ... (NR_MPIPE_MAX - 1)] {
 		.ingress_irq = -1,
 		.first_buffer_stack = -1,
 		.first_bucket = -1,
-		.num_buckets = 1
+		.num_buckets = 1,
+		.initalized = 0,
 	}
 };
 
@@ -265,6 +275,8 @@
 	GXIO_MPIPE_BUFFER_SIZE_16384
 };
 
+static struct platform_device *tile_net_pdev;
+
 /* Text value of tile_net.cpus if passed as a module parameter. */
 static char *network_cpus_string;
 
@@ -681,7 +693,7 @@
 	}
 
 	/* There are no packets left. */
-	napi_complete(&info_mpipe->napi);
+	napi_complete_done(&info_mpipe->napi, work);
 
 	md = &mpipe_data[instance];
 	/* Re-enable hypervisor interrupts. */
@@ -1310,13 +1322,6 @@
 		return -EIO;
 	}
 
-	rc = gxio_mpipe_init(&md->context, instance);
-	if (rc != 0) {
-		netdev_err(dev, "gxio_mpipe_init: mpipe[%d] %d\n",
-			   instance, rc);
-		return -EIO;
-	}
-
 	/* Set up the buffer stacks. */
 	rc = init_buffer_stacks(dev, network_cpus_count);
 	if (rc != 0)
@@ -1354,6 +1359,8 @@
 	/* Register PTP clock and set mPIPE timestamp, if configured. */
 	register_ptp_clock(dev, md);
 
+	md->initalized = 1;
+
 	return 0;
 
 fail:
@@ -1515,7 +1522,7 @@
 
 	priv->instance = rc;
 	instance = rc;
-	if (!mpipe_data[rc].context.mmio_fast_base) {
+	if (!mpipe_data[rc].context.mmio_fast_base || !mpipe_data[rc].initalized) {
 		/* Do one-time initialization per instance the first time
 		 * any device is opened.
 		 */
@@ -1524,24 +1531,26 @@
 			goto fail;
 	}
 
-	/* Determine if this is the "loopify" device. */
-	if (unlikely((loopify_link_name != NULL) &&
-		     !strcmp(dev->name, loopify_link_name))) {
-		rc = tile_net_link_open(dev, &priv->link, "loop0");
-		if (rc < 0)
-			goto fail;
-		priv->channel = rc;
-		rc = tile_net_link_open(dev, &priv->loopify_link, "loop1");
-		if (rc < 0)
-			goto fail;
-		priv->loopify_channel = rc;
-		priv->echannel = rc;
-	} else {
-		rc = tile_net_link_open(dev, &priv->link, dev->name);
-		if (rc < 0)
-			goto fail;
-		priv->channel = rc;
-		priv->echannel = rc;
+	if (priv->channel < 0) {
+		/* Determine if this is the "loopify" device. */
+		if (unlikely((loopify_link_name != NULL) &&
+			     !strcmp(dev->name, loopify_link_name))) {
+			rc = tile_net_link_open(dev, &priv->link, "loop0");
+			if (rc < 0)
+				goto fail;
+			priv->channel = rc;
+			rc = tile_net_link_open(dev, &priv->loopify_link, "loop1");
+			if (rc < 0)
+				goto fail;
+			priv->loopify_channel = rc;
+			priv->echannel = rc;
+		} else {
+			rc = tile_net_link_open(dev, &priv->link, dev->name);
+			if (rc < 0)
+				goto fail;
+			priv->channel = rc;
+			priv->echannel = rc;
+		}
 	}
 
 	/* Initialize egress info (if needed).  Once ever, per echannel. */
@@ -1555,6 +1564,9 @@
 	if (rc != 0)
 		goto fail;
 
+	if (dev->phydev != NULL)
+		phy_start(dev->phydev);
+
 	mutex_unlock(&tile_net_devs_for_channel_mutex);
 
 	/* Initialize the transmit wake timer for this device for each cpu. */
@@ -1614,6 +1626,10 @@
 	mutex_lock(&tile_net_devs_for_channel_mutex);
 	md->tile_net_devs_for_channel[priv->channel] = NULL;
 	(void)tile_net_update(dev);
+
+	if (dev->phydev)
+		phy_stop(dev->phydev);
+
 	if (priv->loopify_channel >= 0) {
 		if (gxio_mpipe_link_close(&priv->loopify_link) != 0)
 			netdev_warn(dev, "Failed to close loopify link!\n");
@@ -1649,7 +1665,6 @@
 	/* Try to acquire a completion entry. */
 	if (comps->comp_next - comps->comp_last < TILE_NET_MAX_COMPS - 1 ||
 	    tile_net_free_comps(equeue, comps, 32, false) != 0) {
-
 		/* Try to acquire an egress slot. */
 		s64 slot = gxio_mpipe_equeue_try_reserve(equeue, num_edescs);
 		if (slot >= 0)
@@ -2101,6 +2116,9 @@
 	if (cmd == SIOCGHWTSTAMP)
 		return tile_hwtstamp_get(dev, rq);
 
+	if (dev->phydev != NULL)
+		return phy_mii_ioctl(dev->phydev, rq, cmd);
+
 	return -EOPNOTSUPP;
 }
 
@@ -2163,6 +2181,7 @@
 	netdev_features_t features = 0;
 
 	ether_setup(dev);
+	SET_NETDEV_DEV(dev, &tile_net_pdev->dev);
 	dev->netdev_ops = &tile_net_ops;
 	dev->watchdog_timeo = TILE_NET_TIMEOUT;
 
@@ -2181,15 +2200,70 @@
 	dev->features      |= features;
 }
 
+static int tile_xgbe_mdio_read(struct mii_bus *bus, int phy_addr, int regnum)
+{
+	struct tile_net_priv *priv = bus->priv;
+	struct mpipe_data *md = &mpipe_data[priv->instance];
+	int ret = gxio_mpipe_link_mdio_rd_aux(&md->context, priv->phy_mac, phy_addr, 1, regnum);
+	printk("tile_xgbe_mdio_read: mac: %d, addr: %d, regnum: %04x, ret: %04x\n", priv->phy_mac, phy_addr, regnum, ret);
+	return ret;
+}
+
+static int tile_xgbe_mdio_write(struct mii_bus *bus, int phy_addr, int regnum, u16 val)
+{
+	struct tile_net_priv *priv = bus->priv;
+	struct mpipe_data *md = &mpipe_data[priv->instance];
+	printk("tile_xgbe_mdio_write: mac: %d, addr: %d, regnum: %04x, val = %04x\n", priv->phy_mac, phy_addr, regnum, val);
+	return gxio_mpipe_link_mdio_wr_aux(&md->context, priv->phy_mac, phy_addr, 1, regnum, val);
+}
+
+static int tile_xgbe_mdio_reset(struct mii_bus *bus)
+{
+	return 0;
+}
+
+static int tile_gbe_mdio_read(struct mii_bus *bus, int phy_addr, int regnum)
+{
+	struct tile_net_priv *priv = bus->priv;
+	struct mpipe_data *md = &mpipe_data[priv->instance];
+	return gxio_mpipe_link_mdio_rd_aux(&md->context, priv->phy_mac, phy_addr, -1, regnum);
+}
+
+static int tile_gbe_mdio_write(struct mii_bus *bus, int phy_addr, int regnum, u16 val)
+{
+	struct tile_net_priv *priv = bus->priv;
+	struct mpipe_data *md = &mpipe_data[priv->instance];
+
+	// this is required to configure the mPIPE MAC SGMII interface for talking to the PHY.
+	if (regnum == MII_BMCR)
+		gxio_mpipe_link_mac_wr_aux(&md->context, priv->link.mac, 0x8400, val);
+
+	return gxio_mpipe_link_mdio_wr_aux(&md->context, priv->phy_mac, phy_addr, -1, regnum, val);
+}
+
+static int tile_gbe_mdio_reset(struct mii_bus *bus)
+{
+	return 0;
+}
+
+static void tile_phy_state_change_handler(struct net_device *dev)
+{
+	printk("state change?\n");
+}
+
 /* Allocate the device structure, register the device, and obtain the
  * MAC address from the hypervisor.
  */
-static void tile_net_dev_init(const char *name, const uint8_t *mac)
+static void tile_net_dev_init(int index, const char *name, const uint8_t *mac)
 {
 	int ret;
 	struct net_device *dev;
+	struct phy_device *phydev;
 	struct tile_net_priv *priv;
 
+//	if (index < 8)
+//		return;
+
 	/* HACK: Ignore "loop" links. */
 	if (strncmp(name, "loop", 4) == 0)
 		return;
@@ -2206,12 +2280,86 @@
 
 	/* Initialize "priv". */
 	priv = netdev_priv(dev);
+	printk("alloced priv: %p\n", priv);
 	priv->dev = dev;
-	priv->channel = -1;
 	priv->loopify_channel = -1;
-	priv->echannel = -1;
+	priv->instance = gxio_mpipe_link_instance(name);
+	priv->phy_mac = index;
+	ret = tile_net_link_open(dev, &priv->link, name);
+	if (ret < 0) {
+		netdev_err(dev, "tile_net_link_open(%s) failed\n", dev->name);
+                free_netdev(dev);
+                return;
+	}
+	priv->channel = ret;
+	priv->echannel = ret;
 	init_ptp_dev(priv);
 
+	priv->mii_bus = mdiobus_alloc();
+	if (!priv->mii_bus) {
+		netdev_err(dev, "mdiobus_alloc() failed\n");
+		gxio_mpipe_link_close(&priv->link);
+		free_netdev(dev);
+		return;
+	}
+
+	priv->mii_bus->priv = priv;
+	priv->mii_bus->name = "tile-mdio";
+	snprintf(priv->mii_bus->id, MII_BUS_ID_SIZE, "%s-%d", priv->mii_bus->name, priv->channel);
+	// xgbe
+	if (name[0] == 'x') {
+		priv->mii_bus->read = tile_xgbe_mdio_read;
+		priv->mii_bus->write = tile_xgbe_mdio_write;
+		priv->mii_bus->reset = tile_xgbe_mdio_reset;
+	} else {
+		priv->mii_bus->read = tile_gbe_mdio_read;
+		priv->mii_bus->write = tile_gbe_mdio_write;
+		priv->mii_bus->reset = tile_gbe_mdio_reset;
+	}
+	// only probe first phy
+	priv->mii_bus->phy_mask = ~1;
+	priv->mii_bus->parent = &tile_net_pdev->dev;
+	ret = mdiobus_register(priv->mii_bus);
+	if (ret) {
+		mdiobus_free(priv->mii_bus);
+		netdev_err(dev, "mdio bus registration failed: %d\n", ret);
+		gxio_mpipe_link_close(&priv->link);
+		free_netdev(dev);
+		return;
+	}
+
+	phydev = phy_find_first(priv->mii_bus);
+	if (!phydev) {
+		mdiobus_unregister(priv->mii_bus);
+		mdiobus_free(priv->mii_bus);
+		netdev_err(dev, "no PHY found\n");
+		gxio_mpipe_link_close(&priv->link);
+		free_netdev(dev);
+		return;
+	}
+
+	ret = phy_connect_direct(dev, phydev, tile_phy_state_change_handler, 0);
+	if (ret) {
+		mdiobus_unregister(priv->mii_bus);
+		mdiobus_free(priv->mii_bus);
+		netdev_err(dev, "could not attach to PHY\n");
+		gxio_mpipe_link_close(&priv->link);
+		free_netdev(dev);
+		return;
+	}
+
+	dev->phydev = phydev;
+
+	pr_info("%s: attached PHY [%s] (instance=%d, dev=%s, irq=%d, phy_index=%d, mac_index=%d)\n",
+		name,
+		phydev->drv->name,
+		priv->instance,
+		priv->mii_bus->id,
+		mpipe_data[priv->instance].ingress_irq,
+		priv->phy_mac,
+		priv->link.mac
+	);
+
 	/* Get the MAC address and set it in the device struct; this must
 	 * be done before the device is opened.  If the MAC is all zeroes,
 	 * we use a random address, since we're probably on the simulator.
@@ -2224,7 +2372,11 @@
 	/* Register the network device. */
 	ret = register_netdev(dev);
 	if (ret) {
+		phy_disconnect(phydev);
+		mdiobus_unregister(priv->mii_bus);
+		mdiobus_free(priv->mii_bus);
 		netdev_err(dev, "register_netdev failed %d\n", ret);
+		gxio_mpipe_link_close(&priv->link);
 		free_netdev(dev);
 		return;
 	}
@@ -2248,25 +2400,133 @@
 	info->egress_timer.function = tile_net_handle_egress_timer;
 }
 
-/* Module initialization. */
-static int __init tile_net_init_module(void)
+static gxio_gpio_context_t gpio_ctx;
+
+static int tile_net_probe(struct platform_device *pdev)
 {
-	int i;
+	int i, rc;
 	char name[GXIO_MPIPE_LINK_NAME_LEN];
 	uint8_t mac[6];
+	struct mpipe_data *md_zero;
+	struct mpipe_data *md_one;
+	uint64_t pins;
 
-	pr_info("Tilera Network Driver\n");
-
-	BUILD_BUG_ON(NR_MPIPE_MAX != 2);
+	printk("tile_net_probe enter\n");
 
 	mutex_init(&tile_net_devs_for_channel_mutex);
 
+	pins = 7;
+	pins = pins << 48;
+
+	gxio_gpio_init(&gpio_ctx, 0);
+	gxio_gpio_attach(&gpio_ctx, pins);
+	gxio_gpio_set_dir(&gpio_ctx, 0, pins, 0, 0);
+
+	md_zero = &mpipe_data[0];
+        rc = gxio_mpipe_init(&md_zero->context, 0);
+        if (rc != 0) {
+                pr_warn("gxio_mpipe_init: mpipe[%d] %d\n", 0, rc);
+        }
+
+#if 0
+	printk("mPIPE 0:\n");
+
+	printk("\tHypervisor interfaces:\n");
+	for (i = 0; gxio_mpipe_link_enumerate_mac(i, name, mac) >= 0; i++)
+	{
+		gxio_mpipe_link_t tmp_link = {};
+		if (gxio_mpipe_link_open(&tmp_link, &md_zero->context, name, 0) >= 0)
+		{
+			printk("\t\tName: %s, MDIO Index: %d, Channel: %d\n", name, tmp_link.mac, tmp_link.channel);
+			gxio_mpipe_link_close(&tmp_link);
+		}
+	}
+
+	printk("\tBruted GBE Interfaces:\n");
+	for (i = 0; i < 64; i++)
+	{
+		rc = gxio_mpipe_link_mdio_rd_aux(&md_zero->context, i, 0, -1, 0x01);
+		if (rc == 0xFFFF)
+			continue;
+
+		uint32_t phy_id = 0;
+		phy_id = gxio_mpipe_link_mdio_rd_aux(&md_zero->context, i, 0, -1, 0x0002) << 16;
+		phy_id |= gxio_mpipe_link_mdio_rd_aux(&md_zero->context, i, 0, -1, 0x0003);
+
+		printk("\t\tIndex: %d: PHY ID: %08x, link status: %s\n", i, phy_id, rc & 0x04 ? "UP" : "DOWN");
+	}
+
+	printk("\tBruted XGBE Interfaces:\n");
+	for (i = 0; i < 64; i++)
+	{
+		rc = gxio_mpipe_link_mdio_rd_aux(&md_zero->context, i, 0, 1, 0x0001);
+		if (rc == 0xFFFF)
+			continue;
+
+		uint32_t phy_id = 0;
+		phy_id = gxio_mpipe_link_mdio_rd_aux(&md_zero->context, i, 0, 1, 0x0002) << 16;
+		phy_id |= gxio_mpipe_link_mdio_rd_aux(&md_zero->context, i, 0, 1, 0x0003);
+
+		printk("\t\tIndex: %d: PHY ID: %08x\n", i, phy_id);
+	}
+
+	return;
+#endif
+
+	md_one = &mpipe_data[1];
+        rc = gxio_mpipe_init(&md_one->context, 1);
+        if (rc != 0) {
+                pr_warn("gxio_mpipe_init: mpipe[%d] %d\n", 1, rc);
+        }
+
 	/* Initialize each CPU. */
 	on_each_cpu(tile_net_init_module_percpu, NULL, 1);
 
+	i = 0;
+	strcpy(name, "gbe15");
+	strcpy(mac, "\x00\x00\x00\x00\x00\x00");
+	tile_net_dev_init(i, name, mac);
+
+	i = 1;
+	strcpy(name, "gbe14");
+	strcpy(mac, "\x00\x00\x00\x00\x00\x00");
+	tile_net_dev_init(i, name, mac);
+
+	i = 2;
+	strcpy(name, "gbe13");
+	strcpy(mac, "\x00\x00\x00\x00\x00\x00");
+	tile_net_dev_init(i, name, mac);
+
+	i = 3;
+	strcpy(name, "gbe12");
+	strcpy(mac, "\x00\x00\x00\x00\x00\x00");
+	tile_net_dev_init(i, name, mac);
+
+	i = 36;
+	strcpy(name, "gbe11");
+	strcpy(mac, "\x00\x00\x00\x00\x00\x00");
+	tile_net_dev_init(i, name, mac);
+
+	i = 37;
+	strcpy(name, "gbe10");
+	strcpy(mac, "\x00\x00\x00\x00\x00\x00");
+	tile_net_dev_init(i, name, mac);
+
+	i = 38;
+	strcpy(name, "gbe9");
+	strcpy(mac, "\x00\x00\x00\x00\x00\x00");
+	tile_net_dev_init(i, name, mac);
+
+	i = 39;
+	strcpy(name, "gbe8");
+	strcpy(mac, "\x00\x00\x00\x00\x00\x00");
+	tile_net_dev_init(i, name, mac);
+
 	/* Find out what devices we have, and initialize them. */
-	for (i = 0; gxio_mpipe_link_enumerate_mac(i, name, mac) >= 0; i++)
-		tile_net_dev_init(name, mac);
+	//for (i = 0; gxio_mpipe_link_enumerate_mac(i, name, mac) >= 0; i++) {
+		//tile_net_dev_init(i, name, mac);
+        //	tile_net_dev_init(1, name, mac);
+	//}
 
 	if (!network_cpus_init())
 		cpumask_and(&network_cpus_map, housekeeping_cpumask(),
@@ -2274,5 +2534,35 @@
 
 	return 0;
 }
+
+static int tile_net_remove(struct platform_device *pdev)
+{
+	return 0;
+}
+
+static struct platform_driver tile_net_driver = {
+	.driver.name    = "tile_net",
+	.probe          = tile_net_probe,
+	.remove         = tile_net_remove,
+};
+
+/* Module initialization. */
+static int __init tile_net_init_module(void)
+{
+	int rc;
+
+	pr_info("Tilera Network Driver\n");
+
+	BUILD_BUG_ON(NR_MPIPE_MAX != 2);
+
+	platform_driver_register(&tile_net_driver);
+
+	tile_net_pdev = platform_device_alloc("tile_net", -1);
+	printk("tile_net_pdev: %p\n", tile_net_pdev);
+	rc = platform_device_add(tile_net_pdev);
+	printk("platform_device_add ret: %d\n", rc);
+
+	return 0;
+}
 
 module_init(tile_net_init_module);
diff -Naur linux-4.10.1-orig/drivers/tty/hvc/hvc_tile.c linux-4.10.1/drivers/tty/hvc/hvc_tile.c
--- linux-4.10.1-orig/drivers/tty/hvc/hvc_tile.c	2017-02-26 05:09:33.000000000 -0500
+++ linux-4.10.1/drivers/tty/hvc/hvc_tile.c	2017-09-22 10:33:05.000000000 -0400
@@ -75,7 +75,8 @@
 	return i;
 }
 
-#ifdef __tilegx__
+//#ifdef __tilegx__
+#if 0
 /*
  * IRQ based callbacks.
  */
@@ -119,7 +120,8 @@
 static const struct hv_ops hvc_tile_get_put_ops = {
 	.get_chars = hvc_tile_get_chars,
 	.put_chars = hvc_tile_put_chars,
-#ifdef __tilegx__
+//#ifdef __tilegx__
+#if 0
 	.notifier_add = hvc_tile_notifier_add_irq,
 	.notifier_del = hvc_tile_notifier_del_irq,
 	.notifier_hangup = hvc_tile_notifier_hangup_irq,
@@ -127,7 +129,8 @@
 };
 
 
-#ifdef __tilegx__
+//#ifdef __tilegx__
+#if 0
 static int hvc_tile_probe(struct platform_device *pdev)
 {
 	struct hvc_struct *hp;
@@ -193,7 +196,8 @@
 
 static int __init hvc_tile_init(void)
 {
-#ifndef __tilegx__
+//#ifndef __tilegx__
+#if 1
 	struct hvc_struct *hp;
 	hp = hvc_alloc(0, 0, &hvc_tile_get_put_ops, 128);
 	return PTR_ERR_OR_ZERO(hp);
